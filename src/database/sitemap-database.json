{"":{"title":"Brightlayer UI | Powering Teams to Make What Matters*"},"/overview":{"title":"What is Brightlayer UI?","text":"import React from 'react';\nimport { Divider, ImageGrid } from '../app/components';\nimport DesignSystemImage from '../app/assets/design-system.jpg';\n\n{/* KEYWORDS: overview Brightlayer UI design development introduction */}\n\n# Welcome to Brightlayer UI\n\n<ImageGrid images={[DesignSystemImage]} regularWidth />\n\nBrightlayer UI is a complete design system for web and mobile applications. This system will help your team build beautiful applications that adhere to our design guidelines while ensuring flexibility and code reusability.\n\n> Check out our [Release Notes](/release-notes) to see what's new in the latest version of Brightlayer UI.\n\n## Design\n\nThe goal of the Brightlayer UI design system is to ensure consistency between software products delivered by different teams. With a common aesthetic and common guidelines, we can be sure that all products feel like they belong to the same family.\n\nBrightlayer UI is based on the [Material Design](https://m2.material.io/) language. If you are working with our Studio Blue design team, their designs will follow this standard. If you are not utilizing Studio Blue, ensure that your designers are following the Material Guidelines as well as any additional Brightlayer UI [design patterns](/patterns).\n\n## Development\n\nBrightlayer UI is also a development platform. This platform is intended to help development teams work quickly and efficiently by providing recommendations for technologies, tools/libraries, approaches to common challenges, as well as re-usable components. We support a variety of technologies to give your team the flexibility to choose what will work best for you.\n\n-   To learn about the technologies we support, check out our [Web](/development/frameworks-web/intro) or [Mobile](/development/frameworks-mobile/intro) technology pages.\n-   To learn about the different resources provided by Brightlayer UI, see our [Resources](/resources/developer) page.\n\n<Divider />\n\n# About this site\n\nThis site will provide you with everything you need to get started with Brightlayer UI:\n\n-   Information Guides, including information on starting a [New Project](/get-started/new-project) and the different types of applications you can build\n-   Development Guides, including how to set up a [Development Environment](/development/environment), how to start a new project in any of our supported technologies, and what tools to use for [Testing](/development/testing)\n-   [Design Guides](/design/intro) explaining how to use Brightlayer UI as a designer\n-   Code Examples/[Design Patterns](/patterns) for how to build common elements of a Brightlayer UI application\n-   An extensive set of [icons](/style/icon-library), [colors](/style/color), and [typography](/style/typography) guidelines that you can use in your designs\n-   A [resources](/resources) page with links to all of the Brightlayer UI [NPM packages](https://www.npmjs.com/org/brightlayer-ui) and [GitHub repositories](https://github.com/etn-ccis?q=blui)\n-   A community section with information on [reporting bugs](/community/bugs), [requesting features](/community/features), and more.\n"},"/get-started/new-project":{"title":"Where to Begin?","text":"import React from 'react';\nimport { Divider } from '../../app/components';\n\n{/* KEYWORDS: web mobile new project compare comparison */}\n\n# New Project Guide\n\nWhen approaching a potential new project, it can be challenging to know where to start. As a first step, it's helpful to decide if this is going to be a web application, mobile application, or both. Here is a run-down of these different types of applications.\n\n## Web Applications\n\nThese applications are accessible over the web. They can be accessed from any device with a network connection and a web browser (personal computer, mobile phone). To learn more about what a web application entails, check out our [Web App](/get-started/web) guide.\n\n## Mobile Applications\n\nMobile applications are intended to be used strictly on mobile devices (e.g., cell phones, tablets, etc.). These can be downloaded directly to the device (e.g., from the App Store or Google Play) and do not have to be connected to the Internet to run. To learn more about what a mobile application entails, including the difference between native and hybrid apps, check out our [Mobile App](/get-started/mobile) guide.\n\n<Divider />\n\n# Deciding What Kind of Application to Build\n\nWith a new project, the nature of the project often determines which type of application you will need.\n\n## This Project is Replacing an Existing Product\n\nThink about the existing product and how it is used. Gather feedback from existing users and identify areas for improvement.\n\nIn general, you will want to at least provide the same type of application as before (unless user feedback suggests that it's not what they need). If you had a web application before, you may want to build a responsive web application this time. Alternatively, you may want to expand on the existing product by offering a mobile application.\n\n## This is a Brand New Product (never before seen)\n\nThink about how the product will be used. Does it offer features that users will want to access on the go? Is it going to be actively used in the field, or is it something users will more likely use from their desk?\n\nIn general, you can't go wrong with a web application. If you do your due diligence and design a properly responsive application, you will be able to access it from any connected device, including mobile. If you suspect that the primary mode of interacting with the application will be from a mobile device or if the application needs to work offline, you may want to consider building a dedicated mobile app.\n"},"/get-started/web":{"title":"Web Apps","text":"import React from 'react';\n\n{/* KEYWORDS: web application introduction framework */}\n\n# Web Applications\n\nWeb applications are everywhere. As the name suggests, they can be accessed from any device that can access the Internet. This means they have a lot of flexibility, but that comes with extra responsibility when you design them.\n\n## Responsive Design\n\nResponsive web design is critical for web applications today. With a nearly infinite variety of web-capable devices available, you'll want your application to look great on all of them. It's much easier to design a responsive web application if you start with mobile designs first. If you can fit your features into a mobile-sized display, it's much easier to scale up to a desktop size than it is to design for desktop and then scale everything down to mobile.\n\n## Get Started With a Web App\n\nThere are a lot of wonderful web applications out there and tons of options for how to proceed. Most modern applications are built with HTML / CSS and sit inside a JavaScript framework. If your application needs to be very small, or if you don't really have a need for a JavaScript infrastructure, you can certainly build static applications with just HTML and CSS. You can also use \"vanilla\" JavaScript without the need for including an entire JavaScript framework in your application. We support both Angular and React in the Brightlayer UI design system.\n\nFor a comparison of the pros / cons of each of these frameworks, see our [Framework Introduction](/development/frameworks-web/intro).\n\nOne of the goals of Brightlayer UI is to maximize maintainability and code re-use by standardizing on certain technologies. If you want to use a different framework from those that we support, you'll need to consider the trade-offs.\n"},"/get-started/mobile":{"title":"Mobile Apps","text":"import React from 'react';\nimport { Divider } from '../../app/components';\n\n{/* KEYWORDS: mobile hybrid compare comparison native application */}\n\n# Mobile Applications\n\nMobile applications are very popular. They can be accessed anywhere you can take your mobile device, both online and offline, and can take greater advantage of device features and capabilities than a web application.\n\nMobile applications come in two primary varieties: native apps and hybrid apps.\n\n## Native mobile apps\n\n-   Must be built using the native code that runs on mobile devices. In general, that means Java (Android) or Swift / Objective C (iOS)\n-   Should adhere to the design and development guidelines for the intended platforms:\n    -   [iOS Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/)\n        {/* <!-- markdown-link-check-disable --> */}\n    -   [Android Guidelines](https://developer.android.com/design/index.html)\n        {/* <!-- markdown-link-check-enable --> */}\n\nAndroid and iOS are the dominant players in the mobile market, but you should check with your particular users to see what is most prevalent in your target market.\n\n## Hybrid mobile apps\n\n-   Maintained as a single code base that is deployed to multiple different device types (namely iOS and Android)\n-   Built using web-technologies (i.e. JavaScript)\n    -   low barrier to entry for web developers\n-   Implemented differently depending on the framework:\n    -   some compile down to native components\n    -   others render all content in a web view (essentially a web page running inside of an app)\n\n<Divider style={{}} />\n\n# Comparing the two approaches\n\n## Native mobile apps\n\n-   Guaranteed to look & feel like an app since it uses native components\n-   Requires more specialized development expertise\n-   Requires separate code bases for different operating systems\n    -   Longer development time\n    -   More expensive / more maintenance\n\n## Hybrid mobile apps\n\n-   Reduces development time thanks to shared code base\n-   Provides more technology options\n    -   Many different hybrid platforms / tools available\n-   Allows for a consistent look on different platforms\n-   Makes development easier by using web technologies, but it's also easier to make something that doesn't follow standard mobile patterns\n\n<Divider style={{}} />\n\n# So, which one should you use?\n\nOur recommendation for mobile applications is to take a hybrid approach. This will allow you to deploy multiple versions of your application (i.e. iOS and Android) from a single code base. We offer support for several different approaches to building hybrid apps (see our [Mobile Framework Introduction](/development/frameworks-mobile/intro) to learn about the technologies we support).\n\n> **NOTE:** Brightlayer UI support for native mobile applications is limited - if you are planning to go this route, please [Contact us](/community/contactus).\n"},"/development/environment":{"title":"Environment Setup","text":"import React from 'react';\nimport { Divider } from '../../app/components';\n\n{/* KEYWORDS: developer develop environment guide tutorial */}\n\n# Setting up Your Development Environment\n\nGetting started is often the most frustrating part of application development. Fortunately, many of the modern JavaScript frameworks have made great strides in providing tools to get you up and running as quickly as possible. Below, we walk through the basics of getting your system set up to develop.\n\n## Integrated Development Environment (IDE)\n\nThere are a bunch of different IDEs on the market, and in general you should be able to use any of these that you like and are comfortable with. If you don't have a personal preference, we recommend trying [Visual Studio Code](https://code.visualstudio.com) - it is quite excellent and comes with a variety of tools to make your development experience seamless. And it's free!\n\n## Git\n\nChances are, you probably want to keep your application in source control. Git is one of the big players in this space (it's also the backbone for BitBucket).\n\nYou may already have git installed. To check, run:\n\n```sh\ngit --version\n```\n\nin a command prompt. If you don't have git installed, you can download it from the [Git Website](http://git-scm.com/downloads).\n\nIf you are behind a proxy, you'll also need to set up the git proxies as well:\n\n```sh\ngit config --global http.proxy http://url.to.your.proxy:port\ngit config --global https.proxy http://url.to.your.proxy:port\n```\n\nThe proxy addresses may vary depending on your location. Consult your local IT department if you’re not sure.\n\n## Node\n\nThe majority of JavaScript frameworks (and Brightlayer UI resources) are available via the Node Package Manager (NPM). This package manager allows you to install a variety of third party tools, packages, and other dependencies that you need for your applications. To use NPM, you will need to install [NodeJS](https://nodejs.org/en/download/).\n\n## Yarn\n\nOur projects and example code are set up to be run using yarn, but if you prefer, you're welcome to use NPM in your projects instead. Instructions for installing yarn on various operating systems can be found on the [Yarn Website](https://yarnpkg.com/en/docs/install).\n\nTo check if you have yarn installed, run:\n\n```sh\nyarn -v\n```\n\nfrom a command prompt. If you are behind a proxy, you will also need to configure your proxy settings. It may be sufficient for you to set `HTTP_PROXY` and `HTTPS_PROXY` in your environment variables. However, you may need to also explicitly set proxy values for yarn:\n\n```sh\nyarn config set proxy http://url.to.your.proxy:port\nyarn config set https-proxy http://url.to.your.proxy:port\n```\n\nThe proxy addresses may vary depending on your location. Consult your local IT department if you’re not sure. Once you have configured the proxy, you should be able to install packages by using:\n\n```sh\nyarn add <package-name>\n```\n\n> If you are installing packages globally using yarn, you will need to ensure that your PATH variable has an entry pointing to your global yarn install directory. This location will vary based on your operating system.\n\n<Divider />\n\n# Hybrid App Development\n\nIf you are setting up for building a mobile app, there are some additional steps you will want to take to prepare. The following requirements are the basics. Depending on your selected [framework](/development/frameworks-mobile/intro), there will be other specific setup steps detailed in our Getting Started Guides.\n\n## Prerequisites\n\n### Hardware\n\nMobile development is resource-intensive, so you will need a development machine that is up to the task. Your machine should at least match the following minimum requirements:\n\n-   a Mac (if you plan on building or testing iOS locally)\n-   16GB RAM or more (running multiple emulators can easily push you over 20GB)\n-   Solid State Hard Drive (SSD)\n-   5/6 Gen Core i7 with Virtualization Technology or better\n\n### Software\n\nThere are a few software tools that you will need before you can get started:\n\n{/* <!-- markdown-link-check-disable --> */}\n\n-   [Android Studio](https://developer.android.com/studio/) (required for building for Android)\n    {/* <!-- markdown-link-check-enable --> */}\n-   [xCode](https://developer.apple.com/xcode/) (Mac-only, required for building for iOS)\n"},"/development/cli":{"title":"Brightlayer UI CLI","text":"import React from 'react';\nimport { Divider, EmbeddedYouTubePlayer } from '../../app/components';\n\n{/* KEYWORDS: cli command line interface new project start */}\n\n# Brightlayer UI CLI\n\n<EmbeddedYouTubePlayer videoID={`CESJ9BKLWco`} />\n\nThe Brightlayer UI CLI (Command-Line Interface) is a tool for quickly starting new projects using Brightlayer UI. It will create a skeleton project in your chosen framework and automatically integrate:\n\n-   Material and Brightlayer UI component libraries\n-   Brightlayer UI themes\n-   Open Sans Typography package\n-   Brightlayer UI colors package\n-   Brightlayer UI code formatting and linting profiles (optional)\n\nWhen starting a new project, you will have the opportunity to select a template as your starting point, including a blank template, basic routing template, and a full authentication template.\n\n> These templates are available for [Angular](https://github.com/etn-ccis/blui-angular-cli-templates/blob/master/README.md#angular-cli-templates), [React](https://github.com/etn-ccis/blui-react-cli-templates/blob/master/README.md#react-cli-templates), and [React-Native](https://github.com/etn-ccis/blui-react-native-cli-templates/blob/master/README.md#react-native-cli-templates).\n\nTo start a new project with the CLI:\n\n```sh\nnpx -p @brightlayer-ui/cli blui new\n```\n\nFor more detailed information and usage instructions, check out the [@brightlayer-ui/cli](https://www.npmjs.com/package/@brightlayer-ui/cli) package on NPM.\n\n## Supported Frameworks\n\nThe Brightlayer UI CLI works with all Brightlayer UI supported frameworks: Angular, React, and React Native.\n"},"/development/frameworks-web/intro":{"title":"Introduction","text":"import React from 'react';\nimport { Divider } from '../../../app/components';\n\n{/* KEYWORDS: introduction web framework compare comparison */}\n\n# Brightlayer UI Web Frameworks\n\nBrightlayer UI supports web application development using Angular and React. Both are open source JavaScript frameworks with large communities of support and both have open source component libraries implementing Material Design. The two are quite comparable and you would not go wrong by choosing either, but there are some notable differences outlined below.\n\n## Angular (with Angular Material)\n\n-   A comprehensive framework, with a lot of built-in features and functionality\n-   Written in TypeScript (superset of JavaScript with strong variable typing)\n-   Structured way of organizing your entire application (if following the Angular CLI)\n-   May be more accessible to developers with greater back-end or full-stack experience\n-   Maintained by Google\n-   Learn more on the [Angular website](https://angular.io/)\n\n## React (with MUI)\n\n-   A UI library for building custom Web Components / Applications\n-   Can be combined with additional libraries (e.g. Redux) to be a more comprehensive framework\n-   Virtual DOM allows for fewer re-renders (i.e., faster UI updates)\n-   May be more accessible to developers with greater experience with JavaScript and front-end development\n-   Maintained by Facebook\n-   Learn more on the [React website](https://reactjs.org/)\n\n<Divider style={{}} />\n\n# Which framework should I use?\n\nChoosing a framework is entirely up to you. They each have their own pros and cons, so you'll need to decide what is best for your application. In general, if you have developers who are very familiar with a particular framework, it might be worthwhile to use that framework to avoid any unnecessary learning curves associated with a new one. If you don't have development resources yet, you will probably want to conduct a more in-depth analysis of the available frameworks to decide what is most appropriate for your application. Feel free to reach out to us for assistance if needed.\n\nIf you choose to use one of these frameworks, have a look at our Guides for using them with Brightlayer UI:\n\n-   [Angular Guide](/development/frameworks-web/angular)\n-   [React Guide](/development/frameworks-web/react)\n"},"/development/frameworks-web/angular":{"title":"Angular Guide","text":"import React from 'react';\nimport { Divider } from '../../../app/components';\n\n{/* KEYWORDS: angular web framework guide tutorial */}\n\n# Getting Started with Angular\n\nThe following instructions will guide you through starting a new Brightlayer UI project using Angular. Alternatively, you can also start your project by downloading one of our code samples from [Github](https://github.com/etn-ccis?q=blui) (the Login or Navigation examples are good projects to start from).\n\n## Using the Brightlayer UI CLI\n\nThe fastest way to start a new Brightlayer UI project is to use the [Brightlayer UI CLI](/development/cli). The CLI will automatically create a starter project for you (using the [Angular CLI](http://cli.angular.io/)) with all of the necessary Brightlayer UI dependencies pre-configured. To start an Angular project:\n\n```sh\nnpx -p @brightlayer-ui/cli blui new angular\n```\n\nYou will be asked to provide a name for your project and whether or not you want to use the Brightlayer UI eslint and prettier configurations files.\n\nThe Brightlayer UI CLI will automatically include:\n\n-   Angular Material Component Library ([@angular/material](https://www.npmjs.com/package/@angular/material))\n-   Brightlayer UI Component Library ([@brightlayer-ui/angular-components](https://www.npmjs.com/package/@brightlayer-ui/angular-components))\n-   Brightlayer UI Themes ([@brightlayer-ui/angular-themes](https://www.npmjs.com/package/@brightlayer-ui/angular-themes))\n-   Brightlayer UI Icons ([@brightlayer-ui/icons](https://www.npmjs.com/package/@brightlayer-ui/icons))\n-   Brightlayer UI Colors ([@brightlayer-ui/colors](https://www.npmjs.com/package/@brightlayer-ui/colors))\n-   Open Sans web font ([@font-source/open-sans](https://www.npmjs.com/package/@fontsource/open-sans))\n-   Brightlayer UI ESLint and Prettier configurations, if selected ([@brightlayer-ui/eslint-config](https://www.npmjs.com/package/@brightlayer-ui/eslint-config) / [@brightlayer-ui/prettier-config](https://www.npmjs.com/package/@brightlayer-ui/prettier-config))\n\nFor detailed usage instructions, refer to the [Brightlayer UI CLI documentation](https://www.npmjs.com/package/@brightlayer-ui/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate Brightlayer UI, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the Brightlayer UI CLI.\n\n<Divider />\n\n# Manual Brightlayer UI Integration\n\nBefore taking the following steps, you'll want to make sure that you have an existing application. If you used the Brightlayer UI CLI to start your project, these steps have already been done for you automatically.\n\n## Including the Component Libraries\n\n### Angular Material\n\nAngular projects should make use of the [Angular Material](https://material.angular.io/) component library. Our Brightlayer UI themes are designed to work with these components.\n\n```sh\nnpm install --save @angular/material\n// or\nyarn add @angular/material\n```\n\nFor detailed documentation about the various components available in Angular Material, as well as sample code and API reference, refer to the [Angular Material Documentation](https://material.angular.io/components/).\n\n### Brightlayer UI Components\n\nAdditionally, we have a [supplemental library](/development/components) of components designed specifically for Brightlayer UI applications. If you wish to use these components, you can install them by running:\n\n```sh\nnpm install --save @brightlayer-ui/angular-components\n// or\nyarn add @brightlayer-ui/angular-components\n```\n\n## Adding Brightlayer UI Themes\n\nBy default, your application will be themed with the Google Material theme. To use the [Brightlayer UI theme](https://www.npmjs.com/package/@brightlayer-ui/angular-themes), first install it:\n\n```sh\nnpm install --save @brightlayer-ui/angular-themes\n// or\nyarn add @brightlayer-ui/angular-themes\n```\n\nInstalling the theme package will automatically include the Open Sans web font package as well as the Brightlayer UI [colors](https://www.npmjs.com/package/@brightlayer-ui/colors) package. In order to use the Brightlayer UI themes and font (Open Sans), you will need to modify your angular.json file \"styles\" entries (there is one under \"build\" and one under \"test\") to include the Brightlayer UI themes and Open Sans reference:\n\n```json\n\"styles\": [\n    \"src/styles.scss\",\n    \"./node_modules/@brightlayer-ui/angular-themes/theme.scss\",\n    \"./node_modules/@brightlayer-ui/angular-themes/open-sans.scss\",\n],\n```\n\n### Applying the Theme\n\nYou can apply the theme to your application by adding the proper class to your application's body element:\n\n```html\n// Default Theme\n<body class=\"blui-blue\" />\n\n// Dark Theme\n<body class=\"blui-blue-dark\" />\n```\n\n> If you do not specify a theme class, your application will use the default Material theme.\n\nYou can access the fonts using mat-typography, e.g.:\n\n```html\n<section class=\"mat-typography>\n   <h1>H1 Text</h1>\n   <h2>H2 Text</h2>\n   <p>Paragraph text</p>\n   <div class=\"body-2\">Bold body copy</div>\n</section>\n```\n\nYou can access theme colors as well, e.g.:\n\n```html\n<mat-toolbar color=\"primary\">My App</mat-toolbar>\n```\n\nMore details about applying themes in your application can be found in [Theming your Angular Material app](https://material.angular.io/guide/theming).\n\n<Divider />\n\n# Additional Information\n\n## Code Formatting / Style\n\nBrightlayer UI provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the Brightlayer UI team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/etn-ccis/blui-code-standards).\n\n## Browser Support\n\nBrightlayer UI supports the same browsers as Angular and Angular Material. For specifics, please check out their support pages:\n\n-   [Angular CLI](https://angular.io/guide/browser-support)\n-   [Angular Material](https://github.com/angular/material2#browser-and-screen-reader-support)\n\n> With the end-of-life of Internet Explorer 11, Brightlayer UI will no longer be supporting IE11 as of 2021.\n\n## License Information\n\n[Angular](https://github.com/angular/angular/blob/master/LICENSE) and [Angular Material](https://github.com/angular/material2/blob/master/LICENSE) are both available under the MIT License.\n"},"/development/frameworks-web/react":{"title":"React Guide","text":"import React from 'react';\nimport { Divider } from '../../../app/components';\n\n{/* KEYWORDS: react web framework guide tutorial */}\n\n# Getting Started with React\n\nThe following instructions will guide you through starting a new Brightlayer UI project using React. Alternatively, you can also start your project by downloading one of our code samples from [Github](https://github.com/etn-ccis?q=blui) (the Login or Navigation examples are good projects to start from).\n\n## Using the Brightlayer UI CLI\n\nThe fastest way to start a new Brightlayer UI project is to use the [Brightlayer UI CLI](/development/cli). The CLI will automatically create a starter project for you (using [Create React App](https://github.com/facebookincubator/create-react-app)) with all of the necessary Brightlayer UI dependencies pre-configured. To start a React project:\n\n```sh\nnpx -p @brightlayer-ui/cli blui new react\n```\n\nYou will be asked to provide a name for your project and whether you want to use the Brightlayer UI eslint and prettier configuration files.\n\nThe Brightlayer UI CLI will automatically include:\n\n-   MUI Component Library and Icons ([@mui/material](https://www.npmjs.com/package/@mui/material) / [@mui/icons-material](https://www.npmjs.com/package/@mui/icons-material))\n-   Brightlayer UI Component Library ([@brightlayer-ui/react-components](https://www.npmjs.com/package/@brightlayer-ui/react-components))\n-   Brightlayer UI Themes ([@brightlayer-ui/react-themes](https://www.npmjs.com/package/@brightlayer-ui/react-themes))\n-   Brightlayer UI Icons ([@brightlayer-ui/icons-mui](https://www.npmjs.com/package/@brightlayer-ui/icons-mui))\n-   Brightlayer UI Colors ([@brightlayer-ui/colors](https://www.npmjs.com/package/@brightlayer-ui/colors))\n-   Open Sans web font ([@fontsource/open-sans](https://www.npmjs.com/package/@fontsource/open-sans))\n-   Brightlayer UI ESLint and Prettier configurations, if selected ([@brightlayer-ui/eslint-config](https://www.npmjs.com/package/@brightlayer-ui/eslint-config) / [@brightlayer-ui/prettier-config](https://www.npmjs.com/package/@brightlayer-ui/prettier-config))\n-   Enzyme testing library ([enzyme](https://www.npmjs.com/package/enzyme) / [enzyme-adapter-react-16](https://www.npmjs.com/package/enzyme-adapter-react-16))\n\nFor detailed usage instructions, refer to the [Brightlayer UI CLI documentation](https://www.npmjs.com/package/@brightlayer-ui/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate Brightlayer UI, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the Brightlayer UI CLI.\n\n<Divider />\n\n# Manual Brightlayer UI Integration\n\nBefore taking the following steps, you'll want to make sure that you have an existing application. If you used the Brightlayer UI CLI to start your project, these steps have already been done for you automatically.\n\n## Including the Component Libraries\n\n### MUI\n\nReact projects should make use of the [MUI](https://mui.com/) component library, formerly known as Material UI. Our Brightlayer UI themes are designed to work with these components. You'll also want to install the icons.\n\n```sh\nnpm install --save @mui/material @mui/icons-material @emotion/react @emotion/styled\n// or\nyarn add @mui/material @mui/icons-material @emotion/react @emotion/styled\n```\n\nFor detailed documentation about the various components available in MUI, as well as sample code and API reference, refer to the [MUI Documentation](https://mui.com/).\n\n### Brightlayer UI Components\n\nAdditionally, we have a [supplemental library](/development/components) of components designed specifically for Brightlayer UI applications. If you wish to use these components, you can install them by running:\n\n```sh\nnpm install --save @brightlayer-ui/react-components\n// or\nyarn add @brightlayer-ui/react-components\n```\n\n## Adding Brightlayer UI Themes\n\nBy default, your application will be themed with the Google Material theme. To use the [Brightlayer UI theme](https://www.npmjs.com/package/@brightlayer-ui/react-themes), first install it:\n\n```sh\nnpm install --save @brightlayer-ui/react-themes\n// or\nyarn add @brightlayer-ui/react-themes\n```\n\nInstalling the theme package will automatically include the Open Sans web font package as well as the Brightlayer UI [colors](https://www.npmjs.com/package/@brightlayer-ui/colors) package.\n\n### Applying the Theme\n\nImport the theme files, MUI theme provider, and **Open Sans** font into your application, e.g. in App.js:\n\n```tsx\nimport { ThemeProvider, createTheme } from '@mui/material';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport * as BLUIThemes from '@brightlayer-ui/react-themes';\nimport '@brightlayer-ui/react-themes/open-sans';\n```\n\nTo add the theme to your whole application, you would simply add a `<ThemeProvider>` around your top-level component and pass it the theme you want to use, e.g.:\n\n```tsx\n<ThemeProvider theme={createTheme(BLUIThemes.blue)}>\n    <CssBaseline/>\n    <MyApp/>\n</MuiThemeProvider>\n```\n\nYou can read about [React Theming](https://mui.com/customization/theming/) to learn more.\n\n<Divider />\n\n# Additional Information\n\n## Code Formatting / Style\n\nBrightlayer UI provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the Brightlayer UI team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/etn-ccis/blui-code-standards).\n\n> NOTE: the ESLint package is only available for TypeScript projects.\n\n## Browser Support\n\nBrightlayer UI supports the same browsers as React and MUI. For specifics, please check out their support pages:\n\n-   [React](https://facebook.github.io/create-react-app/docs/supported-browsers-features)\n-   [MUI](https://mui.com/material-ui/getting-started/supported-platforms/)\n\n> With the end-of-life of Internet Explorer 11, Brightlayer UI will no longer be supporting IE11 as of 2021.\n\n## License Information\n\n[React](https://github.com/facebook/react/blob/master/LICENSE) and [MUI](https://github.com/mui-org/material-ui/blob/master/LICENSE) are both available under the MIT License.\n"},"/development/frameworks-mobile/intro":{"title":"Introduction","text":"import React from 'react';\nimport { Divider } from '../../../app/components';\n\n{/* KEYWORDS: mobile hybrid framework compare comparison */}\n\n# Brightlayer UI Mobile (Hybrid) Frameworks\n\nBrightlayer UI supports hybrid mobile application development using React Native. Some of the key considerations when using React Native are:\n\n-   Renders native UI elements (not a WebView)\n-   Can re-use application logic code (React)\n-   Requires writing new code for UI (learning curve)\n-   Does not use CSS for styling (learning curve)\n-   Provides access to hardware functionality through various plugins / libraries\n-   Has a large community of support\n-   Learn more on the [React Native Website](https://facebook.github.io/react-native/)\n\n<Divider style={{}} />\n\n# Building your application\n\nFollow our [React Native](/development/frameworks-mobile/react-native) guide for information on developing using this framework. This guide will walk you through the process of developing your application and ultimately creating a final binary to distribute (either to your testers or your final customers).\n\n## Deploying your application\n\nOnce you have built your application into a distributable binary, there are two options for distributing it.\n\n### Visual Studio App Center (formerly HockeyApp)\n\nVisual Studio App Center gives you a way to test your app with users before you are ready for final distribution. This service allows you to upload app binaries and create lists of people with whom to share them. These people will be notified via email when new versions of the app are available, and they will be prompted to download and install them directly onto their devices. You will need to request access to Visual Studio App Center from IT.\n\n### App Store / Play Store\n\nFor the final distribution of your application, you will need to utilize App Store Connect and / or Google Play Console.\n\n# What about other mobile frameworks?\n\nThere is a wide variety of different technologies on the market for developing mobile apps, including native (Objective C / Swift, Kotlin / Java) and hybrid frameworks (Flutter, Ionic, Cordova, Xamarin, React Native, etc.).\n\nWe recommend and support development using React Native for these key reasons:\n\n-   Maintaining a single code base that can deploy to iOS or Android saves time over building two separate native apps.\n-   React Native gives a truer native experience than other \"web wrapper\" frameworks, which tend to present a clunkier user experience.\n-   React Native has a well-supported open-source implementation of Material Design.\n-   Business logic code can be shared with existing web applications built using React.\n-   Supporting one framework allows us to concentrate our resources on building more features rather than having a smaller feature set across multiple technologies.\n-   Encouraging teams to use the same technology stack maximizes the potential for code sharing between different teams.\n\nThere may be circumstances where a different technology makes more sense for your project. For example, if you have an existing web app built using Angular, you may not want to start from scratch and learn React in order to use React Native. In this case, you may be better off using a technology like Ionic to wrap your existing application in a wrapper for mobile.\n\nWhen selecting a technology for your project, you will need to weigh the pros and cons to determine which approach is best.\n\n<Divider style={{}} />\n"},"/development/frameworks-mobile/react-native":{"title":"React Native Guide","text":"import React from 'react';\nimport { Divider } from '../../../app/components';\n\n{/* KEYWORDS: react native mobile hybrid framework guide tutorial */}\n\n# Getting Started with React Native\n\nThe following instructions will guide you through setting up your computer for React Native development and starting a new Brightlayer UI project. Alternatively, you can start your project by downloading one of our code samples from [GitHub](https://github.com/etn-ccis?q=blui) (the Login example is a good project to start from) once you configure your environment.\n\n<Divider />\n\n# Setting Up Your Environment\n\nYou'll need to start by following the general instructions for setting up your development environment for mobile found in our [Environment Guide](/development/environment).\n\n<Divider />\n\n# Creating Your Application\n\n## Using the Brightlayer UI CLI\n\nThe fastest way to start a new Brightlayer UI project is to use the [Brightlayer UI CLI](/development/cli). The CLI will automatically create a starter project for you using the [React Native Community CLI](https://github.com/react-native-community/cli) with all of the necessary Brightlayer UI dependencies pre-configured. To start a React Native project:\n\n```sh\nnpx -p @brightlayer-ui/cli blui new react-native\n```\n\nYou will be asked to provide a name for your project and whether you want to use the Brightlayer UI eslint and prettier configurations files.\n\nThe Brightlayer UI CLI will automatically include:\n\n-   React Native Paper Component Library ([react-native-paper](https://www.npmjs.com/package/react-native-paper))\n-   Brightlayer UI Component Library ([@brightlayer-ui/react-native-components](https://www.npmjs.com/package/@brightlayer-ui/react-native-components))\n-   Brightlayer UI Themes ([@brightlayer-ui/react-native-themes](https://www.npmjs.com/package/@brightlayer-ui/react-native-themes))\n-   Material Icons ([react-native-vector-icons](https://www.npmjs.com/package/react-native-vector-icons))\n-   Brightlayer UI Icons ([@brightlayer-ui/icons-svg](https://www.npmjs.com/package/@brightlayer-ui/icons-svg))\n-   Brightlayer UI Colors ([@brightlayer-ui/colors](https://www.npmjs.com/package/@brightlayer-ui/colors))\n-   Open Sans font\n-   Brightlayer UI ESLint and Prettier configurations, if selected ([@brightlayer-ui/eslint-config](https://www.npmjs.com/package/@brightlayer-ui/eslint-config) / [@brightlayer-ui/prettier-config](https://www.npmjs.com/package/@brightlayer-ui/prettier-config))\n-   Testing libraries ([jest](https://www.npmjs.com/package/jest) / [react-test-renderer](https://www.npmjs.com/package/react-test-renderer))\n\nFor detailed usage instructions, refer to the [Brightlayer UI CLI documentation](https://www.npmjs.com/package/@brightlayer-ui/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate Brightlayer UI, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the Brightlayer UI CLI.\n\n<Divider />\n\n# Manual Brightlayer UI Integration\n\nBefore taking the following steps, you'll want to make sure that you have an existing application. If you used the Brightlayer UI CLI to start your project, these steps have already been done for you automatically.\n\n## Including the Component Libraries\n\n### Material Components\n\nReact Native projects should make use of the [React-Native-Paper](https://callstack.github.io/react-native-paper/) component library. Our Brightlayer UI themes are designed to work with these components. You'll also want to install [react-native-vector-icons](https://www.npmjs.com/package/react-native-vector-icons) to access the Material icons.\n\n```sh\nnpm install --save react-native-paper@4.0.0 react-native-vector-icons\n// or\nyarn add react-native-paper@4.0.0 react-native-vector-icons\n```\n\n> **NOTE**: react-native-paper@5.0.0 is currently available, however, we only support React Native Paper v4 at this time. Please be sure to keep peer-dependencies aligned as defined above to avoid potential conflicts.\n\n### Brightlayer UI Components\n\nWe have a [supplemental library](/development/components) of components designed specifically for Brightlayer UI applications. If you wish to use these components, you can install them by running:\n\n```sh\nnpm install --save @brightlayer-ui/react-components\n// or\nyarn add @brightlayer-ui/react-native-components\n```\n\n## Adding Brightlayer UI Themes\n\nIf you are using the recommended component libraries, your application will be themed with the Google Material theme by default. To use the Brightlayer UI theme, first install it:\n\n```sh\nnpm install --save @brightlayer-ui/react-native-themes\n// or\nyarn add @brightlayer-ui/react-native-themes\n```\n\n> Using the Brightlayer UI React Native theme **requires** that you add the Open Sans font to your application. You can learn how to do this by reading the instructions for [Vanilla React Native](https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e). You can find the fonts [here](https://github.com/etn-ccis/blui-react-native-cli-templates/tree/master/blank-typescript/fonts).\n\n## Applying the Theme\n\nImport the theme files and React Native Paper theme provider into your application, e.g. in App.js:\n\n```tsx\nimport { Provider as ThemeProvider } from 'react-native-paper';\nimport * as BLUIThemes from '@brightlayer-ui/react-native-themes';\n...\n<ThemeProvider theme={BLUIThemes.blue}>\n    <App />\n</ThemeProvider>\n```\n\nFor detailed information about theming, refer to the react-native-paper [theming guide](https://callstack.github.io/react-native-paper/docs/guides/theming).\n\n> NOTE: This theme only applies to the components in the react-native-paper and @brightlayer-ui/react-native-components package. It will not theme the components from other third party libraries. If you wish to use our theme to style your own components, refer to the react-native-paper [theming guide](https://callstack.github.io/react-native-paper/docs/guides/theming#extending-the-theme).\n\n### Avoiding Repeated Styles\n\nTo avoid adding repeatedly adding inline styles to standard components, you can define your own component that applies the styles and use that throughout your application, e.g.:\n\n```tsx\n// MyText.js\nexport default MyText = ({style, children, ...other}) => (\n    <Text {...other} style={StyleSheet.flatten([{/* Theme styles here */}, style])}>\n        {children}\n    </Text>\n);\n\n// OtherFile.js\nimport Text from 'path/to/MyText.js';\n...\n<Text>Themed Text Object</Text>\n```\n\n<Divider />\n\n# Writing a React Native Application\n\nIf you are familiar with React development, React Native will be relatively simple to understand. The application logic remains the same, while the UI requires a little adjustment. Rather than typical HTML elements, React Native UIs are built with a special library of [Components](https://facebook.github.io/react-native/docs/components-and-apis), including `<View>`, `<Text>`, `<Image>`, etc. React Native layouts are built exclusively using FlexBox.\n\n## Running your application\n\nAfter you've created your application with a CLI, it can be run from the command line:\n\n```sh\ncd YourAppName\n\nnpm run <ios|android>\n// or\nyarn <ios|android>\n```\n\nWhen you make changes to the source code, the application will automatically rebuild and update on the device.\n\n> To run on an Android emulator, the emulator must already be running or you will see an error message, \"No connected devices found.\"\n\n> On a Mac, you may be prompted to install watchman (`brew install watchman`) or update a few settings to run the application.\n\n## Final Build\n\nNow, you can open the project folders in xCode (/ios/projectName.xcodeproj) or Android Studio (/android) and perform builds from the IDE. Depending on the version of React Native you are using, you may have to [manually bundle your JS code](https://stackoverflow.com/questions/44446523/unable-to-load-script-from-assets-index-android-bundle-on-windows) for Android.\n\n<Divider />\n\n# Additional Information\n\n## Code Formatting / Style\n\nBrightlayer UI provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the Brightlayer UI team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/etn-ccis/blui-code-standards).\n\n> NOTE: the ESLint package is only available for TypeScript projects.\n\n## Component recommendations\n\nThere are a lot of resources and components available on the market to help speed up your development and improve reusability. React Native also comes with a built-in component library. We recommend the following:\n\n-   Navigation\n    -   [React Navigation](https://reactnavigation.org/) (JS-only implementation)\n    -   [React Native Navigation](https://wix.github.io/react-native-navigation/#/) (native implementation)\n-   Component Libraries\n    -   [React Native Built-in Components](https://reactnative.dev/docs/components-and-apis)\n    -   [React Native Paper](https://callstack.github.io/react-native-paper/)\n    -   [React Native Elements](https://react-native-training.github.io/react-native-elements/)\n\n## License Information\n\n[React Native](https://github.com/facebook/react-native/blob/master/LICENSE) is available under the MIT License.\n"},"/development/testing":{"title":"Testing","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider } from '../../app/components';\n\n# Testing Your Brightlayer UI Applications\n\n{/* KEYWORDS: testing test unit e2e tdd bdd integration cypress */}\n\nTesting is a critical component of successfully building and releasing an application. Despite the value and importance of testing, it is common for teams to overlook or neglect it. Testing should be considered from the very beginning of development, not as an afterthought once development is complete. In general, every time you write a new piece of code or update existing code, you should also write a test that verifies that your code is correct.\n\nThere are many [varieties of tests](https://www.atlassian.com/continuous-delivery/software-testing/types-of-software-testing), each with their own intended purpose. The most common types of tests are:\n\n-   **Unit Tests**: verify individual methods, functions, or components.\n-   **Integration Tests**: verify that different modules or services in your application work together.\n-   **Functional Tests**: verify the output of certain actions based on business requirements.\n-   **End-to-end (E2E) Tests**: verify that user behaviors / workflows function as expected.\n-   **Acceptance Tests**: verify that the entire system meets the business requirements.\n-   **Performance Tests**: verify that the system behaves correctly under heavy load.\n-   **Smoke Tests: quick**: basic checks of the major features of the application.\n\nThis document focuses mainly on Unit Tests and E2E tests, as they are the easiest to automate.\n\n<Divider />\n\n# Unit Tests\n\nUnit tests target the smallest pieces of your application (such as verifying inputs and outputs of a class method or function). These will likely make up the bulk of your tests because they are quick to write, easy to automate, and can help you achieve significant code coverage.\n\n> Code Coverage measures the percentage of your code that is verified by your tests.\n\nA unit test shouldn't have any external dependencies, such as other methods or APIs. By keeping unit tests isolated in this manner, it's easy to identify the cause of a failing test and implement a fix quickly. When you start combining features and methods together, you move into the realm of _integration testing_.\n\n## When to Write\n\nAs long as you are writing tests and achieving acceptable levels of coverage, the _when_ is not as important.\n\nSome teams elect to follow a Test-Driven Development (TDD) methodology, where unit tests are written prior to any code. In this situation the tests actually define the desired implementation of the application and the code is written to satisfy the tests.\n\nBehavior-Driven Development (BDD) is similar to TDD in that test cases are written prior to writing any applications code. However, these test cases focus more on the desired behavior (inputs and outputs) of the application, and less on the actual implementation. These are usually written in plain language rather than code.\n\nThe most important thing to keep in mind about tests is that they should provide confidence that the code and design are working as intended without issues in any scenario. For most teams, it's fine to write tests after features and functions are developed, so long as you write quality tests and achieve good coverage.\n\n## How to Write\n\nWhen unit testing components, the most effective tests are based on what is actually rendered on the screen rather than the internal implementation logic. The test should consider the application from the user's perspective and test things the user views and interacts with.\n\nFor example, consider testing an Open Button that should open a modal dialog when clicked. Your test should check that a button with the _Open_ label is rendered on the screen, and when it is clicked, the dialog is rendered on the screen with the correct content. You may be tempted to identify the button by a class or id, or test that a particular function is called when the button is pressed - these tests are not as effective because they are more likely to break if the implementation of the component changes, even though the end behavior is the same.\n\n-   Test what the user sees (i.e., rendered output) and what the user can do  (i.e., interactions).\n-   If there is visual change after an interaction, test for it.\n-   If there is a value returned after an action, test for it.\n\n## Testing Frameworks\n\nAngular, React, and React Native all come with built-in unit testing frameworks.\n\n### Angular\n\nThe Angular CLI comes pre-configured with [Jasmine](https://jasmine.github.io/pages/getting_started.html) and [Karma](https://karma-runner.github.io/latest/index.html) for unit testing. When you create a new project, sample tests are created in your project for you (test files are identified by the `.spec.ts` file extension). You can execute the tests by running the following in your terminal:\n\n```sh\ncd your/project/root\nng test\n```\n\nThis will build your app and launch the browser with the test runner.\n\n### React\n\nThe Create React App CLI is pre-configured with the [Jest](https://github.com/facebook/jest) testing framework. When creating a new project, a sample test is created in your project for you (test files are identified by the `.test.js` or `test.ts` file extension). You can execute the tests by running the following in your terminal:\n\n```sh\ncd your/project/root\nnpm run test\n// or\nyarn test\n```\n\nThis will run your tests and show the pass / fail output in the terminal.\n\nThere are additional test utilities that complement Jest well. [Create React App](https://facebook.github.io/create-react-app/docs/running-tests) provides access to [React Testing Library](https://www.npmjs.com/package/@testing-library/react) through the `react-dom` dependency. The Brightlayer UI team has also made use of [Enzyme](https://airbnb.io/enzyme/), a testing framework created by AirBnB, and [Test Renderer](https://reactjs.org/docs/test-renderer.html).\n\n### React Native\n\nLike React, the React Native CLI also bundles Jest into your application. Most of the testing strategies and libraries can be shared between the two frameworks. You can also consider additional libraries like [React Native Testing Library](https://www.npmjs.com/package/@testing-library/react-native).\n\n<Divider />\n\n# End-to-End Testing\n\nEnd-to-end tests at a step above unit tests, both in terms of complexity and what they test. They focus primarily on the flow of the application, making sure that a user's journey through the application has the expected outcomes. These tests can generally be categorized as:\n\n-   **Acceptance Tests**: verify that various features and flows meet the customer expectations.\n-   **Regression Tests**: verify that existing functionality is not broken when new features are added.\n\nThey should cover user stories that span multiple components and views, such as signing up for an accounts, logging in and out of the application, updating a profile, etc. These tests are not concerned with the underlying state or implementation of the application - just the end results.\n\nEnd-to-end tests usually run in a browser against a live system (in the case of web, using a test runner that automates the browser). Automated E2E tests can take a long time to run because of all of the different pieces involved and the scope of the tests. You should try to optimize your testing pipeline to run tests in parallel to finish faster.\n\nFunctional tests alone will not give you enough test coverage to avoid regressions. Unit tests aim to provide code coverage depth, while functional tests provide coverage over the breadth of user test scenarios.\n\n## How to Write\n\nEnd-to-end tests rely on the ability to find elements on the screen and interact with them in an automated way. This means that you need a reliable mechanism for selecting elements. Depending on your testing framework, there are different ways to select elements, including:\n\n-   **CSS Selectors**: find elements by using CSS classes or rules (e.g., `.your-class-name`)\n-   **Element Selectors**: find elements inside the elements (e.g., `#\\@\\@blui-drawerlayout-content > div > header > div > button`)\n-   **xPath Selectors**: find selector within xPath (e.g., `//*[@id=\"@@blui-drawerlayout-content\"]/div/header/div/button`)\n-   **ID Selectors**: find attribute id within elements (e.g., `#login-button`)\n\n> You can read more about different selector strategies on [Selenium Dev](https://www.selenium.dev/documentation/webdriver/elements/locators/) and {/* <!-- markdown-link-check-disable --> */}[software testing help](https://www.softwaretestinghelp.com/using-selenium-xpath-and-other-locators-selenium-tutorial-5/){/* <!-- markdown-link-check-enable --> */}.\n\nEach of these methods has their own advantages and disadvantages. A common pain point in E2E test automation is that modern Javascript platforms are constantly changing, particularly in the open source community. Many of these frameworks automatically (and dynamically) generate IDs and classes for components resulting in a constantly moving target for automation tooling. Identifying elements by these values (i.e., using IDs, CSS, or xPath locators _without_ property attributes) makes your tests brittle because they are subject to change any time a new version comes out (or even any time the page is reloaded).\n\nOne way to combat this in your own applications is to use dedicated attributes for testing (e.g., `test-id` or `dev-id`). By adding this test-specific attribute to the element, identifying the correct underlying component should be safer. Because this attribute is test-specific and the application logic does not use it, it will be less likely to change throughout the product lifecycle. Combining this approach with other selectors is a common and reliable approach for element identification.\n\n```html\n{/* Component code */}\n<button id=\"login-button\" class=\"default-button\">Login</button>\n\n{/* Selector to use in a test */} WebElement click = driver.findElement(By.id(\"login-button\"));\n```\n\n## Testing Frameworks\n\nThere are many tools available for configuring automated E2E tests. Some of the more popular tools include:\n\n-   [Selenium](https://www.selenium.dev/documentation/en/)\n-   [Cypress](https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell)\n-   [WebDriverIO](https://webdriver.io/docs/gettingstarted.html)\n\n### Selenium\n\nSelenium is a popular automation testing suite which can be used to automate the desktop and mobile web browser interactions. You can write test code in any of the languages supported by Selenium.\n\nSelenium test suite has several test frameworks available and each one can be customized to your project needs.\n\nFor more information, check out the browserstack [selenium guide](https://www.browserstack.com/guide/selenium-framework) or the official [selenium documentation](https://github.com/SeleniumHQ/selenium).\n\nThere are also a number of [Selenium tutorials](https://www.guru99.com/selenium-tutorial.html) available online to help you get started.\n\n### Cypress\n\nCypress is a popular open source testing framework that boasts support for any modern JavaScript framework. It works well for E2E tests in both Angular and React applications and is easier to use than some of the more traditional tools, such as Selenium.\n\nFor a more detailed write-up on Cypress, check out the official [Cypress Documentation](https://docs.cypress.io/guides/getting-started/installing-cypress.html#System-requirements).\n\n### WebDriverIO\n\nWebdriverIO is a popular Javascript based test automation framework built on top of node.js. It is an open-source project developed for the automation testing community. WebdriverIO is extendible, compatible and feature-rich.\n\nFor more information, check out the official [Webdriver.io documentation](https://webdriver.io/) and their [getting started guide](https://webdriver.io/docs/gettingstarted.html).\n\n<Divider />\n"},"/development/components":{"title":"Components","text":"import React from 'react';\nimport { ComponentCatalogGrids } from '../../app/components';\n\n{/* KEYWORDS: components typography icon storybook devdoc catalogue catalog */}\n\n# Brightlayer UI Components\n\nBrightlayer UI offers custom component libraries to simplify building your application by implementing common use cases in Brightlayer UI and eliminating the need for multiple teams to build their own components. These components are supplementary to basic components offered by [Angular Material](https://material.angular.io/components/categories), [MUI](https://mui.com/material-ui/getting-started/supported-components/) and [React Native Paper](https://callstack.github.io/react-native-paper/).\n\nAll Brightlayer UI components are available as NPM packages:\n\n-   [@brightlayer-ui/angular-components](https://www.npmjs.com/package/@brightlayer-ui/angular-components)\n-   [@brightlayer-ui/react-components](https://www.npmjs.com/package/@brightlayer-ui/react-components)\n-   [@brightlayer-ui/react-native-components](https://www.npmjs.com/package/@brightlayer-ui/react-native-components)\n\n<ComponentCatalogGrids />\n"},"/design/intro":{"title":"Introduction","text":"import React from 'react';\nimport { Divider, LinkGrid, InDocButton } from '../../app/components';\nimport { patternLinks } from '../../__configuration__/design';\n\n{/* KEYWORDS: design tutorial environment begin introduction */}\n\n# Designing with Brightlayer UI\n\nUsing the Brightlayer UI design system as a designer can greatly improve your efficiency and the quality of your products. Brightlayer UI has many patterns and guidelines (color usage, typography, iconography, etc.) to address the most common elements and interactions that you might encounter when designing a product. By following these recommendations and using pre-defined resources from Brightlayer UI, your time is free to focus on the elements that make your project unique. In general, we recommend trying to use Brightlayer UI for 80% of your product's needs.\n\n## We use Figma\n\nWe host and maintain all [our design assets](/resources/designer) through Figma. Figma is a powerful prototyping tool that facilitates collaboration and sharing of design assets between teams. It can be used on the web, and they also provide a desktop app for Mac and Windows. To use Figma, you will need to [sign up](https://www.figma.com/) for an account.\n\nIf this is the first time you've ever used Figma, consider going through {/* <!-- markdown-link-check-disable --> */}[one of its official tutorials](https://help.figma.com/hc/en-us/sections/4405269443991-Figma-for-Beginners-tutorial){/* <!-- markdown-link-check-enable --> */}. Or if you prefer video tutorials to follow through, websites such as [Pluralsight](https://www.pluralsight.com/courses/figma-getting-started) and even [YouTube](https://www.youtube.com/watch?v=g6rQFP9zCAM) have tutorials for beginners. If you come from another professional UI design tool like Sketch, Figma also [provides details on how to migrate](https://www.figma.com/best-practices/what-to-expect-when-moving-from-sketch-to-figma/).\n\n<InDocButton\n    title={'View Our Figma Resource Intro'}\n    href={`https://www.figma.com/community/file/1108703646592220015`}\n    caption={`This will take you to a Figma community page. You don't need a Figma account to preview the file, but you need one to duplicate the file.`}\n/>\n\n## Guidelines\n\nBrightlayer UI has design guidelines that serve as the foundation for the design system. These are intentional design choices we made to shape the Brightlayer UI brand — what Brightlayer UI applications should look like and how users should interact with them.\n\n<LinkGrid links={patternLinks} style={{ marginTop: 16 }} />\n\n<Divider />\n\n# General Guidance\n\nThe best designs generally start with mobile first, and that's what we recommend as well when working with the Brightlayer UI design system. It's much easier to scale designs up than to scale them down. We also strongly encourage you to perform extensive user research to truly understand your users and their needs, skills, preferences, and tendencies.\n\n## Web Applications\n\nKeep the interface simple - avoid unnecessary elements and ensure the language used for labels and messaging is clear.\n\n{/* image */}\n\nStrive for consistency by using pre-defined Brightlayer UI UI elements where possible. By using these elements, your users will feel more familiar and will be able to get things done quickly. You can also help ensure consistency by defining patterns in language, layout, and design that are used throughout the application.\n\n{/* image */}\n\nBe purposeful when laying out page content. Consider space and the relationship between items on the page. Structure pages based on importance.\n\n{/* image */}\n\nUse the typography guidelines to create hierarchy and clarity. An effective type hierarchy increases scalability, legibility, and readability.\n\n{/* image */}\n\nEnsure that the application provides effective feedback to users. Make sure that you communicate location, actions, changes in state, and errors to users. Brightlayer UI has various UI elements to assist with communicating this information.\n\n{/* image */}\n\nConsider using defaults. If you have a strong understanding of the users of your application, careful planning around default states, actions, and paths can reduce the burden on your users.\n\n{/* image */}\n\n## Mobile Applications\n\nGenerally, interfaces less than seven inches in width should be treated as a mobile (phone) device. Font styles and layouts should be consistent across devices as much as possible - your product should feel like the same application regardless of the device used to access it. When working with a dedicated mobile app, familiarize yourself with device / platform capabilities and take advantage of these where possible.\n\n{/* image */}\n\nA fundamental principle for mobile design is to include only the information that is necessary. Don't overload the user with excessive information. Mobile devices are a convenient way to quickly consume information on the go and the information presented should reflect this.\n\n{/* image */}\n\nInterfaces greater than seven inches in width should be treated as a tablet device. As with phone devices, font styles and layouts should be consistent across devices in this class. However, you may find it appropriate to have some differences between phone and tablet devices because of the difference in screen real estate.\n\n{/* image */}\n\nTablet designs should look and feel like a desktop application / website, but they should function like a phone app.\n\n{/* image */}\n\nAs technology continues to evolve, it is important to consider scaling for the future. Products such as non-mobile touch screens, interactive displays, automotive displays, and touch screen laptops should be considered during your design phase.\n\n{/* image */}\n\n<Divider style={{}} />\n\n# Contributing\n\nWe encourage everyone to provide feedback, new design concepts, patterns, suggestions, or other ideas to help us create the most useful design system for our community. If you would like to contribute back, please [contact us](/community/contactus)!\n\nIn order to maintain the quality standards for Brightlayer UI resources, any submissions will be subject to review by the Brightlayer UI maintainers. If your design is made a part of Brightlayer UI, we'll add items onto our backlog to bring them to life in code for developers to use.\n"},"/design/anatomy":{"title":"Design System Anatomy","text":"import React from 'react';\nimport { Divider, ImageGrid, RegularWidth } from '../../app/components';\nimport CategoriesImg from '../../app/assets/resource-anatomy/resource-categories.png';\nimport PatternStatesImg from '../../app/assets/resource-anatomy/pattern-states.png';\n\n{/* KEYWORDS: design anatomy components pages patterns workflows atomic */}\n\n# Design System Anatomy\n\nThe building blocks of the Brightlayer UI design system are broken down into four levels of increasing complexity: elements, components, pages, and workflows. When communicating with other members of the Brightlayer UI community, you should strive to use this terminology to promote effective collaboration and understanding. This is applicable to designers, developers, product managers, etc.\n\n<ImageGrid\n    images={[CategoriesImg]}\n    regularWidth\n    caption={'The four levels of the Brightlayer UI design system hierarchy.'}\n/>\n\n## Foundations\n\nThe foundations include the most basic visual elements on the page, such as [color](/style/color), [icons](/style/icon-guidelines), [typography](/style/typography), etc. These typically have no behavior or interaction on their own, but instead are used to communicate information to a user, establish a brand, or lay the foundations for the Brightlayer UI components, pages, and workflows.\n\n## Components\n\nComponents are the basic functional units of the UI. They are usually interactive through clicking, expanding, etc. Components can be as simple (such as buttons, tabs, sliders) or complex (such as [navigation drawers](/patterns/navigation)). Simpler components are often combined to form complex ones.\n\nMost of the simple components in Brightlayer UI are defined and built by Material Design and the component libraries that implement it. Brightlayer UI focuses on defining and building advanced components that are shared across Brightlayer UI applications.\n\n## Pages\n\nPages are the largest single unit in the Brightlayer UI design system. These are typically full-screen designs that specify how certain pages can look in an application. Foundation of these pages should stay the same while there may be some room for customizations. Examples of pages include \"login (empty fields)\" and \"create password (invalid)\".\n\n## Workflows\n\nWorkflows are a sequence of pages combined with rules surrounding how a user goes from one page to another. These usually represent a common path that a user is expected to take to complete various tasks. Workflows that are defined in Brightlayer UI are intended to be nearly identical between applications. Examples of very common workflows include the [login](/patterns/user-auth) experience and user registration / sign up.\n\n<Divider />\n\n# Design Patterns\n\n<RegularWidth>\n    <ImageGrid images={[PatternStatesImg]} regularWidth />\n</RegularWidth>\n\n[Design patterns](/patterns) are very common in Brightlayer UI. A design pattern is a common interaction or behavior that can exist at any level in the design system hierarchy described above. For example, we may have a design pattern for showing actions available on a list item or how to interact with individual settings on a settings page.\n\nBecause a design pattern centers around interactions, they typically include different states. A button can be normal, hovered, or pressed. Similarly, a login workflow can involve login with 2FA, Captcha, or simply a username and password.\n\nFor each state, Brightlayer UI tries to provide:\n\n-   Guidelines: How it's used and in what context\n-   Design Specifications: How it looks\n-   Interactions: How it goes from one state to another\n-   Code: How it can be implemented\n\n<Divider />\n\n# Brightlayer UI and the Atomic Design System\n\nIf you are familiar with other design systems, such as the [Atomic Design System](https://bradfrost.com/blog/post/atomic-web-design/), you may recognize some concepts used here. Brightlayer UI's \"components\" parallel Atomic Design's atoms, molecules, and organisms. The idea of \"pages\" is the same in both systems, but Brightlayer UI also goes one level further in each direction (i.e., Foundations and Workflows) to define a project's user experience more comprehensively.\n"},"/design/accessibility":{"title":"Accessibility","text":"import React from 'react';\nimport { MaterialDesignDescription, Divider, ImageGrid } from '../../app/components';\nimport { Link as LinkIcon } from '@mui/icons-material';\nimport AccessibilityDesignImg from '../../app/assets/design/design-color.png';\nimport PerceivableDesignImg from '../../app/assets/design/design-perceivable.png';\nimport UnderstandableDesignImg from '../../app/assets/design/design-understandable.png';\n\n{/* KEYWORDS: accessibility design styles compliance w3c */}\n\n# Accessibility\n\nAccessibility for the web refers to designing your websites and applications so that individuals with disabilities are able to use them effectively. Disabilities can come in many forms including visual, physical, auditory, etc. It is important to design your applications to be accessible, both to reach as wide an audience as possible and for potential legal reasons. Making your application accessible improves the user experience for individuals without disabilities as well.\n\n> For international products it is important to research what level of compliance is required by law — accessibility requirements vary from one country to another.\n\nThe best practice guidelines used internationally for making websites accessible are the [Web Content Accessibility Guidelines](https://www.w3.org/TR/WCAG20/) (WCAG) 2.0, released by the World Wide Web Consortium (W3C) in 2008.\n\n<Divider />\n\n# Four Principles of Accessibility\n\nThere are four principles that lay the foundation necessary for anyone to access and use web content — Perceivable, Operable, Understandable, and Robust.\n\n## Perceivable\n\nInformation and user interface components must be presented to users in ways that they can perceive. For example, a button should look like a button and not be hidden behind an image or other hard-to-distinguish elements.\n\n<ImageGrid\n    images={[PerceivableDesignImg]}\n    regularWidth\n    caption={[\n        '1: The proper way to display a color picker on mobile.',\n        '2: An incorrect way to display a color picker on mobile. The color swatches do not look like buttons and clickable areas are too small.',\n    ]}\n/>\n\n## Operable\n\nOperable means that users must be able to perform the actions required to interact with interface elements. This means that all functionality should be available via the keyboard (including navigation), temporary content should be displayed long enough to be read by individuals with visual impairments, etc.\n\n## Understandable\n\nUsers must be able to consume information and interact with the application easily. This includes using appropriate language (avoiding abbreviations, writing at an appropriate reading level, etc.), making sure that interface elements behave in consistent and predictable ways, providing helpful error messages and instructions, etc.\n\nFor example, accompanying a button with a text label makes it more understandable if the meaning of the icon on its own is unclear.\n\n<ImageGrid\n    images={[UnderstandableDesignImg]}\n    regularWidth\n    caption={[\n        '1: The correct way to display an action for a card. The visible \"Read More\" button communicates to the user that there is additional content available to view.',\n        '2: The incorrect way to display an action for a card. It is not immediately clear that the card is clickable or that there is any way to see more content',\n    ]}\n/>\n\n## Robust\n\nWeb content must be robust enough that it can be interpreted reliably by a wide variety of users, including those who rely on assistive technologies (e.g., screen readers, text-to-speech software, alternative pointing devices, etc.). As assistive technologies advance, your applications will need to account for these advances.\n\n<Divider />\n\n# Color\n\n<ImageGrid\n    images={[AccessibilityDesignImg]}\n    regularWidth\n    caption={[\n        '1: An acceptable level of color contrast. On a white background, a ratio of 8.57:1 has been achieved, which is higher than required for AA and AAA compliance.',\n        '2: Acceptable use of contrasting colors within an application. Remember that icons should also be checked for at least AA compliance.',\n    ]}\n/>\n\nBrightlayer UI colors and components have been tested to meet minimum accessibility requirements. By using these default styles, you should be able to reduce the effort required for your product to pass accessibility tests.\n\nIf your project requires the use of additional styles or colors, you should adhere to the following guidelines:\n\n-   Use Brightlayer UI colors in the 500+ range for white backgrounds.\n-   Avoid using yellow, red, and orange for text (except for single-line error messages on forms)\n-   Do not rely on colors for instructions (e.g., do not say \"Click the red button to close\")\n\nMost Brightlayer UI text elements use the Black 500 color, with some headlines using Blue 500. Button labels should use White 50 for dark background and Black 500 on light backgrounds. You can check the contrast ratio to determine which option provides greater contrast.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'W3C Guidelines'}\n        url={'https://www.w3.org/WAI/#'}\n        description={`Web Content Accessibility Guidelines (WCAG) 2.0.`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n    <MaterialDesignDescription\n        title={'Section 508 guidelines'}\n        url={'https://www.section508.gov#'}\n        description={`Rehabilitation Act of 1973`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n    <MaterialDesignDescription\n        title={'European commission'}\n        url={`https://ec.europa.eu/digital-single-market/en/web-accessibility`}\n        description={`Web accessibility allows everyone, including people with disabilities, to perceive, understand, navigate and interact with the Internet.`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n</React.Fragment>\n\n## Checking Contrast\n\nLow contrast makes it difficult for all users to view your product, especially for individuals with visual impairments. You can test your contrast ratios using free [online tools](https://webaim.org/resources/contrastchecker/) and [Figma plugins](https://www.figma.com/community/plugin/732603254453395948/Stark).\n\n<Divider />\n\n# Text\n\nIn addition to making sure that the colors used for text are accessible, you should also ensure that text can be made larger without affecting the content or function of the page. Users with visual impairments may need to increase the font size of applications in order to read more clearly.\n\nMost browsers offer a feature for you to change the default font size (larger or smaller). You should test your application across multiple sizes to make sure that everything still looks right and functions correctly.\n\nMost Brightlayer UI components are designed to accommodate bigger font sizes when required.\n\n<Divider />\n\n# Images\n\nAny images in your application should be accompanied by a caption or other descriptive text, unless they are purely for decoration. Decorative images should show a brief description on hover. Images should always include an \"alt\" property so that they are accessible to users utilizing a screen-reader or other assistive technologies.\n\n-   Images should include descriptive text/alt text in the markup/code.\n-   Complex images should have more detailed descriptions near the image\n-   Videos must provide visual access to the audio information through in-sync captioning\n\n<Divider />\n\n# Testing Tools For Web\n\nThe tools used in the Trusted Tester Test Process (and ICT Testing Baseline) have been chosen based on several factors including ease of use, ease of teaching, and accuracy of results. They are also free to install and use.\n\n-   [Accessible Name & Description Inspector](https://www.ssa.gov/accessibility/andi/help/install.html) (ANDI)\n-   Color Contrast Analyzer for [Mac](https://github.com/ThePacielloGroup/CCA-OSX/releases/tag/2.4) and [Windows](https://github.com/ThePacielloGroup/CCA-Win/releases/tag/2.5.0) (CCA)\n"},"/design/websites":{"title":"Websites","text":"import React from 'react';\nimport { Divider, ImageGrid } from '../../app/components';\nimport ResponsiveDesignImg from '../../app/assets/design/responsive-design.png';\nimport WebsiteDesign from '../../app/assets/design/website-design.jpg';\nimport WebApp from '../../app/assets/design/webapp.jpg';\nimport Website from '../../app/assets/design/website.jpg';\nimport Grid from '../../app/assets/design/grids.png';\n\n{/* KEYWORDS: web website application app design marketing */}\n\n# Designing for Websites\n\nBrightlayer UI is a design system for digital _applications_. However, it can also be adapted for use in traditional web sites as well.\n\n<ImageGrid regularWidth images={[WebsiteDesign]} caption={[`Photo by William Iven on Unsplash`]} />\n\n## Websites vs. Applications\n\nThe line between websites and web applications is often blurry. In general, websites primarily provide information in a read-only format for the purposes of education, promotion, marketing, etc.\n\nA web application is typically more interactive and provides users the ability to affect the data in the application (e.g., adding items, deleting items, etc.). These applications are typically built to serve a particular use case or function that users need to perform frequently.\n\nWebsites:\n\n-   Static content\n-   Usually publicly accessible\n-   Read-only visual & text content\n-   Less interactive / functional compared to web applications\n\nApplications:\n\n-   Dynamic content\n-   Often incorporates user accounts / authentication\n-   Users can manipulate data\n-   More interactive / functional compared to a website\n\n<ImageGrid\n    images={[Website, WebApp]}\n    caption={[\n        `Websites typically present read-only information to users, whereas web applications are more interactive and allow users to change the underlying data.`,\n        `Photos by Domenico Loia and Carlos Muza on Unsplash`,\n    ]}\n/>\n<Divider />\n\n# Principles of Website Design\n\nThere are several key principles for effective website design. Many of these principles can also be considered when designing a web application, with some notable differences called out below.\n\n## Beauty & Simplicity\n\nHow your website looks is important, but it's not the reason users are coming to your site — typically they are looking for some particular piece of information. However, users _will_ notice a bad design, so making sure your website is visually appealing is still crucial.\n\nKeeping your designs simple is a way to strike balance. You should avoid unnecessary design elements (i.e., don't design for the sake of design) — this will only serve to overwhelm users and make it more difficult for them to find what they are looking for. A clean and simple design helps the audience focus on the value of the brand and on your content. Often, users will associate a website design with the quality of a particular company or product.\n\n> Using whitespace liberally can help maintain a simplistic design and also improve readability.\n\n## Effective Navigation\n\nUsers are typically coming to your website to find information, so you should make your website as easy to navigate as possible to maximize their chance of finding what they need. User should be able to land on your site and immediately identify where they need to go.\n\n-   Primary navigation should be simple and located at the top of every page\n-   Include additional navigation or a site map in the footer of your website\n-   Consider adding breadcrumbs so users can quickly see where they are.\n    -   If you use breadcrumbs, they should be used on every page.\n-   Include a search functionality so users can quickly find what they are looking for\n-   Limit the number of navigation options (e.g., tabs, breadcrumbs, menus, etc.) per page\n-   Limit the nesting of information where possible.\n    -   Try to keep your website to no more than three levels deep (use a pyramid structure to organize your content).\n\n## Layout & Hierarchy\n\nWhere and how content is presented is a critical aspect of website design. You should arrange the elements on each page so that the user will naturally gravitate to the most important elements first. Your goal should be to facilitate users' actions in a way that feels intuitive, natural, and enjoyable. You can draw your users to certain elements on the page by utilizing a combination of position, size, and color.\n\nYour website should be designed on a [grid system](https://www.smashingmagazine.com/2017/12/building-better-ui-designs-layout-grids/) to help tie elements together and promote responsiveness for different sized screens.\n\n<ImageGrid images={[Grid]} regularWidth caption={`Photo by Thomas Bredin-Grey`} />\n\n## Colors\n\nColor can be very powerful when it is used effectively. You should keep colors to a minimum to maximize the effect in the areas where they are used. We recommend using no more than five different colors in your website designs (ideally shades of blue, black, gray, and white from the Brightlayer UI [palette](/style/color)). For product catalogs or commerce sites, you should absolutely use the product's branding color(s) on your site.\n\nYou should focus your use of color on image backgrounds, highlight colors, etc.\n\n## Typography\n\nIn general, websites following the Brightlayer UI design language should use the Open Sans font. If you require an alternative, you should ensure that any font you use is highly legible at all sizes.\n\n-   Avoid using script fonts\n-   Minimize the use of colored text and make sure it contrasts with the background color.\n-   Use no more than three different typefaces.\n-   Use no more than three different font sizes.\n-   Keep body copy and label font sizes at 12px or larger\n    -   Do not use any text smaller than 8px\n\nYou can read more about typography in the [Typography](/style/typography) guide.\n\n## Graphics\n\nGraphics are most powerful when used sparingly. Only use graphics if they help the user complete a specific task or if they showcase a specific product / situation. You can read more about graphics in our [Illustrations](/style/illustrations) guide.\n\n## Consistency\n\nThe overall look and feel of your site should be consistent across pages. Backgrounds, colors, typefaces and the tone of writing are all areas where consistency has a positive impact on usability.\n\nConsistency does not mean every page should look identical. Try to define different layouts for specific types of pages (e.g., landing page, information page, product page, etc.). Use these layouts consistently throughout your website.\n\nIn addition to visual consistency, it is also important to maintain a consistent tone throughout the website. Your content should be written using the same voice throughout the website. Content should be descriptive and straight to the point — keep technical jargon to a minimum.\n\n## Responsiveness\n\nYour website should be functional across a wide range of different devices, including desktop computers, mobile phones, and tablets. Nearly 50% of all web traffic comes from mobile and tablet devices, so you should strive to follow a [mobile-first](https://medium.com/@Vincentxia77/what-is-mobile-first-design-why-its-important-how-to-make-it-7d3cf2e29d00) design strategy. Brightlayer UI is working to develop website grid templates for traditional website design in Figma. You can refer to [Material designs Responsive layout](https://m2.material.io/design/layout/understanding-layout.html) grid for more detailed information.\n\n<ImageGrid regularWidth images={[ResponsiveDesignImg]} caption={[`Photo by Vincent Xia`]} />\n\n## Accessibility\n\nThe audience for a website can be even more diverse than for a web application. Your website should be accessible to all potential users. As with any Eaton digital product it is important to refer to the [Accessibility](/design/accessibility) guide for more detailed information. The main principles still apply to website design.\n\n## Conventions\n\nThere are a number of conventions that users have come to expect from websites. You should strive to follow these conventions when possible:\n\n-   Placing the main navigation at the top left or on the side of the site\n-   Placing a product logo at the top left of the site\n    -   The logo should be clickable and take the user back to the home page\n-   Links and buttons should change color / appearance when hovered over\n-   Ensuring image galleries / slideshows have buttons for users to manually rotate slides\n-   Use shopping cart icons on a commerce site.\n    -   Include a badge that indicates the number of items in the cart.\n\n{/* # Key Differences vs. Web Application */}\n"},"/design/project-identity":{"title":"Project Identity","text":"import React from 'react';\nimport { Divider, ImageGrid, MaterialDesignDescription } from '../../app/components';\nimport PxblueSmallAltIcon from '@brightlayer-ui/icons-mui/PxblueSmallAlt';\nimport ConsumerIndustrial from '../../app/assets/design/project-identity/consumer-industrial.png';\nimport StyleChoice from '../../app/assets/design/project-identity/style-choice.png';\nimport IllustrationConsumer from '../../app/assets/design/project-identity/illustration-consumer.png';\nimport IllustrationIndustrial from '../../app/assets/design/project-identity/illustration-industrial.png';\nimport ImageAppBar from '../../app/assets/design/project-identity/image-app-bar.png';\nimport ImageDrawerRegular from '../../app/assets/design/project-identity/image-drawer-regular.png';\nimport ImageDrawerProfile from '../../app/assets/design/project-identity/image-drawer-profile.png';\nimport ImageScorecardHeader from '../../app/assets/design/project-identity/image-scorecard-header.png';\nimport ImageLogin from '../../app/assets/design/project-identity/image-login.png';\nimport ImageSuccess from '../../app/assets/design/project-identity/image-success.png';\nimport VariationButton from '../../app/assets/design/project-identity/variation-button.png';\nimport VariationTextField from '../../app/assets/design/project-identity/variation-text-field.png';\nimport VerbiageNeutral from '../../app/assets/design/project-identity/verbiage-neutral.png';\nimport VerbiageExcitement from '../../app/assets/design/project-identity/verbiage-excitement.png';\nimport ListColorCorrect from '../../app/assets/design/project-identity/list-color-correct.png';\nimport ListColorIncorrect from '../../app/assets/design/project-identity/list-color-incorrect.png';\n\n{/* KEYWORDS: design tutorial branding brand identity flexible flex */}\n\n# Project Identity and Design Flexibility\n\nBrightlayer UI provides a foundation for designing and developing applications in a way that makes them feel like they are a part of the same brand. However, the purpose of Brightlayer UI is not to make every application look the same.\n\nAs Brightlayer UI serves as a design system for a wide range of applications, some projects might demand unique design or branding elements to better suit their audience. There is a balance that you must strike among maintaining consistency between applications and establishing a unique brand for each product. Brightlayer UI provides some of the basic elements and patterns to help you build consistency, leaving you more time to focus on what makes your product unique.\n\n<MaterialDesignDescription\n    title={'Design Patterns'}\n    url={'/patterns'}\n    description={`Follow Brightlayer UI's design pattern guidelines.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n    minCardHeight={'unset'}\n/>\n\n## Brightlayer UI is Flexible\n\nBrightlayer UI is not intended to stifle your creativity, but rather to enable it. Brightlayer UI standardizes some of the basic elements of design in order to foster consistency between projects, which in turn allows you to spend more of your time and creativity on the parts of your project that make it unique.\n\nJust as we build on top of [Material Design](https://m2.material.io) principles, you too can build on top of Brightlayer UI principles to make your products better for your target audience. There are many opportunities in Brightlayer UI where you are free to make changes and tweaks.\n\n<ImageGrid\n    regularWidth\n    images={[ConsumerIndustrial]}\n    caption={[\n        `An example of two projects, both designed to control devices, but with a different targeted audience.`,\n        `1: A consumer-faced product. End users might be homeowners, small business owners, etc. The project is designed to delight the users.`,\n        `2: Industrial product. End users might be asset managers, facility assets managers, etc. The project is designed to  convey a secure and efficient picture for equipment management.`,\n    ]}\n/>\n\n## Build a Local Design System\n\nWe expect that you will establish your own local design system for your project that extends Brightlayer UI and adds your own style / identity. Depending on your use case, your design system may need to be more flashy, visual, relaxed, friendly, etc. Depending on where your application will be used, you may also need to change aspects of the design system related to accessibility (such as larger buttons for touch-screens) or legal requirements in your target markets.\n\n<ImageGrid\n    regularWidth\n    images={[StyleChoice]}\n    caption={[\n        `You may tune styles for your application away from the Brightlayer UI baseline style, as part of your local design system. In this example, the app bar (#1), the input form field (#2) and the buttons (#3) are changed.`,\n    ]}\n/>\n\nWhile establishing your local product identity, remember that Brightlayer UI is here to help establish consistency. You do not want to customize so much that this is lost. Below, we go into details about some common areas of customization as well as some areas that should be avoided.\n\n## Common Things to Change\n\nThere are some areas where we strongly encourage you to make changes and establish your own brand identity.\n\nKeep in mind that once you've established a local design system, you must make sure that you apply it consistently everywhere. You should use it in your packaging, your website, your email templates, the application, etc.\n\n### Illustrations\n\n<ImageGrid\n    images={[IllustrationConsumer, IllustrationIndustrial]}\n    caption={[\n        `A consumer-oriented product (#1) might use an illustration for empty states, while an industrial product (#2) might use an icon instead.`,\n    ]}\n/>\n\n[Illustrations](/style/illustrations) are common for [websites](/design/websites) and other consumer-facing products. Different image styles can create different moods (e.g., friendly vs. professional) and set the tone for how users will use your application.\n\n### Images\n\nSimilar to illustrations, images are another way to make your applications and websites more user-friendly.\n\n<ImageGrid\n    images={[ImageAppBar, ImageDrawerRegular, ImageDrawerProfile, ImageScorecardHeader, ImageLogin, ImageSuccess]}\n    caption={[\n        `There are many opportunities where you can apply background images or tiles to promote your brand identity.`,\n        `1: Background image on an extended app bar.`,\n        `2: Background tile on a drawer header.`,\n        `3: Background tile on a drawer .`,\n        `4: Background images on the header of scorecards.`,\n        `5: Background tiles on a login screen on the desktop.`,\n        `6: Geometric shape on a login card.`,\n        `7: Wavy, delightful background pattern for account creation success screen.`,\n    ]}\n/>\n\n### Icons\n\nBrightlayer UI primarily uses the baseline style of Material Design's icons (see [our icon guideline](/style/icon-guidelines)).\n\nHowever, we understand that the current iconography set may not cover every single use case or requirement for your product. In these situations, you are welcome to invent your own icons or leverage [Material Design's community icons](https://materialdesignicons.com/). Before going this route, make sure that you have thoroughly explored the available icons first and when creating new icons, ensure that they follow the [Material Design icon design guidelines](https://m2.material.io/design/iconography/system-icons.html#design-principles).\n\n### Component Variants\n\n<ImageGrid\n    images={[VariationButton, VariationTextField]}\n    caption={'Buttons and text fields have many style variations.'}\n/>\n\nMany components have style variations. These variations are all available for you to use, and it is up to you to decide which ones work best for your application. Some common variations include:\n\n-   Outlined vs. Contained / Filled\n-   Flat vs. Elevated\n-   Square vs. Rounded Corner vs. Round\n\n### Verbiage\n\n<ImageGrid\n    images={[VerbiageNeutral, VerbiageExcitement]}\n    caption={`Depends on the industry of your product, sometimes you want to sound more neutral and professional (#1), while other times you might want to cheer up your user through an (often cumbersome) configuration workflow (#2).`}\n/>\n\nThe actual text used in your application can change based on your intended tone. For websites, you may want to use more persuasive and appealing language to encourage the audience to buy or use your product. Inside an application, you may want to use a more serious tone, especially for applications that deal with potential safety concerns. Consumer-facing products in general carry a more cheerful tone.\n\n<MaterialDesignDescription\n    title={'Writing'}\n    url={`https://m2.material.io/design/communication/writing.html#principles`}\n    description={`Material Design's language principles for user interface.`}\n/>\n\n## Things You Should NEVER Change\n\nWhen it comes to Brightlayer UI, you have a great deal of design freedom, but there are a few things you should never change. Most of these are related to maintaining visual consistency and other conventions between applications.\n\n### Theme\n\nBrightlayer UI [offers two themes](/style/themes): Blue theme and Blue Dark theme. Ideally, an application should support both themes, but some applications might be more usable depending on the environment and context of the usage.\n\nYou are expected to stay close to those two themes. Both themes have been thoroughly researched to ensure they meet the standards for usability and accessibility.\n\n> One notable exception to this rule is if you are building products that will be white-labeled or sold under a different brand. In this case, you may find it beneficial to create your own custom themes that will better align with the brand.\n\n### Status Colors\n\n<ImageGrid images={[ListColorCorrect, ListColorIncorrect]} caption={'Do not break color conventions.'} />\n\nBrightlayer UI has strict guidelines around our [status color palette](/style/color). The status colors are used to indicate the status of certain items or devices. These should not be changed for any reason — users should be able to instantly know what these colors mean in any Brightlayer UI application. Further, the colors you are using to brand your application should not interfere with these colors.\n\nThe only situation where these may be changed is if there is an industry-specific convention that differs from the Brightlayer UI recommendations (e.g., green = circuit closed, red = circuit open for breakers). In these situations, you should follow the industry-specific convention.\n\n### Font Family\n\nBrightlayer UI [uses Open Sans and Noto Sans](/style/typography) for all applications. You are encouraged to adjust font [weight and size](/style/typography#customization) where necessary to establish a visual type hierarchy, but we strongly discourage the use of any fonts other than Open Sans and Noto Sans, particularly any [Serif fonts](https://en.wikipedia.org/wiki/Serif).\n\n### Design Patterns\n\nThroughout our [design patterns](/patterns), we provide examples of \"things not to do\" — these are typically identified by an image with a red underline. You should never use any of these expressly-forbidden patterns in your products. In all cases, we provide an example of the preferred approach.\n"},"/design/design-audit":{"title":"UI Design Audits","text":"import { ImageGrid, RuleTable, TOC } from '../../app/components';\nimport Banner from '../../app/assets/design/design-audit/banner.svg';\nimport ExplainArchitecture from '../../app/assets/design/design-audit/explain-architecture.png';\nimport ExplainJourney from '../../app/assets/design/design-audit/explain-journey.png';\nimport TopSeverity from '../../app/assets/design/design-audit/top-severity.png';\nimport HighSeverity from '../../app/assets/design/design-audit/high-severity.png';\nimport MediumSeverity from '../../app/assets/design/design-audit/medium-severity.png';\nimport LowSeverity from '../../app/assets/design/design-audit/low-severity.png';\nimport Feature from '../../app/assets/design/design-audit/feature.png';\nimport Slides from '../../app/assets/design/design-audit/ppt.svg';\nimport DoDont from '../../app/assets/design/design-audit/do-dont.svg';\nimport Educational1 from '../../app/assets/design/design-audit/educational-1.png';\nimport Educational2 from '../../app/assets/design/design-audit/educational-2.png';\n\n{/* <!-- KEYWORDS: audit critique review --> */}\n\n# UI Design Audits\n\nA design audit is a great way to ensure that your user interface design meets Brightlayer UI's design standard and lines up with other Brightlayer UI-based applications.\n\n<ImageGrid\n    images={[Banner]}\n    regularWidth\n    caption={'A typical UI audit will highlight problems and provide design recommendations.'}\n/>\n\nDesign audits examine not only cosmetic and branding elements, but also the overall usability of products — this is especially important when the team does not have a professional UI/UX designer on staff.\n\nWe recommend doing design audits incrementally, focusing on a few key workflows initially and gradually expanding to the rest of the application. We also encourage teams to work with their auditors to perform design audits periodically. We recommend frequent audits during the initial product release period and every time there's a major upgrade to the product's user interface design. Teams are expected to address most of the audit comments in between.\n\nDon't wait until a product is ready for release to request a design audit. The design audit itself may take several weeks, depending on the scope, and implementing the recommended changes could take months.\n\nThis page outlines the process for audit requesters (“teams”) and auditors and should serve as a guideline for how UI design audits work.\n\n<TOC\n    anchors={[\n        { title: 'Introduction', hash: 'ui-design-audits' },\n        { title: 'Prepare for an Audit' },\n        { title: 'Request for a Design Audit' },\n        { title: 'Issue Severity' },\n        { title: 'Understand Audit Results' },\n        { title: 'How to Conduct Design Audits (For Auditors)' },\n        { title: 'Design Audit Examples' },\n    ]}\n/>\n\n# Prepare for an Audit\n\n## Update Packages\n\nBrightlayer UI sometimes makes style updates to components and themes through our NPM packages. Cosmetic issues such as Material component styling can be easily addressed by updating software packages to the latest versions. Therefore, when possible, teams are encouraged to update their Brightlayer UI packages and other major packages to the latest version prior to requesting an audit.\n\nPlease refer to our [developer resources page](/resources/developer) to learn about our latest package versions.\n\nWe discourage custom component styling that overrides the Brightlayer UI theme — these can cause problems when updating to newer versions. If the product team identifies any styling that should be included as part of the Brightlayer UI component theme, please [contact us](/community/contactus) or log an issue.\n\n## Read Through Our Website\n\nPlease read through our [style guides](/style) and [design pattern guidelines](/patterns). Many examples cited by these guidelines came from design audits we did in the past and are representative of common mistakes we observed across multiple projects. Team members may be able to identify low-hanging fruit during this self-audit and address these problems ahead of the full audit.\n\n## Address Comments from Previous Audits\n\nIf the team has received audit comments in the past, team members should address these audit comments first before requesting a new one. In case audit comments cannot be addressed due to time / technical constraints, the team should inform their auditors about this.\n\n# Request for a Design Audit\n\nIdeally, a design audit is conducted periodically by someone outside the product team. Team members may [request](/community/contactus) a design audit from the Brightlayer UI team.\n\n## Give a Demo\n\nTeam members are expected to walk their auditors through the application to help them understand the big picture. This includes all major workflows of the application.\n\n## Grant Auditors Direct Access\n\nWhenever possible, teams are encouraged to create a safe environment for the auditor to test the project directly. This is to help the auditor explore user interactions and different workflow branches.\n\n## Communicate with User Journey\n\nUser experience design is centered around users. Instead of talking about the technical nature of the infrastructure, teams should explain their product in terms of user journeys. Who will use the application? What do they care about the most? How will the application solve this user’s problem?\n\n<ImageGrid\n    images={[ExplainArchitecture, ExplainJourney]}\n    captionsUnderImages={[\n        `DONT: Do not explain the product with ONLY its technical architecture.`,\n        `DO: Explain the user journey to the auditor.`,\n    ]}\n/>\n\n## Communicate the Limitations\n\nThe team should mention to its auditor any legacy issues (e.g., some things may need to stay a certain way to meet user expectations in a legacy product) or other limitations, such as limited ethernet connection speed, mobile app-exclusive features, etc.\n\n## Define the Scope\n\nOne reason we recommend doing design audits periodically is so that product teams do not work alone for too long before they receive any external feedback. This also helps keep the audit scope focused on a few workflows or screens at a time.\n\nIf the product is complex or has never been audited, consider arranging only a few key workflows or screens to be audited. A large scope will “dilute” auditors’ attention and lead to many repetitive comments. The product team should select the part of the product that is either most important to its users or a representative area that can help guide future redesign efforts for other pages.\n\n# Issue Severity\n\nDesign audits identify issues using multiple different severity levels. Severity ratings are determined by their impact on the users. Brightlayer UI recommends using the following severity ratings:\n\nA **top severity** issue is a design flaw that prevents a user from completing a certain task.\n\n<ImageGrid images={[TopSeverity]} regularWidth />\n\nA **high severity** issue greatly confuses or blocks the user, although eventually they might learn to tolerate it.\n\n<ImageGrid images={[HighSeverity]} regularWidth />\n\nA **medium severity** issue makes users hesitate, but they are usually still able to complete their task after some guesswork.\n\n<ImageGrid images={[MediumSeverity]} regularWidth />\n\nA **low severity** issue is cosmetic and does not interfere with functionality or usability.\n\n<ImageGrid images={[LowSeverity]} regularWidth />\n\nIn addition, auditors may suggest **features** as well. Features are good-to-have improvements and may be based on designs seen in other Brightlayer UI apps.\n\n<ImageGrid images={[Feature]} regularWidth />\n\nAudit notes may also be tagged with an indicator of whether an issue is about usability or branding. This further helps product teams think about usability systematically.\n\nAuditors are recommended to color code their design audit notes based on severity.\n\n# Understand Audit Results\n\n## Prioritize Issues\n\nTeams must prioritize high-severity issues as they are blocking the application’s functions. These issues must be addressed before the next major release. Meanwhile, mid-severity issues can wait until the next major release, but should still be groomed into the backlog. Low-severity issues are typically considered technical debt.\nHigh-frequency issues — issues that may not be severe but are exposed to users — should also be prioritized.\n\n## Do Not Skip User Testing\n\nA design audit is not meant to replace user testing. While auditors can flag potential issues based on their experience in the design industry, they are not the end user. Teams should conduct user testing to drive major changes while using the design audit as a supplemental tool.\n\n## Schedule the Next Audit\n\nTypically, one design audit is enough to cover most issues in the current version of the user interface. Product teams may consider reaching out to another designer after the existing issues have been pointed out.\n\nWhenever there are major changes to the user interface, product teams should conduct a new design audit to ensure they are still on track.\n\n# How to Conduct Design Audits (For Auditors)\n\n## Prepare Deliverables\n\nA full audit done by the Brightlayer UI team typically includes two parts: detailed notes that capture everything, and a presentation slide deck including only items worth discussing.\n\n<ImageGrid\n    images={[Banner, Slides]}\n    captionsUnderImages={[\n        `The detailed audit notes.`,\n        `The presentation helps foster in-depth discussions around a given topic.`,\n    ]}\n/>\n\nAuditors are expected to build up detailed audit notes as they go through each screen. Once auditors are finished, they may consider selecting a few educational or discussion-worthy topics and adding them to a separate PowerPoint slide.\n\n## Apply Brightlayer UI's Standard\n\n<ImageGrid\n    images={[DoDont]}\n    captionsUnderImages={[`You can find these color-coded design standards across Brightlayer UI's design guidelines.`]}\n/>\n\nThere are two parts to Brightlayer UI's design guidelines — [style guide](/style) and [design patterns](/patterns). Each of these describes a set of design standards, which are categorized as follows:\n\n<RuleTable />\n\nUser interfaces must be judged under these criteria during design audits.\n\nIn addition, auditors may also employ [Heuristic Evaluation](https://www.nngroup.com/articles/how-to-conduct-a-heuristic-evaluation/) to check UI designs comprehensively.\n\n## Educate the Team\n\nTo help teams develop a human-centered mindset, in addition to pointing out the issues, auditors must also seek to educate their product team to think like designers.\n\n<ImageGrid\n    images={[Educational1, Educational2]}\n    captionsUnderImages={[\n        `AVOID: Avoid giving the team an instruction without explaining the rationale behind it.`,\n        `DO: Teach the team how this design decision is made.`,\n    ]}\n/>\n\nFor larger products, instead of trying to cover everything in superficial detail, auditors may select 2-3 key interactions and examine them in depth. The auditors’ mission should not be to point out every single UI mistake, but to teach the team how to avoid similar mistakes in the future.\n\n## Prototype Key Features\n\nIf time permits, auditors may select a few key features and prototype their design recommendation. This has a few advantages.\n\n1. Auditors understand better why the product team designed a feature in a certain way.\n2. Auditors get an excellent opportunity for design practice.\n3. A new design placed next to its original design serves as a good side-by-side comparison.\n\n## Summarize Takeaways\n\nWe also encourage auditors to provide an overall summary of their audit findings. This provides teams with quick takeaways that help them estimate their effort in improving the UI design.\n\n## Presentation\n\nAuditors may fine-tune their presentation depending on the expected audience. For example, if the audience is more technical, consider explaining the styling in CSS notations; if they are more on the product design side, auditors may consider showing their raw design process and inviting them for a design critique.\n\nSome team members might feel intimidated by the design audit or feel that the auditor is always right (they aren't). Auditors should encourage teams to challenge the design audit result to foster a better discussion and learn more from the team who knows the product and its history more intimately.\n\nAuditors need to remember to pause from time to time in their presentations for the audiences to catch up — it's likely that many people in the audience are not used to thinking the way a UI designer thinks. Auditors should also ask one member of the audience to take notes.\n\n## Recommend Next Steps\n\nBefore the end of their presentations, auditors should recommend the next steps for teams to act upon. If the auditor has a technical background, they may list a few items as easy-to-fix quick-win items for the developer. If there are major feature suggestions, the auditor may picture how they will fit into the product’s big picture, and what the R&D timeline would look like.\n\n## Improve Brightlayer UI\n\nDuring the audit, if auditors noticed anything worth componentizing or an area where the existing Brightlayer UI standard is too strict, please get in touch with us for a discussion. Many design guidelines in Brightlayer UI today came from real project design audits we performed.\n\n# Design Audit Examples\n\nIf you are an Eaton employee or contractor, you may view the following audit examples (login required).\n\n{/* <!-- markdown-link-check-disable --> */}\n\n-   [PowerPoint presentation](https://eaton.sharepoint.com/:p:/s/PXBlueDesign&Dev/EVjisdTQEQdJpfyoKNr9ZREBQaKAXzwcLZhKvlyxYfjTow?e=OwlBMg)\n-   [Detailed audit notes](https://miro.com/app/board/o9J_lGvtI6E=/)\n\n{/* <!-- markdown-link-check-enable --> */}\n"},"/patterns":{"title":"Design Patterns"},"/patterns/account-menu":{"title":"Account Menu","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport PxblueSmallAltIcon from '@brightlayer-ui/icons-mui/PxblueSmallAlt';\nimport Banner from '../../app/assets/design-patterns/account-menu/account-menu-banner.png';\nimport AccountSettingsPage from '../../app/assets/design-patterns/account-menu/account-settings-page.png';\nimport DrawerDetails1 from '../../app/assets/design-patterns/account-menu/drawer-do-and-dont-1.png';\nimport DrawerDetails2 from '../../app/assets/design-patterns/account-menu/drawer-do-and-dont-2.png';\nimport UserMenuContents from '../../app/assets/design-patterns/account-menu/user-menu-contents.png';\nimport AvatarVariants from '../../app/assets/design-patterns/account-menu/avatar-variants.png';\nimport CrowdedDrawer from '../../app/assets/design-patterns/account-menu/crowded-drawer.png';\nimport CrowdedUserMenu from '../../app/assets/design-patterns/account-menu/crowded-user-menu.png';\n\nimport Specs1 from '../../app/assets/design-patterns/account-menu/spec-typography-mobile.png';\nimport Specs2 from '../../app/assets/design-patterns/account-menu/spec-typography-desktop.png';\nimport Specs3 from '../../app/assets/design-patterns/account-menu/spec-drawer.png';\nimport Specs4 from '../../app/assets/design-patterns/account-menu/spec-avatar.png';\n\n{/* KEYWORDS: design pattern user account details settings menu avatar profile */}\n\n# Account Menu\n\n<ImageGrid images={[Banner]} regularWidth />\n\nWhen applications implement a form of [User Authentication](/patterns/user-auth), they must include ways for users to view / update their personal or account information as well as take account-related actions, such as logging out of the application or changing a password. There are several ways to present this information to the user in a Brightlayer UI application.\n\n<React.Fragment>\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#account-menu' },\n            { title: 'Account Settings Page' },\n            { title: 'In a Navigation Drawer' },\n            { title: 'In a User Menu' },\n            { title: 'Contents' },\n            { title: 'Design Specifications' },\n            { title: 'Developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Account Settings Page\n\n<ImageGrid\n    images={[AccountSettingsPage]}\n    regularWidth\n    caption={`A typical account settings page on mobile and web displaying user information and various account-related options.`}\n/>\n\nAt a minimum, your application should implement a dedicated account settings page for viewing and editing a user's account details, preferences, settings, etc. This page should also include a way for users to take account-related actions. The style of this page should be consistent with other settings pages in your application, if applicable. If you have multiple settings pages in your application, the account settings should be easily accessible from the top level.\n\n<Divider />\n\n# In a Navigation Drawer\n\nIf your application is using [Drawer Navigation](/patterns/navigation#drawer-navigation), you can include quick-access user information and actions in the Drawer. Commonly, this involves placing an avatar in the drawer header along with basic information about the user (e.g., their name, username, email address, job title and / or organization affiliation). Additional account actions and a link to the account settings page can be placed at the bottom of the drawer body, just above the footer, if present (see the [contents](/patterns/account-menu#contents) section below).\n\n<ImageGrid\n    images={[DrawerDetails1, DrawerDetails2]}\n    captionsUnderImages={[\n        `DO: User avatar and basic information can be placed in the drawer header.`,\n        `DO: Place the top account-related actions at the bottom of the drawer.`,\n    ]}\n/>\n\nThis approach is most effective when there are relatively few account-related actions and is also preferred on mobile where there is limited space in the app bar.\n\nIf you are using a navigation rail, you may place account settings links in the rail, but you will not be able to show specific details about the user. Consider using the {/* <!-- markdown-link-check-disable --> */}[User Menu](#via-user-menu){/* <!-- markdown-link-check-enable --> */} in this situation or if you are using a primary navigation mechanism other than a drawer.\n\n<DemoCard\n    repository={'Account Details in Drawers'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Faccount-menu%2Fin-a-drawer%2Fmenu-in-a-drawer.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/account-menu/in-a-drawer/index.tsx&initialpath=/in-a-drawer`}\n/>\n<MaterialDesignDescription\n    title={'Drawer Navigation'}\n    url={'/patterns/navigation#drawer-navigation'}\n    description={`Follow Brightlayer UI's guideline for using a Drawer.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n<Divider />\n\n# In a User Menu\n\n<ImageGrid\n    images={[UserMenuContents]}\n    regularWidth\n    caption={[\n        `1. On desktop, user menu contents appear in a dropdown menu below the avatar.`,\n        `2. On mobile devices, the contents should be presented in a bottom sheet.`,\n    ]}\n/>\n\nAnother way to present user information and actions is with the user menu. The user menu appears as an Avatar in the [App Bar](/patterns/appbar) which opens a menu with the user-related content (see the [contents](#contents) section below).\n\nThis approach is most effective if you have more than three account-related actions, or if you want to present more detailed information about a user since it avoids cluttering the primary navigation drawer.\n\n<React.Fragment>\n    <DemoCard\n        repository={'User Menus in App Bars'}\n        angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Faccount-menu%2Fin-an-app-bar%2Fin-an-app-bar.component.html`}\n        react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/account-menu/in-an-app-bar/index.tsx&initialpath=/in-an-app-bar`}\n    />\n    <MaterialDesignDescription\n        title={'Bottom Sheet'}\n        url={'/patterns/overlay#bottom-sheet'}\n        description={`Follow Brightlayer UI's guideline for using a Bottom Sheet.`}\n        avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n    />\n    <Divider />\n</React.Fragment>\n\n# Contents\n\nWhether you are using the drawer or a dedicated user menu component, the content should be very similar.\n\n## Avatar\n\n<ImageGrid\n    images={[AvatarVariants]}\n    regularWidth\n    caption={[\n        `1. Generic avatar icon for use with shared or anonymous accounts`,\n        `2. Basic avatar showing user's initials.`,\n        `3. Avatar showing a user-selected profile picture.`,\n        `4. Avatar with a notification indicator.`,\n        `5. Avatar icon with full name / username.`,\n    ]}\n/>\n\nAn avatar is used to identify the currently logged-in user / account. It may appear in the drawer header or in the [App Bar](/patterns/appbar).\n\nAvatars can take several forms. Usually, they display a user-selected profile picture. If your application does not support user-selected images, you can default to displaying the user's initials or a [person icon](/style/icon-library?icon=Person&isMaterial=true). You can also elect to show the user's full name or username — this may be particularly useful when your application uses shared or generic accounts (e.g., 'Administrator').\n\nThe avatar should be accompanied by basic information about the user, such as their name, username, email, job title, etc., which can be placed in the navigation drawer header or in the user menu header.\n\n## Account Functions\n\nMost account functions can be located on the account settings page, but you should provide access to the most common / frequent actions in the drawer or user menu as well.\n\nYou should at least include:\n\n-   A link to the account settings page\n-   A Log Out button\n-   Links to terms of service / privacy policy / license information (if applicable)\n\nWhen using the user menu, you will likely have more room available if you wish to include other frequently accessed account functions, such as change password, contact support, etc.\n\n<React.Fragment>\n    <ImageGrid\n        images={[CrowdedDrawer, CrowdedUserMenu]}\n        caption={`AVOID: Avoid overcrowding the drawer and the user menu by including too many user actions.`}\n    />\n    <Divider />\n</React.Fragment>\n\n# Design Specifications\n\n## Mobile\n\n### Navigation Drawer\n\n<ImageGrid images={[Specs3]} regularWidth />\n\n### User Menu\n\n<ImageGrid images={[Specs1]} regularWidth />\n\n### Avatar\n\n<ImageGrid images={[Specs4]} regularWidth />\n\n## Desktop and Tablet\n\nIf certain dimensions are not specified, refer to the dimensions suggested in the mobile section above.\n\n### User Menu\n\n<ImageGrid images={[Specs2]} regularWidth />\n\nAlso refer to the design specifications for [Drawer](/patterns/navigation#design-specifications) and [Bottom Sheet](/patterns/overlay#bottom-sheet).\n\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular**:\n\n-   Angular Material\n    -   [Side Nav](https://material.angular.io/components/sidenav/overview)\n-   @brightlayer-ui/angular-components\n    -   [Drawer](https://brightlayer-ui-components.github.io/angular/components/drawer/examples)\n    -   [User Menu](https://brightlayer-ui-components.github.io/angular/components/user-menu/examples)\n\n**React**:\n\n-   MUI\n    -   [Drawer](https://mui.com/material-ui/react-drawer/#main-content)\n-   @brightlayer-ui/react-components\n    -   [Drawer](https://brightlayer-ui-components.github.io/react/components/drawer/examples)\n    -   [User Menu](https://brightlayer-ui-components.github.io/react/components/user-menu/examples)\n\n**React Native**:\n\n-   @brightlayer-ui/react-native-components\n    -   [Drawer](https://brightlayer-ui-components.github.io/react-native/?path=/info/components-documentation--drawer)\n    -   [User Menu](https://brightlayer-ui-components.github.io/react-native/?path=/info/components-documentation--user-menu)\n"},"/patterns/appbar":{"title":"App Bars","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport Banner from '../../app/assets/design-patterns/app-bar/appbar-banner.png';\nimport Search from '../../app/assets/design-patterns/app-bar/search-bar/search.gif';\nimport MiniSearch from '../../app/assets/design-patterns/app-bar/search-bar/mini-search.png';\nimport SiteSearch from '../../app/assets/design-patterns/app-bar/search-bar/site-search.png';\nimport PageSearch from '../../app/assets/design-patterns/app-bar/search-bar/page-search.png';\nimport ComponentSearch from '../../app/assets/design-patterns/app-bar/search-bar/component-search.png';\nimport CollapsibleAppBarDynamic from '../../app/assets/design-patterns/app-bar/collapsible-app-bar-dynamic.gif';\nimport CollapsibleAppBarSnap from '../../app/assets/design-patterns/app-bar/collapsible-app-bar-snap.gif';\nimport CollapsibleAppBar1 from '../../app/assets/design-patterns/app-bar/collapsible-app-bar-1.png';\nimport CollapsibleAppBar2 from '../../app/assets/design-patterns/app-bar/collapsible-app-bar-2.png';\nimport SafeAreaError from '../../app/assets/design-patterns/app-bar/safe-area-error.png';\nimport SafeAreaOK from '../../app/assets/design-patterns/app-bar/safe-area-ok.png';\nimport HideOnCollapse from '../../app/assets/design-patterns/app-bar/what-to-hide-on-collapse.png';\nimport AutoVariants from '../../app/assets/design-patterns/app-bar/search-bar/auto-complete-variants.png';\nimport BasicBars from '../../app/assets/design-patterns/app-bar/basic-app-bars.png';\nimport DropdownVariations1 from '../../app/assets/design-patterns/app-bar/dropdown-toolbar-variations-1.png';\nimport DropdownVariations2 from '../../app/assets/design-patterns/app-bar/dropdown-toolbar-variations-2.png';\nimport Specs1Image from '../../app/assets/design-patterns/app-bar/specs-1.png';\nimport Specs2Image from '../../app/assets/design-patterns/app-bar/specs-2.png';\nimport Specs3Image from '../../app/assets/design-patterns/app-bar/specs-3.png';\nimport Specs4Image from '../../app/assets/design-patterns/app-bar/specs-4.png';\nimport Specs5Image from '../../app/assets/design-patterns/app-bar/specs-5.png';\nimport Specs6Image from '../../app/assets/design-patterns/app-bar/specs-6.png';\n\n{/* KEYWORDS: design pattern appbar search collapse collapsible extend prominent toolbar banner header */}\n\n# App Bars\n\n<ImageGrid images={[Banner]} regularWidth />\n\nApp bars, sometimes called toolbars, are often one of the first elements you see in an application. They are primarily used to provide context for where a user is in the hierarchy of the application.\n\n<React.Fragment>\n    <MaterialDesignDescription title={'App Bars: Top'} url={`https://m2.material.io/components/app-bars-top/`} />\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#app-bars' },\n            { title: 'Basic App Bar', hash: '#basic-app-bar' },\n            { title: 'Collapsible App Bar', hash: '#collapsible-app-bar' },\n            { title: 'Search', hash: '#search' },\n            { title: 'Design Specifications', hash: '#design-specifications' },\n            { title: 'Developers', hash: '#developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Basic App Bar\n\n<ImageGrid regularWidth images={[BasicBars]} caption={'Basic app bars in order of increasing complexity.'} />\n\nThe basic app bar provides information about the current screen. Typically, this is a short title that indicates which screen the user is on (e.g., \"Settings\"). However, the app bar can also contain a navigation icon, subtitle, and/or various global action buttons for the screen. When placing actions in the app bar, limit yourself to no more than three. If you have more actions than this, consider grouping them into a menu.\n\n## Dropdown Toolbar\n\n<React.Fragment>\n    <ImageGrid\n        images={[DropdownVariations1, DropdownVariations2]}\n        caption={[\n            '1. On mobile, the dropdown toolbar opens the options panel in a bottom sheet.',\n            '2. On desktop, the dropdown opens as a menu below the toolbar.',\n        ]}\n    />\n</React.Fragment>\n\nA special case of the basic app bar is the dropdown toolbar. This version transforms the simple text subtitle of the app bar into a dropdown menu that can be used to configure the page. For example, you may have a dropdown that allows users to switch between different physical locations on an overview screen.\n\n<DemoCard\n    repository={'Dropdown Toolbar'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fapp-bar%2Fdropdown-toolbar%2Fdropdown-toolbar.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/app-bar/dropdown-toolbar/index.tsx&initialpath=/dropdown-toolbar`}\n/>\n\n## Safe Area\n\n<ImageGrid\n    images={[SafeAreaError, SafeAreaOK]}\n    caption={[`When designing for mobile screens, make sure to take non-rectangular screens into account.`]}\n    captionsUnderImages={[\n        `DONT: An incorrect design. The content bleeds into the unsafe area, and the native OS's status bar does not reflect the blue theme.`,\n        `DO: A correct design. All the contents are legible.`,\n    ]}\n/>\n\n<Divider />\n\n# Collapsible App Bar\n\nIn some situations, you may want to present more than just a title and subtitle in an app bar, such as a large graphic, buttons, or multiple lines of text. Collapsible app bars — sometimes referred to as expandable app bars, extended app bars, or prominent app bars — are ideal for this situation. The app bar starts out tall but will shrink as the user scrolls down the page until it becomes a basic app bar.\n\n<React.Fragment>\n    <ImageGrid\n        images={[CollapsibleAppBar1, CollapsibleAppBar2]}\n        captionsUnderImages={[\n            `DO: A collapsible app bar using the default blue color.`,\n            `DO: A collapsible app bar using a red background to indicate an alarmed status.`,\n        ]}\n    />\n    <DemoCard\n        repository={'Collapsible App Bar'}\n        angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fapp-bar%2Fcollapsible-app-bar%2Fcollapsible-app-bar.component.html`}\n        react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/app-bar/collapsible/index.tsx&initialpath=/collapsible`}\n    />\n</React.Fragment>\n\nCollapsible app bars put a greater emphasis on the app bar content on page load and provide an opportunity to show images pertinent to the page topic. This allows you the flexibility to present an eye-catching banner without permanently reducing the amount of usable space on the page. This pattern is most commonly used for mobile applications, but could also be used for web.\n\n<ImageGrid\n    images={[CollapsibleAppBarDynamic, CollapsibleAppBarSnap]}\n    caption={[\n        `Collapsible app bars can have two slightly different behaviors: 'dynamic', which resizes proportionally to the scroll position (first image), and  'snap', which collapses in one step once the user scrolls pass a certain threshold (second image). You should avoid using collapsible app bars on pages that do not have significant amounts of scrollable content to prevent situations where the app bar can only be partially collapsed or not collapsed at all.`,\n    ]}\n/>\n\nThe collapsible appbar should transition smoothly between the expanded and collapsed states — this means you will need to account for how the app bar will look throughout the transition. Because elements will disappear as the app bar shrinks, you'll need to use various transition techniques to do this smoothly, depending on your content.\n\n<ImageGrid\n    images={[HideOnCollapse]}\n    caption={[\n        `When a collapsible app bar (#1) collapses, you may choose to either hide the third line of text (#2) or the second line of text (#3), but the page title (first line) should never be hidden (#4).`,\n    ]}\n    regularWidth\n/>\n\n<Divider />\n\n# Search\n\n<React.Fragment>\n    <ImageGrid\n        images={[SiteSearch, PageSearch, ComponentSearch]}\n        captionsUnderImages={[\n            '1: Global (application-wide) search is always placed in the primary app bar.',\n            '2: Page-wide search can be placed below the primary app bar when searching content on a single page or screen.',\n            '3: Component-wide search allows the user to search for contents within individual components (e.g., cards, lists).',\n        ]}\n    />\n</React.Fragment>\n\nA very common pattern seen in many types of applications is the ability to search for data.\n\n<DemoCard\n    repository={'Global Search'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fapp-bar%2Fsearch-bar%2Fsearch-bar.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/app-bar/search-bar/index.tsx&initialpath=/search`}\n    reactNative\n/>\n\n<DemoCard\n    repository={'Page-Wide Search'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fapp-bar%2Fpage-wide-search%2Fpage-wide-search.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/app-bar/page-wide-search/PageWideSearch.tsx&initialpath=/page-wide-search`}\n    reactNative\n/>\n\n## Search Bar\n\nThe search bar is used primarily when your search is a global search of all application content or when search is the primary interaction on a particular screen. This mode of search is achieved by placing a search icon/button in the primary app bar. When this button is clicked, a white search bar slides in from the right to cover the default app bar. As the user enters text into the search field, the data is filtered in real-time. A back icon will close the Search Bar and clear the search results.\n\n<ImageGrid\n    images={[Search]}\n    caption={'When the search icon is clicked, a white search bar will slide in and cover the default tool bar. '}\n/>\n\n## Auto-complete\n\nFor more advanced searching, you may wish to include an auto-complete feature. You can implement autocomplete by including a contextual menu below the search bar with suggested search items. Alternatively, you can use type-ahead to automatically update the recommended search query in the search field as the user types (Google search does this).\n\n<React.Fragment>\n    <ImageGrid\n        regularWidth\n        images={[AutoVariants]}\n        caption={[\n            '1. Search suggestions are provided in a dropdown menu.',\n            '2. The most likely search is shown in the search field as the user types.',\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n{/* prettier-ignore */}\n{/*\n\nTODO: Add write up about contextual action bar here. It is already very well researched and we just need to document it\n\n# Contextual Action Bar\n\n<DemoCard\n    repository={'Contextual Action Bar'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fapp-bar%2Fcontextual%2Fcontextual.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/app-bar/contextual-action/index.tsx&initialpath=/contextual-action`}\n/>\n*/}\n\n# Design Specifications\n\n## Mobile\n\n<ImageGrid images={[Specs1Image, Specs2Image, Specs3Image, Specs5Image, Specs6Image]} regularWidth />\n\nThe App Bar subtitle typography style is subject to change based on its content or your design preference. You can read more in our [Custom Typography](/style/typography#customization) documentation.\n\n## Desktop and Tablet\n\nIf certain dimensions are not specified, refer to the dimensions suggested in the mobile section above.\n\n<React.Fragment>\n    <ImageGrid images={[Specs4Image]} regularWidth />\n    <MaterialDesignDescription\n        title={'App Bars: Top'}\n        description={`For additional instructions, refer to Material Design's design specs`}\n        url={`https://m2.material.io/components/app-bars-top#specs`}\n    />\n    <Divider />\n</React.Fragment>\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular**:\n\n-   Angular Material\n    -   [@angular/material/toolbar](https://material.angular.io/components/toolbar)\n-   @brightlayer-ui/angular-components\n    -   [App Bar](https://brightlayer-ui-components.github.io/angular/components/app-bar/examples)\n\n**React**:\n\n-   MUI\n    -   [AppBar](https://mui.com/material-ui/api/app-bar/)\n    -   [Toolbar](https://mui.com/material-ui/api/toolbar/)\n-   @brightlayer-ui/react-components\n    -   [App Bar](https://brightlayer-ui-components.github.io/react/components/app-bar/examples)\n\n**React Native**:\n\n-   @brightlayer-ui/react-native-components\n    -   [Collapsible Header Layout](https://brightlayer-ui-components.github.io/react-native/?path=/info/components-documentation--collapsible-header-layout)\n    -   [Header](https://brightlayer-ui-components.github.io/react-native/?path=/info/components-documentation--header)\n"},"/patterns/buttons":{"title":"Buttons","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport PxblueSmallAltIcon from '@brightlayer-ui/icons-mui/PxblueSmallAlt';\n\nimport Banner from '../../app/assets/design-patterns/buttons/banner.svg';\nimport VariationElevated from '../../app/assets/design-patterns/buttons/variation-elevated.png';\nimport VariationFilled from '../../app/assets/design-patterns/buttons/variation-filled.png';\nimport VariationOutlined from '../../app/assets/design-patterns/buttons/variation-outlined.png';\nimport VariationTextOnly from '../../app/assets/design-patterns/buttons/variation-text-only.png';\nimport VariationUnderlined from '../../app/assets/design-patterns/buttons/variation-underlined.png';\nimport EmphasisSameStyle1 from '../../app/assets/design-patterns/buttons/emphasis-same-style-1.png';\nimport EmphasisSameStyle2 from '../../app/assets/design-patterns/buttons/emphasis-same-style-2.png';\nimport EmphasisDoubleElevation1 from '../../app/assets/design-patterns/buttons/emphasis-double-elevation-1.png';\nimport EmphasisDoubleElevation2 from '../../app/assets/design-patterns/buttons/emphasis-double-elevation-2.png';\nimport EmphasisUnnoticed1 from '../../app/assets/design-patterns/buttons/emphasis-unnoticed-1.png';\nimport EmphasisUnnoticed2 from '../../app/assets/design-patterns/buttons/emphasis-unnoticed-2.png';\nimport IconPrefix from '../../app/assets/design-patterns/buttons/icon-prefix.png';\nimport IconSuffix from '../../app/assets/design-patterns/buttons/icon-suffix.png';\nimport IconDual from '../../app/assets/design-patterns/buttons/icon-dual.png';\nimport IconButtonMicroInteraction from '../../app/assets/styles/icon-guidelines/icon-button-micro-interaction.svg';\nimport IconButtonList from '../../app/assets/styles/icon-guidelines/icon-button-list.png';\nimport FABMobile1 from '../../app/assets/design-patterns/buttons/fab-mobile-1.png';\nimport FABMobile2 from '../../app/assets/design-patterns/buttons/fab-mobile-2.png';\nimport FABDesktop from '../../app/assets/design-patterns/buttons/fab-desktop.png';\nimport FABEmptyState from '../../app/assets/design-patterns/buttons/fab-empty-state.png';\nimport RedButton from '../../app/assets/design-patterns/overlays/dialog-box-5.svg';\nimport ShapeRoundedSquare from '../../app/assets/design-patterns/buttons/shape-rounded-square.png';\nimport ShapeRound from '../../app/assets/design-patterns/buttons/shape-round.png';\nimport ToggleText from '../../app/assets/design-patterns/buttons/toggle-text.png';\nimport ToggleIcon from '../../app/assets/design-patterns/buttons/toggle-icon.png';\nimport InsideEmptyState from '../../app/assets/design-patterns/buttons/inside-empty-state.png';\nimport InsideCard from '../../app/assets/design-patterns/buttons/inside-card.png';\nimport InsideBanner from '../../app/assets/design-patterns/buttons/inside-banner.png';\nimport InsideSnackbar from '../../app/assets/design-patterns/buttons/inside-snackbar.png';\nimport PlacementChronological from '../../app/assets/design-patterns/buttons/place-chronological.png';\nimport PlacementDeemphasize from '../../app/assets/design-patterns/buttons/place-deemphasize.png';\nimport PlacementCancel from '../../app/assets/design-patterns/buttons/place-cancel.png';\nimport LabelLogIn from '../../app/assets/design-patterns/buttons/label-log-in.png';\nimport LabelLogin from '../../app/assets/design-patterns/buttons/label-login.png';\nimport LabelSentenceCase from '../../app/assets/design-patterns/buttons/label-sentence-case.png';\nimport LabelAllCaps from '../../app/assets/design-patterns/buttons/label-all-caps.png';\nimport ShortLabel1 from '../../app/assets/design-patterns/buttons/short-label-1.png';\nimport ShortLabel2 from '../../app/assets/design-patterns/buttons/short-label-2.png';\nimport Disabled1 from '../../app/assets/design-patterns/buttons/disabled-1.png';\nimport Disabled2 from '../../app/assets/design-patterns/buttons/disabled-2.png';\nimport Disabled3 from '../../app/assets/design-patterns/buttons/disabled-3.png';\nimport Dropdown1 from '../../app/assets/design-patterns/buttons/dropdown-1.png';\nimport Dropdown2 from '../../app/assets/design-patterns/buttons/dropdown-2.png';\nimport AdditionalReport from '../../app/assets/design-patterns/buttons/additional-report.png';\nimport AdditionalOption from '../../app/assets/design-patterns/overlays/dialog-box-6.svg';\nimport ResponsiveFooterPushedUp from '../../app/assets/design-patterns/buttons/responsive-pushed-up-footer.gif';\nimport ResponsiveBottomSlider1 from '../../app/assets/design-patterns/buttons/responsive-bottom-slider-1.png';\nimport ResponsiveBottomSlider2 from '../../app/assets/design-patterns/buttons/responsive-bottom-slider-2.png';\nimport ResponsiveStackedMobile from '../../app/assets/design-patterns/buttons/responsive-stacked-mobile.png';\nimport ResponsiveStackedDesktop from '../../app/assets/design-patterns/buttons/responsive-stacked-desktop.png';\nimport ResponsiveHMI from '../../app/assets/design-patterns/buttons/responsive-hmi.png';\nimport SpecRegular1 from '../../app/assets/design-patterns/buttons/spec-regular-1.svg';\nimport SpecRegular2 from '../../app/assets/design-patterns/buttons/spec-regular-2.svg';\nimport SpecRegular3 from '../../app/assets/design-patterns/buttons/spec-regular-3.svg';\nimport SpecRegularSpacing1 from '../../app/assets/design-patterns/buttons/spec-regular-spacing-1.svg';\nimport SpecRegularSpacing2 from '../../app/assets/design-patterns/buttons/spec-regular-spacing-2.svg';\nimport SpecFAB1 from '../../app/assets/design-patterns/buttons/spec-fab-1.svg';\nimport SpecFAB2 from '../../app/assets/design-patterns/buttons/spec-fab-2.svg';\nimport SpecTypography from '../../app/assets/design-patterns/buttons/spec-typography.svg';\n\n{/* KEYWORDS: design pattern buttons button click icon toggle */}\n\n# Buttons\n\n<ImageGrid images={[Banner]} regularWidth />\n\nButtons are one of the primary ways for users to take action.\n\n<MaterialDesignDescription title={'Buttons'} url={`https://m2.material.io/components/buttons`} />\n<TOC\n    anchors={[\n        { title: 'Introduction', hash: '#buttons' },\n        { title: 'Variations' },\n        { title: 'Styles', depth: 1 },\n        { title: 'Icons', depth: 1 },\n        { title: 'Floating Action Buttons (FABs)', depth: 1 },\n        { title: 'Colors', depth: 1 },\n        { title: 'Toggle Button Groups', depth: 1 },\n        { title: 'Usage' },\n        { title: 'Buttons inside Another Component', depth: 1 },\n        { title: 'Placement', depth: 1 },\n        { title: 'Button Labels', depth: 1 },\n        { title: 'Behaviors' },\n        { title: 'Short Labels', depth: 1 },\n        { title: 'Disabled Buttons', depth: 1 },\n        { title: 'Dropdown', depth: 1 },\n        { title: 'Alternative Actions', depth: 1 },\n        { title: 'Responsive' },\n        { title: 'Design Specifications' },\n        { title: 'Developers' },\n    ]}\n/>\n<Divider />\n\n# Variations\n\nThe appearance of a button depends on available space, the attention required from the user, and what action it triggers.\n\n## Styles\n\nBrightlayer UI supports five different button styles.\n\n<ImageGrid\n    images={[VariationElevated, VariationFilled, VariationOutlined, VariationTextOnly, VariationUnderlined]}\n    captionsUnderImages={[\n        'The elevated style provides the highest emphasis.',\n        'The filled style provides a high emphasis.',\n        'The outlined style provides a medium emphasis.',\n        'The text-only style provides a low emphasis.',\n        'The underlined / hyperlinked style is used as inline buttons only.',\n    ]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\nYou should arrange your buttons to guide users attention to encouraged or frequently used actions.\n\n<ImageGrid\n    images={[\n        EmphasisSameStyle1,\n        EmphasisSameStyle2,\n        EmphasisDoubleElevation1,\n        EmphasisDoubleElevation2,\n        EmphasisUnnoticed1,\n        EmphasisUnnoticed2,\n    ]}\n    captionsUnderImages={[\n        'AVOID: Avoid using a high emphasis on all user actions.',\n        'DO: Assign emphasis to only the most heavily used user actions.',\n        `DONT: Do not overuse elevation, as exemplified by the shadow under buttons. These elevated buttons appear too prominently.`,\n        `DO: Use buttons styles to appropriately guide users' attention.`,\n        `DONT: Do not place a “text-only” button right next to a \"filled\" or an \"elevated\" button, as the text-only button can be neglected by users in a hurry.`,\n        `DO: Use outlined buttons next to filled buttons.`,\n    ]}\n/>\n\n## Icons\n\nButtons are often combined with icons to draw users’ attention. Icons also help reinforce the button actions, especially in multilingual applications.\n\n<ImageGrid\n    images={[IconPrefix, IconSuffix]}\n    captionsUnderImages={[`A button with a prefixed icon.`, `A button with a suffixed icon.`]}\n/>\n\n<ImageGrid images={[IconDual]} captionsUnderImages={[`DONT: Do not use more than one icon in a button.`]} />\n\nWhen there is not enough room to place a regular button, consider using an icon button. An icon button is a clickable icon that behaves like a regular button.\n\n<MaterialDesignDescription\n    title={'Icon Guidelines § Icon Buttons'}\n    url={'/style/icon-guidelines#icon-buttons'}\n    description={`Learn about when and how to use icon buttons.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n\n<ImageGrid\n    images={[IconButtonMicroInteraction, IconButtonList]}\n    captionsUnderImages={[\n        `An icon button is an interactive icon.`,\n        `Icon buttons can be used in lists when space is limited.`,\n    ]}\n/>\n\n## Floating Action Buttons (FABs)\n\nFloating action buttons, commonly known as “FAB”, are occasionally used on mobile apps. They perform the primary or most common action on a screen. FABs are usually pinned to the bottom right corner of the screen so that users have constant access to these buttons no matter how far they have scrolled down the screen.\n\n<ImageGrid\n    images={[FABMobile1, FABMobile2]}\n    captionsUnderImages={[\n        `A FAB in a file list to encourage users to upload new files.`,\n        `A FAB in a user list for adding new users. When a FAB icon is a \"universal icon\" and its meaning can be clearly identified by the user, the button label may be omitted.`,\n    ]}\n/>\n\nBe careful when using FABs, as they can be visually disconnected from the user's workflow.\n\n<ImageGrid\n    images={[FABDesktop, FABEmptyState]}\n    captionsUnderImages={[\n        `AVOID: Avoid using FABs outside mobile apps for important user actions, as they tend to be unnoticeable on wide screens.`,\n        `DONT: Do not use FABs when the body content is empty. You should use an empty state component instead.`,\n    ]}\n/>\n\n## Colors\n\nBy default, buttons should use the primary theme color. Consider coloring buttons with destructive actions in red to alert the user.\n\n<ImageGrid images={[RedButton]} captionsUnderImages={[`DO: Use red colors in buttons for destructive actions.`]} />\n\n## Shapes\n\nThe default shape of a Brightlayer UI button is a rectangle with rounded corners of radius 4dp. Alternatively, consumer-facing applications may also consider using round / pill-shaped buttons consistently throughout the entire product.\n\n<MaterialDesignDescription\n    title={'Project Identity § Component Variants'}\n    url={'/design/project-identity#component-variants'}\n    description={`Learn about style variations to make your project stand out better.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n\n<ImageGrid\n    images={[ShapeRoundedSquare, ShapeRound]}\n    captionsUnderImages={[\n        `Default Brightlayer UI button styles`,\n        `Round / pill-shaped buttons are only used in consumer-facing products.`,\n    ]}\n/>\n\n## Toggle Button Groups\n\nFunctionally-related buttons may be grouped together. These buttons share a common container and behave like tab navigations and radio buttons where only one button is active at a time.\n\n<ImageGrid\n    images={[ToggleText, ToggleIcon]}\n    captionsUnderImages={[\n        `A toggle button group where users can select a data category to examine in detail.`,\n        `AVOID: Avoid using icon buttons inside toggle button groups, unless the meaning of the icon can be clearly interpreted from the context, which must be verified with user testing.`,\n    ]}\n/>\n\n# Usage\n\n## Buttons inside Another Component\n\nButtons are often used within other components.\n\n<ImageGrid\n    images={[InsideEmptyState, InsideCard, InsideBanner, InsideSnackbar]}\n    captionsUnderImages={[\n        `A button inside an empty state encourages users to take action to make the screen less “empty.”`,\n        `Buttons on a dashboard.`,\n        `Two buttons inside a banner.`,\n        `A button inside a snackbar for quick actions.`,\n    ]}\n/>\n\n## Placement\n\nYou should place buttons in the order you want them to be read. Most languages are read from left to right and from top to bottom.\n\n<MaterialDesignDescription\n    title={'Internationalization § Bidirectionality / Right-to-Left (RTL) Support'}\n    url={'/patterns/internationalization#bidirectionality--right-to-left-(rtl)-support'}\n    description={`Learn about how to support languages read from left to right.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n\n<ImageGrid\n    regularWidth\n    images={[PlacementChronological]}\n    captionsUnderImages={[\n        `Actions such as “add”, “create”, and “edit” come before actions such as “export” or “delete.” `,\n    ]}\n/>\n\n<ImageGrid\n    images={[PlacementDeemphasize, PlacementCancel]}\n    captionsUnderImages={[\n        `“Skip for Now”, being the least encouraged action, is placed on the bottom.`,\n        `“Cancel” buttons are usually placed to the left of affirmative actions such as “next”, “ok” and “done.”`,\n    ]}\n/>\n\n## Button Labels\n\nButtons are meant to be actions, and thus their labels should be verbs.\n\n<ImageGrid\n    images={[LabelLogin, LabelLogIn]}\n    captionsUnderImages={[`DONT: “Login” is a noun, not a verb.`, `DO: Use the verb form “Log In” instead.`]}\n/>\n\nHow you choose between Title Case and Sentence case depends on [your app's formality and your user's cultural background](https://uxdesign.cc/title-case-vs-sentence-case-in-ux-writing-212087192261). You should ensure that your selection stays consistent throughout the entire application.\n\n<ImageGrid\n    images={[IconPrefix, LabelSentenceCase, LabelAllCaps]}\n    captionsUnderImages={[\n        `DO: By default, use title case in button labels. Title case adds more formality.`,\n        `Some languages and cultures might prefer sentence cases.`,\n        `DONT: Do not use all caps because they are harder to read.`,\n    ]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\n# Behaviors\n\n## Short Labels\n\nButton text should be as succinct as possible to convey the correct message.\n\n<ImageGrid\n    images={[ShortLabel1, ShortLabel2]}\n    captionsUnderImages={[\n        `AVOID: Avoid using long button labels when a shorter version is possible.`,\n        `DO: Use succinct button labels.`,\n    ]}\n/>\n\n## Disabled Buttons\n\nWhen users expect a button somewhere but the associated action is temporarily not available, you may disable the button.\n\n<ImageGrid\n    images={[Disabled1, Disabled2, Disabled3]}\n    captionsUnderImages={[\n        `The email address is incomplete.`,\n        `The user typed a valid email address, enabling the send button.`,\n        `Consider using a tooltip to explain why the button is disabled when possible.`,\n    ]}\n/>\n\n<MaterialDesignDescription\n    title={'Forms and Validation'}\n    url={'/patterns/forms'}\n    description={`Learn about how users interact with forms.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n\n## Dropdown\n\nButtons may trigger dropdown menus. These buttons should always be suffixed by dropdown arrows.\n\n<ImageGrid\n    images={[Dropdown1, Dropdown2]}\n    caption={`A dropdown menu reveals more options for the button action.`}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\n## Alternative Actions\n\nWhen possible, consider offering alternative actions. These could be frequent next steps or alternatives to destructive actions.\n\n<ImageGrid\n    images={[AdditionalReport, AdditionalOption]}\n    captionsUnderImages={[\n        `For users who need to upload multiple reports at once, “Submit Another Report” is considered a frequent next step.`,\n        `In addition to “delete forever”, offer “transfer to another location” as a non-destructive alternative.`,\n    ]}\n/>\n\n# Responsive\n\nThere are some special considerations when designing for smaller-sized screens. For example, when buttons or [steppers](/patterns/steppers) are pinned to the bottom of the screen, the phone’s keyboard, when invoked, should push them up.\n\n<ImageGrid images={[ResponsiveFooterPushedUp]} captionsUnderImages={[`Mobile phone’s keyboard pushes buttons up.`]} />\n\nButtons should stay within a device's safe area.\n\n<ImageGrid\n    images={[ResponsiveBottomSlider1, ResponsiveBottomSlider2]}\n    captionsUnderImages={[\n        `DONT: Do not place buttons behind or too close to iPhone’s bottom slider.`,\n        `DO: Place buttons above iPhone’s bottom slider.`,\n    ]}\n/>\n\nMobile phones have limited horizontal screen space. If your app supports multiple languages, the length of button labels might be wider than the primary language you are designing for. As a result, you should always consider using stacked buttons on mobile.\n\n<ImageGrid\n    images={[ResponsiveStackedMobile, ResponsiveStackedDesktop]}\n    captionsUnderImages={[\n        `Use stacked buttons on mobile apps.`,\n        `Use side-by-side buttons on desktop or tablet apps, if there's enough horizontal space.`,\n    ]}\n/>\n\nHMIs (Human-Machine Interfaces) are tablets commonly mounted on machines, workstations, and walls. Users often find it hard to aim at buttons as precisely as with other screens, and to worsen the situation, they may be wearing gloves while interacting with the screen. As a result, buttons on HMIs are usually larger.\n\n<ImageGrid\n    images={[ResponsiveHMI]}\n    regularWidth\n    caption={`Buttons on HMIs (#1) are physically larger than buttons on mobile phones (#2).`}\n/>\n\n# Design Specifications\n\n## Regular Buttons\n\n<ImageGrid\n    images={[SpecRegular1, SpecRegular2, SpecRegular3]}\n    captionsUnderImages={[`Regular button`, `Button with prefixed icon`, `Button with suffixed icon`]}\n/>\n\nTo prevent misclicks, the spacing between any two buttons is at least 16dp.\n\n<ImageGrid images={[SpecRegularSpacing1, SpecRegularSpacing2]} />\n\n## Floating Action Buttons\n\n<ImageGrid images={[SpecFAB1, SpecFAB2]} regularWidth />\n\n## Typography\n\nButtons use a typographical style identical to \"subtitle 2\". Read more on the [typography page](/style/typography).\n\n<ImageGrid images={[SpecTypography]} />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular**:\n\n-   Angular Material\n    -   [Button](https://material.angular.io/components/button/overview)\n    -   [Button Toggle](https://material.angular.io/components/button-toggle/overview)\n\n**React**:\n\n-   MUI\n    -   [Button](https://mui.com/material-ui/react-button/)\n    -   [Toggle Button](https://mui.com/material-ui/react-toggle-button/)\n\n**React Native**:\n\n-   React Native Paper\n    -   [Button](https://callstack.github.io/react-native-paper/docs/components/Button)\n    -   [Icon Button](https://callstack.github.io/react-native-paper/docs/components/IconButton)\n    -   [Toggle Button](https://callstack.github.io/react-native-paper/docs/components/ToggleButton/)\n"},"/patterns/empty-states":{"title":"Empty States","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport Banner from '../../app/assets/design-patterns/empty-states/empty-state-banner.svg';\nimport Image1 from '../../app/assets/design-patterns/empty-states/empty-state-variations.png';\nimport DesktopImage from '../../app/assets/design-patterns/empty-states/empty-state-desktop.png';\nimport ElementImage from '../../app/assets/design-patterns/empty-states/empty-state-element.png';\nimport DontDistractImage from '../../app/assets/design-patterns/empty-states/dont-distract.png';\nimport DoEncourageImage from '../../app/assets/design-patterns/empty-states/do-encourage.png';\nimport Specs1Image from '../../app/assets/design-patterns/empty-states/specs-1.png';\nimport Specs2Image from '../../app/assets/design-patterns/empty-states/specs-2.png';\n\n{/* KEYWORDS: design pattern empty state placeholder */}\n\n# Empty States\n\n<ImageGrid images={[Banner]} regularWidth />\n\nAt times, there may be areas of your application that do not have data available to display. This can happen when there is an error loading data, there are no results for a particular search or filter criteria, etc. This is where empty state indicators come into play.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Empty States'}\n        url={`https://m2.material.io/design/communication/empty-states.html`}\n    />\n    <ImageGrid\n        regularWidth\n        images={[Image1]}\n        caption={[\n            '1: Mobile screen showing empty state as a functionality placeholder.',\n            '2: Desktop screen with empty state and call to action button.',\n        ]}\n    />\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#empty-states' },\n            { title: 'Common Use Cases' },\n            { title: 'Anatomy' },\n            { title: 'Behavior' },\n            { title: 'Design Specifications' },\n            { title: 'Developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Common Use Cases\n\nYou can refer to the Material Design Empty States guidelines for general usage instructions.\n\nEmpty states can be used in a variety of ways in your application. As the name suggests, they can alert users to empty data, but they can also be used to indicate:\n\n-   No Data Available\n-   Empty Search/Filter Results\n-   Networking Errors\n-   Lack of Permissions\n-   Future Features / Placeholders\n-   Success Screens\n\nEmpty states should **NOT** be used for:\n\n-   [Loading indicators](/patterns/loading)\n-   Welcome Screens\n\n<Divider />\n\n# Anatomy\n\nEmpty states should include a large icon or graphic followed a brief headline/message. If necessary, additional explanatory text may follow.\n\nThe text on the screen should clearly indicate why there is no data to display, and what (if anything) can be done to make data available. The text should be minimal, but enough to convey the necessary message.\n\nIf the data is empty but could be populated by a user action (such as adding a device to an empty device list), there should be a call-to-action button that will allow the user to add data.\n\n## Variations\n\n<ImageGrid\n    images={[DesktopImage, ElementImage]}\n    captionsUnderImages={['A full-screen empty state.', 'Empty state shown on an element (card).']}\n/>\n\n### Full-screen\n\nIn the most common cases, Empty States should be used full-screen as the only content on a page. In this situation, the indicator should be centered on the page. In some cases, you may wish to use a large graphic as the background of the entire page as well (such as for features that will be coming soon).\n\n### Element-level\n\nWhile less common, empty states can also be used as an indicator for individual sections of a page rather than the entire page (such as a single card having no data on a dashboard / overview screen). In these cases, it may be appropriate to use a smaller icon and text depending on the available space.\n\n<Divider />\n\n# Behavior\n\nThe empty state should clearly communicate to users:\n\n-   What they are looking at: What data will be present if the dataset is not empty?\n-   Why the state is empty: What actions (or inactions) did they perform that caused the dataset to be empty?\n-   How to get the data: What actions do they need to take to populate the data, if needed?\n\n<ImageGrid\n    images={[DontDistractImage, DoEncourageImage]}\n    captionsUnderImages={[\n        'DONT: Do not display pagination when datasets are empty as they can be distracting to users.',\n        'DO: Instead, provide instructions to help your user out of the empty state situation, if so desired by your application.',\n    ]}\n/>\n\nEmpty states can also be a great place to express your project identity, especially if your application is designed to be consumer-facing. See [Project Identity](/design/project-identity#illustrations) for details.\n\n<Divider />\n\n# Design Specifications\n\n<ImageGrid images={[Specs1Image, Specs2Image]} regularWidth />\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular** - @brightlayer-ui/angular-components:\n\n-   [Empty State](https://brightlayer-ui-components.github.io/angular/components/empty-state/examples)\n\n**React** - @brightlayer-ui/react-components:\n\n-   [Empty State](https://brightlayer-ui-components.github.io/react/components/empty-state/examples)\n\n**React Native** - @brightlayer-ui/react-native-components:\n\n-   [Empty State](https://brightlayer-ui-components.github.io/react-native/?path=/info/components-documentation--empty-state)\n"},"/patterns/forms":{"title":"Forms and Validation","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport SummaryImage from '../../app/assets/design-patterns/form-validation/form-validation.svg';\nimport Image4 from '../../app/assets/design-patterns/form-validation/form-validation-password-entering.png';\nimport Image5 from '../../app/assets/design-patterns/form-validation/form-validation-password-error.png';\nimport Image6 from '../../app/assets/design-patterns/form-validation/form-validation-password-complete.png';\n\nimport LongFormImage from '../../app/assets/design-patterns/form-validation/long-form.png';\nimport OnBlurImage from '../../app/assets/design-patterns/form-validation/verify-input-on-blur.png';\nimport OnChangeImage from '../../app/assets/design-patterns/form-validation/verify-input-on-change.png';\nimport OnSubmitImage from '../../app/assets/design-patterns/form-validation/verify-on-submit.gif';\nimport SubmitButtonLocationImage from '../../app/assets/design-patterns/form-validation/submit-button-location.png';\nimport NextButtonUsageImage from '../../app/assets/design-patterns/form-validation/next-button-usage.png';\nimport SubmitButtonOnChangeImage from '../../app/assets/design-patterns/form-validation/submit-button-on-change.png';\nimport SubmitButtonAutoSubmitImage from '../../app/assets/design-patterns/form-validation/submit-button-auto-submit.png';\nimport SubmitButtonOnBlurImage from '../../app/assets/design-patterns/form-validation/submit-button-on-blur.png';\nimport SubmitButtonOnClickImage from '../../app/assets/design-patterns/form-validation/submit-button-on-click.png';\nimport Specs1Image from '../../app/assets/design-patterns/form-validation/specs-1.png';\nimport Specs2Image from '../../app/assets/design-patterns/form-validation/specs-2.png';\nimport Specs3Image from '../../app/assets/design-patterns/form-validation/specs-3.png';\nimport Specs4Image from '../../app/assets/design-patterns/form-validation/specs-4.png';\nimport Specs5Image from '../../app/assets/design-patterns/form-validation/specs-5.png';\n\nimport dismissKeyboardErrorAutoscrollImage from '../../app/assets/design-patterns/form-validation/dismiss-keyboard-error-autoscroll.gif';\nimport dismissKeyboardErrorTextImage from '../../app/assets/design-patterns/form-validation/dismiss-keyboard-error-text.gif';\n\n{/* KEYWORDS: design pattern form verification validation error */}\n\n# Forms and Validation\n\n<ImageGrid images={[SummaryImage]} regularWidth />\n\nForms are an integral part of many applications, particularly during the [user registration](/patterns/user-auth) phase. One of the most important parts of working with forms is properly validating the information that users enter into them. In general, Brightlayer UI follows the form behaviors explained in detail by Material Design.\n\n<MaterialDesignDescription title={'Text Fields'} url={`https://m2.material.io/components/text-fields/`} />\n<TOC\n    anchors={[\n        { title: 'Introduction', hash: 'forms-and-validation' },\n        { title: 'Anatomy' },\n        { title: 'Form Layout', depth: 1 },\n        { title: 'Field Requirements', depth: 1 },\n        { title: 'Error Messages', depth: 1 },\n        { title: 'Success Screens', depth: 1 },\n        { title: 'Mobile Keyboard', depth: 1 },\n        { title: 'Password Visibility', depth: 1 },\n        { title: 'Behaviors' },\n        { title: 'Verifying User Input', depth: 1 },\n        { title: 'Submitting the Form', depth: 1 },\n        { title: 'Design Specifications' },\n        { title: 'Developers' },\n    ]}\n/>\n<Divider />\n\n# Anatomy\n\n## Form Layout\n\nKeep your forms short where possible, but make effective use of whitespace to avoid overwhelming your users. If your forms are larger than the height of your target device, consider breaking them into sections or multiple pages to improve the user experience.\n\n<ImageGrid\n    images={[LongFormImage]}\n    regularWidth\n    caption={\n        'You can either split the forms into sections with dividers (#1) or into multiple pages with steppers (#2), or a combination of both.'\n    }\n/>\n\n<DemoCard\n    repository={'Sectioned Form'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fforms-and-validation%2Fsectioned-form%2Fsectioned-form.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/form-validation/sectioned-form/index.tsx&initialpath=/in-a-sectioned-form`}\n/>\n\n<DemoCard\n    repository={'Forms in a List'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fforms-and-validation%2Fin-a-list%2Fin-a-list.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/form-validation/list/index.tsx&initialpath=/in-a-list`}\n/>\n\n<DemoCard\n    repository={'Forms in a Table'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fforms-and-validation%2Fin-a-table%2Fin-a-table.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/form-validation/table/index.tsx&initialpath=/in-a-table`}\n/>\n\n## Field Requirements\n\nRequired / optional fields should be identified according to the Material Design guidelines. If your form fields have complex requirements for valid values, you can list these criteria below the input. A common use case for this is when displaying password complexity requirements.\n\n<ImageGrid images={[Image4, Image5, Image6]} caption={'A common application of form validation — reset password.'} />\n<DemoCard\n    repository={'Password'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fforms-and-validation%2Fpassword%2Fpassword.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/form-validation/password/index.tsx&initialpath=/password`}\n/>\n\n## Error Messages\n\nIf there is an error with the data entered into a field, the field should indicate to the user that there is a problem. Label and helper text should be changed to a red color and the error message should be displayed in the helper text location below the field — any existing helper text should be replaced with the error message. You may optionally show an additional error icon in the text input.\n\nError messages should be succinct and should not provide information that could compromise security (e.g., use \"Invalid Credentials\" instead of \"Incorrect Password\").\n\n## Success Screens\n\nOnce a user has reached the end of a form successfully, you should present them with a success screen. This screen should indicate to the user that their submission was accepted and offer information about the next steps (e.g., \"Click the finish button below to log in.\"). Typically these success screens are stylized for your application and will include some bold graphics or [illustrations](/style/illustrations).\n\n## Mobile Keyboard\n\nMobile devices offer multiple different software keyboard variations for different types of inputs. Make sure that you are using the appropriate keyboard for your inputs (e.g., use the email keyboard for email inputs, phone number keyboard for a phone number field, etc.).\n\nTypically, mobile devices also allow you to change the label on the return key of the software keyboard. This label should be appropriate to the context (see [Submitting the Form](/patterns/forms#submitting-the-form) below).\n\nThe focused input field should remain centered in the screen when the software keyboard is open — it should not be hidden behind the keyboard.\n\n## Password Visibility\n\nDepending on the security requirements of your application, it may be useful to add a password visibility toggle button to fields where users must enter a password (such as during login or changing a password). The visibility toggle switches the input type between hidden text and plain text so users can ensure that they typed their password correctly.\n\n<Divider />\n\n# Behaviors\n\n## Verifying User Input\n\nIn general, there are three acceptable times to perform form field verification:\n\n-   on blur: the field is verified when the user clicks away from it\n-   on change: the field is dynamically verified on each keystroke or change in the value\n-   on action: fields are verified after performing a specific action, such as clicking a button\n\n### Verifying on Blur\n\nIn order to avoid distracting or confusing users, most text fields should verify input when the field loses focus. Error messages should not appear until the user is finished entering data and the field is no longer in focus.\n\n<ImageGrid\n    images={[OnBlurImage]}\n    regularWidth\n    caption={[\n        '1: Do not check for validity or display error messages when the user is typing in the field.',\n        '2: The user is finished and the input has lost focus (i.e., \"blurred\"). Now the input should be verified.',\n    ]}\n/>\n\n<DemoCard\n    repository={'Phone Number Format'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fforms-and-validation%2Fphone-number-format%2Fphone-number-format.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/form-validation/phone-number-format/index.tsx&initialpath=/phone-number-format`}\n/>\n\n### Verifying on Change\n\nSome fields should verify the user input as it changes. The most common case for this type of verification is a new password field or a confirm password field. The verification feedback should be displayed / updated each time the user makes a change to the input field.\n\n<ImageGrid\n    images={[OnChangeImage]}\n    regularWidth\n    caption={[\n        '1: The password criteria checks shall be updated as the user changes their input.',\n        '2: “Confirm Password” field should check for a match with password to give immediate feedback for when the user can proceed.',\n    ]}\n/>\n\n### Verifying on Action\n\nIn some specific situations, you may need to defer verification or perform it for all fields in a form at once. In this case, you need to link verification to a specific action, such as clicking a button.\n\nThis type of verification is common when the checks cannot be performed on the client, such as making an API call to verify a registration code, check user login credentials, or search for a device on the network. In most cases, you can do some preliminary checks using one of the two methods above (e.g., you can check if the email is a valid email before making the API call to verify the credentials).\n\nIf verification is being triggered by clicking on a button, you should replace the button text with a loading spinner while the verification is in progress. If the verification is successful, the user should be automatically taken to the next screen.\n\n<ImageGrid\n    images={[OnSubmitImage]}\n    regularWidth\n    caption={[\n        'After the user clicks the submit button, the app waits for the server response, and displays an error message.',\n    ]}\n/>\n\n<DemoCard\n    repository={'Verify on Submit'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fforms-and-validation%2Fverify-on-submit%2Fverify-on-submit.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/form-validation/verify-on-submit/index.tsx&initialpath=/verify-on-submit`}\n/>\n\n## Submitting the Form\n\nForms should have a button to submit the data or continue to the next part of the form if there are multiple parts. Depending on what happens next, the button should be labeled _Next_, _Finish_, or similar. The button should be located at the bottom right corner of the form (bottom left for right-to-left languages).\n\n<ImageGrid\n    images={[SubmitButtonLocationImage]}\n    regularWidth\n    caption={[\n        '1: On desktops, the button is placed in the bottom corner of the form.',\n        '2: On mobile, the software keyboard has different options for the action button',\n    ]}\n/>\n\nOn mobile, if there are multiple input fields on the screen, the keyboard action button should say \"next\", unless you are on the last item of the page, in which case the keyboard button should say \"done\" or \"submit\". This button can either submit the form or simply dismiss the keyboard (if you want users to have a chance to review their information first).\n\n<ImageGrid\n    images={[NextButtonUsageImage]}\n    regularWidth\n    caption={[\n        ,\n        '1: The user entered a valid input. Clicking \"next\" will auto-focus the user to the next text field.',\n        '2: The user entered an invalid input. Clicking \"next\" will display the error message but will not auto-focus to the next text field.',\n    ]}\n/>\n\nFor screens where there is a single field with a known required length (e.g., a verification code), the submit button can be omitted and the form submitted as soon as the required length is reached.\n\n{/* TODO: A gif might handle the task better here */}\n\n<ImageGrid\n    images={[SubmitButtonAutoSubmitImage]}\n    regularWidth\n    caption={\n        'For the verification code screen, you can auto-submit the information once the user input reaches the required length (#2). After the verification code is recognized (#3), the screen pauses for a short moment before automatically moving to the next screen.'\n    }\n/>\n\n<DemoCard\n    repository={'Fixed-Length Passcode'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fforms-and-validation%2Ffix-length-passcode%2Ffix-length-passcode.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/form-validation/fixed-length-passcode/index.tsx&initialpath=/fixed-length-passcode`}\n/>\n\n### Disabling the Submit Button\n\nIf there are errors indicated on any of the form fields, the submit button should be disabled. If you are performing verification when clicking the submit button (onAction), all the invalid fields should be indicated if they aren't already.\n\n<React.Fragment>\n    {/* <ImageGrid\n        images={[SubmitButtonOnChangeImage]}\n        regularWidth\n        caption={\n            'When your input field field is verified on change, disable the submit button until the user enters a valid input.'\n        }\n    /> */}\n    <ImageGrid\n        images={[SubmitButtonOnBlurImage]}\n        regularWidth\n        caption={'The submit button is disabled until the user has entered something for all the required fields.'}\n    />\n    <ImageGrid\n        images={[dismissKeyboardErrorAutoscrollImage, dismissKeyboardErrorTextImage]}\n        captionsUnderImages={[\n            'The UI should auto-scroll to and focus on the first invalid field.',\n            'On login screens, form fields should not shift when errors appear.',\n        ]}\n    />\n</React.Fragment>\n<Divider />\n\n# Design Specifications\n\nFor additional instructions, refer to Material Design's [specifications](https://m2.material.io/components/text-fields#specs) for \"Text fields\".\n\n## Mobile\n\n<ImageGrid images={[Specs1Image, Specs2Image, Specs3Image]} regularWidth />\n\n## Desktop and Tablet\n\nIf certain dimensions are not specified, refer to the dimensions suggested in the mobile section above.\n\n<ImageGrid images={[Specs4Image, Specs5Image]} regularWidth />\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular** — Angular Material\n\n-   [Form Field](https://material.angular.io/components/form-field/overview)\n-   [Input](https://material.angular.io/components/input/overview)\n\n**React** — MUI\n\n-   [Text Field](https://mui.com/material-ui/react-text-field/#main-content)\n\n**React Native** — React-Native-Paper\n\n-   [TextInput](https://callstack.github.io/react-native-paper/docs/components/TextInput/)\n"},"/patterns/internationalization":{"title":"Internationalization","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport { Link as LinkIcon } from '@mui/icons-material';\nimport InternationalizationImage from '../../app/assets/design-patterns/internationalization/internationalization.svg';\nimport IconsFlippedOKImage from '../../app/assets/design-patterns/internationalization/icons-flipped-ok.png';\nimport IconsFlippedErrorImage from '../../app/assets/design-patterns/internationalization/icons-flipped-error.png';\nimport UIFlippedImage from '../../app/assets/design-patterns/internationalization/ui-flipped.png';\nimport ButtonWidthImage from '../../app/assets/design-patterns/internationalization/button-width.png';\nimport TextFieldWidthImage from '../../app/assets/design-patterns/internationalization/text-field-width.png';\nimport LanguageOptionsImage from '../../app/assets/design-patterns/internationalization/language-options.png';\nimport CulturalDifferencesImage from '../../app/assets/design-patterns/internationalization/cultural-differences.svg';\nimport FormsImage from '../../app/assets/design-patterns/internationalization/forms.png';\n\n{/* KEYWORDS: design pattern internationalization i18n internationalisation language translate translation localization l10n rtl localisation globalization globalize globalisation globalise */}\n\n# Internationalization & Localization\n\n<React.Fragment>\n    <ImageGrid images={[InternationalizationImage]} regularWidth />\n    <DemoCard\n        repository={'internationalization'}\n        angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Fi18n%2Fi18n.component.ts`}\n        react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/i18n/index.tsx&initialpath=/i18n`}\n    />\n</React.Fragment>\n\nInternationalization and localization refer to a set of practices for adapting applications to different regions, languages, and cultures. You can accomplish this in your applications or websites by considering the differences in language, scripts, and directionality.\n\nInternationalization, sometimes abbreviated as \"I18N,\" refers to the process of designing products that are functionally independent of interfaces or interactions that rely on a specific language or cultural context. This process enables products or services to be equally experienced by people using any language or from any cultural background. Localization, sometimes written as \"L10N,\" concerns adapting or customizing a product to some specific areas. Internationalization and localization are both crucial in making your application prosper in a global market.\n\nYou should always consider Internationalization during the design process, especially if there is a vision for reaching our Global market. Understanding and capturing possible needs for localization should begin at the outset of any new product development, even if the short-term goal is focused on only one market.\n\n<React.Fragment>\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#internationalization--localization' },\n            { title: 'Changing Locales', hash: '#changing-locales' },\n            { title: 'Developers', hash: '#developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Changing Locales\n\n<MaterialDesignDescription\n    title={'Language Support'}\n    url={`https://m2.material.io/design/typography/language-support.html#language-considerations`}\n/>\n\n## Translation\n\nTo localize your application content, you should create a string resource file or object that contains the translations for any display text used in your application. Do not have any text hard-coded in your application's UI. To switch your application to another language, you simply toggle the file/object used to populate the UI to the appropriate translation.\n\n## Showing Language Options\n\n<ImageGrid images={[LanguageOptionsImage]} regularWidth />\n\nLanguage options are typically presented in the user preferences or settings section of an application. In the case where users do not require an account, such as on a public-facing website, the language option is expected in the app bar or in the footer. You should provide cues, such as an icon, to help users locate the language selection.\n\nWhen showing a list of languages, the language names should be presented in their own language (i.e., use \"Español\", not \"Spanish\").\n\n## Converting Units, Currencies, and Formats\n\nUnits, currency, and formats are usually linked with a particular locale. However, there can be differences in usage even within a single locale. You should provide users with the option to change these values (if appropriate for your application) in their locale settings.\n\nSome commonly influenced formats include:\n\n-   Phone number\n-   Names (e.g., given name vs. surname order)\n-   Address (e.g., street name first or country name first)\n-   Date and time\n-   Numbers (comma vs. period)\n-   Punctuation\n\nConsider your global audience when crafting forms — you may need to support multiple input formats such as for a phone number.\n\n<ImageGrid images={[FormsImage]} caption={'Allow the users to put in an international phone number.'} regularWidth />\n\n## Checking for Layout\n\n<ImageGrid\n    images={[ButtonWidthImage, TextFieldWidthImage]}\n    caption={[\n        '1: Buttons with different width.',\n        '2: Error message in English.',\n        '3: Same error message in Malayalam can result in line wrapping.',\n    ]}\n/>\n\nDifferent languages or writing systems may require different vertical and horizontal space. To ensure flexibility, avoid using fixed dimensions for UI components such as buttons, labels, and badges. Also, consider setting different default display font sizes for languages that may have smaller glyphs.\n\n> **NOTE:** Brightlayer UI recommends using [Noto Sans](https://www.google.com/get/noto/#sans-lgc) for all non-western languages. You can read more on our [Typography](/style/typography) page.\n\n## Bidirectionality / Right-to-Left (RTL) Support\n\n<MaterialDesignDescription\n    title={'Bidirectionality'}\n    description={'Learn about mirroring layout, mirroring elements, and localization.'}\n    url={`https://m2.material.io/design/usability/bidirectionality.html`}\n/>\n\nSome languages, such as Arabic and Hebrew, are read from right to left. Applications supporting these languages will need to mirror the UI so the natural flow is from right to left. For example, navigation drawers should be displayed on the right side of the screen, icons should be to the right of the text in buttons, and [any icons with directionality](https://m2.material.io/design/usability/bidirectionality.html#mirroring-elements) should be mirrored.\n\n<ImageGrid\n    images={[UIFlippedImage]}\n    regularWidth\n    caption={[\n        '1: A user interface in right-to-left language (English).',\n        '2: The same user interface in left-to-right language (Arabic).',\n    ]}\n/>\n<ImageGrid\n    images={[IconsFlippedOKImage, IconsFlippedErrorImage]}\n    captionsUnderImages={[\n        'DO: Icons that indicate directions should be mirrored.',\n        'DONT: Icons with glyphs and symbols should never be mirrored.',\n    ]}\n/>\n<MaterialDesignDescription\n    title={'Which icons should be mirrored for RTL?'}\n    description={'A list of Material icons that should be mirrored in a RTL UI.'}\n    url={`http://google.github.io/material-design-icons/#which-icons-should-be-mirrored-for-rtl-`}\n    avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n/>\n\n## Cultural Differences\n\n<ImageGrid images={[CulturalDifferencesImage]} regularWidth />\n\nAddressing cultural differences is the key concern of localization. Sometimes certain UI elements convey different meaning in different cultures. For example, in America, the red color in the stock market indicates a decline, while in China the same color indicates a rise. A thumbs-up gesture usually expresses an approval in English-speaking country, yet the gesture can have a negative meaning in Iraq. When designing for a new market, you are encouraged to have a local consultant run an audit for your application.\n\nWhen you are designing for webpages, instead of applications, your primary goal is to advertise your products and services, and appeal to the local market. The language tone, page style, and choice of image assets are expected to be tailored for different targeted culture. Likewise, your user study and market research conclusions derived under a certain cultural background might not apply to another culture.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Design Localization and the New Web'}\n        description={'An examination of localization in web design by Bitmatica Lab.'}\n        url={`https://medium.com/bitmatica-lab/design-localization-and-the-new-web-f54f43c5f040`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n    <MaterialDesignDescription\n        title={'Localization'}\n        url={`https://developer.apple.com/localization/`}\n        description={`Apple's suggestions on designing for an international market.`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n    <MaterialDesignDescription\n        title={'Localization - Market Finder'}\n        description={'Introduction to localization by Google Market Finder.'}\n        url={`https://marketfinder.thinkwithgoogle.com/intl/en_us/topic/localisation/`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n    <MaterialDesignDescription\n        title={'Internationalization and Localization'}\n        description={'A checklist from Wikipedia.'}\n        url={`https://en.wikipedia.org/wiki/Internationalization_and_localization#Scope`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n    <Divider />\n</React.Fragment>\n\n# Developers\n\nThere are a number of available libraries to assist with implementing internationalization in your applications.\n\n## Angular\n\nFor projects that need the ability to swap between languages, we recommend using [ngx-translate](https://github.com/ngx-translate/core). As an alternative, the Angular framework has a powerful built-in [i18n tool](https://angular.io/guide/i18n) available, but it requires a separate web app be built for each supported language (e.g. an English version, a Spanish version, etc). This is ideal for larger projects that don't require in-app language switching and don't support more than a few locales.\n\n## React\n\nThere are many JS libraries available to help internationalize your applications. We recommend using [react-i18next](https://github.com/i18next/react-i18next) to manage your translations. If you are supporting right-to-left languages, you should also carefully follow the guide from [MUI](https://mui.com/material-ui/guides/right-to-left). If you are using JSS styles with MUI v5, you can follow this [RTL example](https://github.com/mui/material-ui/issues/24803#issuecomment-774686550) to fix issues with certain styles not being flipped correctly.\n\n## React Native\n\nAs with React for web, we recommend using [react-i18next](https://github.com/i18next/react-i18next) to manage your translations. If you are supporting right-to-left languages, you can make use of the [I18nManager](https://reactnative.dev/blog/2016/08/19/right-to-left-support-for-react-native-apps) from React Native.\n"},"/patterns/lists":{"title":"Lists","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\n\nimport ListBannerImage from '../../app/assets/design-patterns/lists/lists.svg';\n\n{/* Common Use Cases */}\n\nimport DashboardListImage from '../../app/assets/design-patterns/lists/dashboard-list.png';\nimport NotificationListDesktopImage from '../../app/assets/design-patterns/lists/notification-list-desktop.png';\nimport AnatomyImage from '../../app/assets/design-patterns/lists/anatomy.png';\n\n{/* Variations */}\n\nimport SimpleListImage1 from '../../app/assets/design-patterns/lists/simple-list-1.png';\nimport SimpleListImage2 from '../../app/assets/design-patterns/lists/simple-list-2.png';\nimport StatusListImage from '../../app/assets/design-patterns/lists/status-list.png';\nimport ScorecardImage from '../../app/assets/design-patterns/lists/scorecard.png';\nimport ContactsImage from '../../app/assets/design-patterns/lists/contacts.png';\nimport IconAlignImage1 from '../../app/assets/design-patterns/lists/icon-align-1.png';\nimport IconAlignImage2 from '../../app/assets/design-patterns/lists/icon-align-2.png';\nimport IconAlignImage3 from '../../app/assets/design-patterns/lists/icon-align-3.png';\nimport NotificationBucketsImage1 from '../../app/assets/design-patterns/lists/notification-buckets-1.png';\nimport NotificationBucketsImage2 from '../../app/assets/design-patterns/lists/notification-buckets-2.png';\n\n{/* Behaviors */}\n\nimport NotificationListMobileImage from '../../app/assets/design-patterns/lists/notification-list-mobile.png';\nimport DashboardListDesktopImage from '../../app/assets/design-patterns/lists/dashboard-list-desktop.png';\nimport DashboardListMobileImage from '../../app/assets/design-patterns/lists/dashboard-list-mobile.png';\nimport GlobalActionAppBarImage from '../../app/assets/design-patterns/lists/action-button-in-appbar.png';\nimport GlobalActionPanelHeaderImage from '../../app/assets/design-patterns/lists/action-button-in-panel-header.png';\nimport GlobalActionAsButtonImage from '../../app/assets/design-patterns/lists/action-button-as-button.png';\nimport SortableListImage from '../../app/assets/design-patterns/lists/sortable-list.gif';\nimport LocalListActionsImage from '../../app/assets/design-patterns/lists/local-list-actions.png';\nimport LocalListActions2Image from '../../app/assets/design-patterns/lists/local-list-actions-2.png';\nimport MultiSelectImage from '../../app/assets/design-patterns/lists/multi-select-list.png';\nimport NavigateListImage1 from '../../app/assets/design-patterns/lists/navigate-list-1.png';\nimport NavigateListImage2 from '../../app/assets/design-patterns/lists/navigate-list-2.png';\nimport HoverActionsImage from '../../app/assets/design-patterns/lists/hover-actions.gif';\n\n{/* Specs */}\n\nimport Spec1Image from '../../app/assets/design-patterns/lists/spec-1.png';\nimport Spec2Image from '../../app/assets/design-patterns/lists/spec-2.png';\nimport Spec3Image from '../../app/assets/design-patterns/lists/spec-3.png';\nimport Spec4Image from '../../app/assets/design-patterns/lists/spec-4.png';\nimport Spec5Image from '../../app/assets/design-patterns/lists/spec-5.png';\nimport SpecTypographyImage from '../../app/assets/design-patterns/lists/spec-typography.png';\n\n{/* KEYWORDS: design pattern list status sort table drag drop action data */}\n\n# Lists\n\n<ImageGrid images={[ListBannerImage]} regularWidth />\n\nLists are frequently used throughout Brightlayer UI applications. They are intended to represent groups of similar logical items, such as a device, an alarm, or a setting. They can display data from simple name-value pairs up to complex timelines or device lists.\n\n<React.Fragment>\n    <MaterialDesignDescription title={'Lists'} url={`https://m2.material.io/components/lists/`} />\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#lists' },\n            { title: 'Common Use Cases' },\n            { title: 'Variations' },\n            { title: 'Basic Lists', depth: 1 },\n            { title: 'Lists with Status', depth: 1 },\n            { title: 'Timestamps', depth: 1 },\n            { title: 'Behaviors' },\n            { title: 'Global List Actions', depth: 1 },\n            { title: 'Actions on Selected Items', depth: 1 },\n            { title: 'Local List Item Actions', depth: 1 },\n            { title: 'Responsive Design', depth: 1 },\n            { title: 'Design Specifications' },\n            { title: 'Developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Common Use Cases\n\n<ImageGrid\n    images={[NotificationListDesktopImage, DashboardListImage]}\n    caption={[\n        'Timelines and details panels are the two most common use cases for lists.',\n        '1: A timeline of notifications / alarms.',\n        '3: A details panel on a dashboard.',\n    ]}\n/>\n\nYou can use lists in many ways, including for:\n\n-   Details panels\n-   Timelines (Alarms / Notifications)\n-   Inventories / List of Devices\n-   Contacts\n-   Logs\n-   Settings\n-   File trees\n\nLists should **NOT** be used where:\n\n-   Data represents different logical items (e.g., don't mix alarms and devices in a single list)\n\nFor information about the differences between lists and tables, check out our [Tables](/patterns/tables#tables-vs.-lists) pattern.\n\n## Supporting UI Elements\n\nLists typically appear inside of a panel (mobile) or a card (desktop). Occasionally, an entire screen may use a single list as its main body content.\n\n<ImageGrid\n    images={[AnatomyImage]}\n    regularWidth\n    caption={[\n        'An example of a list embedded inside a panel.',\n        '1: Panel header and footer.',\n        '2: A global list action sits inside the panel header.',\n        '3: Additional panel content supporting the list.',\n        '4: A list item.',\n        '5: A local list action.',\n    ]}\n/>\n<Divider />\n\n# Variations\n\n## Basic Lists\n\n<ImageGrid\n    images={[SimpleListImage1, SimpleListImage2]}\n    captionsUnderImages={['A simple key-value list.', 'A key-value list with icons and subtitle.']}\n/>\n<DemoCard\n    repository={'Data List'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Fdata-list%2Fdata-list.component.ts`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/data-list/index.tsx&initialpath=/data-list`}\n    reactNative\n/>\n\nThe simplest type of list simply presents a single line (or multiple lines) of text for each element in the collection.\n\n## Lists with Status\n\n<ImageGrid\n    images={[StatusListImage]}\n    regularWidth\n    caption={`Use an icon avatar and / or a status stripe to catch people's attention.`}\n/>\n<DemoCard\n    repository={'Status List'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Fstatus-list%2Fstatus-list.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/status-list/index.tsx&initialpath=/status-list`}\n    reactNative\n/>\n\nCommonly in Brightlayer UI applications, list items also show a visual indication of an item's current status, such as online, offline, or an error condition. You can indicate this status by using avatars and status stripes with [Brightlayer UI's status color palette](/style/color#status-colors).\n\n<ImageGrid\n    images={[IconAlignImage1, IconAlignImage2, IconAlignImage3]}\n    caption={\n        'When using a list that may contain both avatars and simple icons, all icons should be center-aligned. If you are using interactive elements like checkboxes and radio buttons, they should also be center-aligned to accommodate ripples. When using only simple icons, they should be left-aligned.'\n    }\n    captionsUnderImages={['DO: ', 'DO: ', 'DONT: ']}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\nIf avatars and status stripes do not work well based on the context, such as in the body of a [scorecard component](https://brightlayer-ui-components.github.io/react/components/score-card/examples), you can color-code your list item icons and labels to indicate status. However, for accessibility concerns, you should never rely _solely_ on the color to convey the message.\n\n<ImageGrid\n    images={[ScorecardImage]}\n    regularWidth\n    caption={[\n        'A scorecard with a list in the card body.',\n        '1: In addition to changing the icon color, you can also change the icon, make label text more descriptive, and use a bolder font.',\n    ]}\n/>\n\nUsing tags is another way to display list item status. They typically appear at the very end of a list item.\n\n<ImageGrid\n    images={[ContactsImage]}\n    regularWidth\n    caption={`This user list uses two status indicators: tags and avatars' dot badges.`}\n/>\n\n## Timestamps\n\nDepending on the data being displayed, you can add additional UI elements to the list items to show more information. One of the most common such elements is a timestamp, which usually occurs in timelines or device logs. If you have a large number of items in a list with timestamps, you should group them by date to make them easier to scan.\n\n<ImageGrid\n    images={[NotificationBucketsImage1, NotificationBucketsImage2]}\n    caption={[\n        'When using a timestamp, list items may be grouped into logical buckets.',\n        '1: \"Today - Yesterday - Earlier This Week\" buckets',\n        '2: Raw date buckets. Note the dates have been taken out of the individual list items to avoid redundancy.',\n    ]}\n/>\n\n<Divider />\n\n# Behaviors\n\nLists can be interactive. In general, there are two types of actions: global list actions and local list item actions.\n\n<DemoCard\n    repository={'Action List'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Faction-list%2Faction-list.component.ts`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/action-list/index.tsx&initialpath=/action-list`}\n    reactNative\n/>\n\n## Global List Actions\n\nGlobal list actions are the actions that manipulate the entire list. The buttons typically sit in an [Appbar](/patterns/appbar), a panel header, or a button panel (desktop-only).\n\n<ImageGrid\n    images={[GlobalActionAppBarImage, GlobalActionPanelHeaderImage, GlobalActionAsButtonImage]}\n    captionsUnderImages={[\n        `1: Global actions in the Appbar.`,\n        '2: Global actions in the panel header.',\n        '3: Global actions in its own button panel.',\n    ]}\n/>\n\nCommon global list actions include:\n\n-   Adding a new list item\n-   Sorting and filtering the list\n-   Toggling a different view, such as a grid view\n-   Exporting or downloading the list data\n\n<DemoCard\n    repository={'Global Action List In Button Panel'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Finline-button-panel%2Finline-button-panel.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/action-list/action-list-button-panel/index.tsx&initialpath=/action-list-button-panel`}\n    reactNative\n/>\n<DemoCard\n    repository={'Global Action List In Panel Header'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Fin-panel-header%2Fin-panel-header.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/action-list/action-list-panel-header/index.tsx&initialpath=/action-list-panel-header`}\n    reactNative\n/>\n\n### Drag and Drop\n\n<React.Fragment>\n    <ImageGrid images={[SortableListImage]} regularWidth />\n    <DemoCard\n        repository={'Sortable List'}\n        angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Fsortable-list%2Fsortable-list.component.ts`}\n        react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/sortable-list/index.tsx&initialpath=/sortable-list`}\n        reactNative\n    />\n</React.Fragment>\n\nDrag and drop is a special case for list sorting. It re-orders the items in a list manually. This should be accomplished by placing a drag handle as the leftmost element in the row, and pushing all the list item content to its right. In most cases, the ability to re-order the list should be locked behind an Edit Mode toggle mechanism.\n\n## Actions on Selected Items\n\n<React.Fragment>\n    <ImageGrid images={[MultiSelectImage]} regularWidth caption={`A multi-select list on a mobile device.`} />\n    <DemoCard\n        repository={'Multi-select List'}\n        angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Fmultiselect-list%2Fmultiselect-list.component.ts`}\n        react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/multiselect-list/index.tsx&initialpath=multiselect-list`}\n        reactNative\n    />\n</React.Fragment>\n\nYou may want to take action on several list items at once, but not all. The easiest way to do this is through a multi-select list. You may optionally add a highlight color for the selected items.\n\n## Local List Item Actions\n\n<ImageGrid\n    images={[LocalListActionsImage, LocalListActions2Image]}\n    caption={[\n        '1: A 3-dot icon, used to open a menu for more list actions.',\n        '2: A chevron, usually indicates the entire list item is clickable and opens up a new page with list item details.',\n        '3: A few icons that serve as list action buttons.',\n        '4: An inline checkbox to toggle a status.',\n        '5: An inline toggle switch.',\n        '6: An inline dropdown field.',\n        '7: An inline radio button group.',\n    ]}\n/>\n\n<DemoCard\n    repository={'Inline Actions'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Finline-actions%2Finline-actions.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/action-list/action-list-inline/index.tsx&initialpath=/action-list-inline`}\n    reactNative\n/>\n\n<DemoCard\n    repository={'Local Actions'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Finline-local-actions%2Finline-local-actions.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/action-list/action-list-local-actions/index.tsx&initialpath=/action-list-local-actions`}\n    reactNative\n/>\n\nIf there are actions that you need to perform on individual list items, you may add icon buttons or an action menu. If you have three or fewer actions, they can be represented by individual icon buttons. If there are more than three, you should move them into an action menu.\n\n> If your entire list item is clickable, you should not include local list actions, as the two interactions can interfere with one another.\n\n### Actions on Hover\n\nOn desktop applications, you may use hover events to display applicable list actions. Hover list actions can save space, leaving more room for displaying static information.\n\n<ImageGrid\n    images={[HoverActionsImage]}\n    caption={\n        'Hover actions can save room on desktop applications and allow you to avoid repeated columns of action buttons, but the nature of hover prevents this pattern from being used on touch screen devices.'\n    }\n    regularWidth\n/>\n\n### Navigating Down a Tree Structure\n\n<ImageGrid\n    images={[NavigateListImage1, NavigateListImage2]}\n    captionsUnderImages={['1: A list used for separated pages.', '2: A list displaying a folder structure.']}\n/>\n\n<DemoCard\n    repository={'List as a Tree Structure'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Flist%2Ftree%2Ftree.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/lists/tree-structure-list/index.tsx&initialpath=/tree-structure-list`}\n    reactNative\n/>\n\nLists can be used to navigate a tree-like structure in an application. See [the navigation pattern](/patterns/navigation).\n\n## Responsive Design\n\n<ImageGrid\n    images={[\n        NotificationListDesktopImage,\n        NotificationListMobileImage,\n        DashboardListDesktopImage,\n        DashboardListMobileImage,\n    ]}\n    caption={'List items should be designed to work on both desktop (1 & 3) and mobile (2 & 4).'}\n/>\n\nWhen it comes to responsive design and progressive disclosure, it can be tricky to fit all the information from a list onto a smaller screen. Here are some best practices on designing for mobile:\n\n-   Remove less critical information from lists on mobile.\n-   Use summary cards with a \"view more\" option to view the full data.\n-   Use gestures (e.g., long-press, swipe-left) that align with the target device's native behavior.\n\n<Divider />\n\n# Design Specifications\n\n<ImageGrid images={[Spec1Image, Spec2Image, Spec3Image, Spec4Image, Spec5Image, SpecTypographyImage]} regularWidth />\n<MaterialDesignDescription\n    title={'Lists'}\n    description={`For additional instructions, refer to Material Design's design specs.`}\n    url={`https://m2.material.io/components/lists#specs`}\n/>\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular**:\n\n-   Angular Material\n    -   [List](https://material.angular.io/components/list/overview)\n    -   [Info List Item](https://brightlayer-ui-components.github.io/angular/components/info-list-item/examples)\n    -   [List Item Tag](https://brightlayer-ui-components.github.io/angular/components/list-item-tag/examples)\n\n> In Angular, the CDK (Component Developer's Kit) version 7+ is required to use the drag-and-drop feature.\n\n**React**:\n\n-   MUI\n    -   [List](https://mui.com/material-ui/api/list/)\n    -   [List Item](https://mui.com/material-ui/api/list-item/)\n-   @brightlayer-ui/angular-components\n    -   [Info List Item](https://brightlayer-ui-components.github.io/react/components/info-list-item/examples)\n    -   [List Item Tag](https://brightlayer-ui-components.github.io/react/components/list-item-tag/examples)\n\n**React Native**:\n\n-   React-Native\n    -   [Flat List](https://reactnative.dev/docs/using-a-listview)\n-   React Native Paper\n    -   [List Item](https://callstack.github.io/react-native-paper/docs/components/List/ListItem)\n-   @brightlayer-ui/react-native-components\n    -   [Info List Item](https://brightlayer-ui-components.github.io/react-native/?path=/info/components-documentation--info-list-item)\n    -   [List Item Tag](https://brightlayer-ui-components.github.io/react-native/?path=/info/components-documentation--list-item-tag)\n"},"/patterns/loading":{"title":"Loading & Waiting","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport LoadingBanner from '../../app/assets/design-patterns/loading-states/loading-banner.svg';\nimport Skeleton from '../../app/assets/design-patterns/loading-states/skeleton.gif';\nimport Wave from '../../app/assets/design-patterns/loading-states/wave.gif';\nimport Pulsate from '../../app/assets/design-patterns/loading-states/pulsate.gif';\nimport OverlaySpinner from '../../app/assets/design-patterns/loading-states/overlay-spinner.png';\nimport InlineSpinner from '../../app/assets/design-patterns/form-validation/verify-on-submit.gif';\nimport MiniSpinner from '../../app/assets/design-patterns/loading-states/mini-spinner.png';\nimport ProgressBar from '../../app/assets/design-patterns/loading-states/progress-bar.gif';\nimport Specs from '../../app/assets/design-patterns/loading-states/specs-1.png';\n\n{/* KEYWORDS: design pattern loading asynchronous api refresh */}\n\n# Loading & Waiting\n\n<ImageGrid images={[LoadingBanner]} regularWidth />\n\nOftentimes, your application will need to load data from (or send data to) a remote location with some amount of latency. When this happens, you will need to provide some indication to the user that something is happening. Different situations may call for different styles of indicator, explained below.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Progress Indicators'}\n        url={`https://m2.material.io/components/progress-indicators`}\n    />\n    <TOC\n        anchors={[\n            { title: 'Introduction' },\n            { title: 'Variations' },\n            { title: 'Skeleton', hash: '#placeholder-shapes--skeleton', depth: 1 },\n            { title: 'Spinner Overlays', depth: 1 },\n            { title: 'Contextual Spinners', depth: 1 },\n            { title: 'Progress Bars', depth: 1 },\n            { title: 'Behaviors' },\n            { title: 'Design Specifications' },\n            { title: 'Developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Variations\n\nThere are a number of different ways to indicate to a user that something is happening / loading behind the scenes. Different variations are appropriate in different situations.\n\n## Placeholder Shapes / Skeleton\n\n<ImageGrid\n    images={[Skeleton]}\n    caption={['When your application is loading structured data, use skeletons to tell your user what to expect.']}\n    regularWidth\n/>\n\nWhen loading data for the first time, you do not want to show an empty screen while you are fetching the data. Instead, you should show placeholder shapes (\"skeletons\") that mimic the data that will eventually be loaded. This will give the impression that your application is faster and gives users an indication of what kind of data is being loaded.\n\n<DemoCard\n    repository={'Skeletons'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Floading-waiting-states%2Fskeleton-loader%2Fskeleton-loader.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/loading-waiting-states/skeletons/Skeletons.tsx&initialpath=/skeletons`}\n    reactNative\n/>\n\nThe skeleton should match as closely as possible the real _structure_ of the data, using shapes like rectangles and circles. The data _length_, however, may not be available at the time of loading, and it is likely that your skeleton ended up looking slightly different from your real data. This is OK; your mission is only to set up users' expectations.\n\n<ImageGrid\n    images={[Wave, Pulsate]}\n    caption={[\n        'Skeletons are usually animated, to indicate that the application is still running and responding. There are two kinds of skeleton animations.',\n        '1: Wave, where a gradient is animated from side to side over gray shapes.',\n        '2: Pulsate, where the brightness of the gray shapes is animated periodically.',\n    ]}\n/>\n\n## Spinner Overlays\n\nSpinner overlays make use of a semi-transparent overlay with a large, centered spinner. This variation of indicators is useful when you want to block user interaction with the screen (or a section of the screen) while processing occurs.\n\n<ImageGrid\n    regularWidth\n    images={[OverlaySpinner]}\n    caption={['1: Use of overlay spinner when loading EULA.', '2. Remove the overlay once the data is loaded.']}\n/>\n\n<DemoCard\n    repository={'Spinner Overlays'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Floading-waiting-states%2Fspinner-overlays%2Fspinner-overlays.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/loading-waiting-states/spinner-overlays/index.tsx&initialpath=/spinner-overlays`}\n    reactNative\n/>\n\n## Contextual Spinners\n\nContextual spinners can be used as an alternative to spinner overlays in certain situations. The most common application of contextual spinners is during [Form](/patterns/forms) submission / verification. If you need to wait for a server response to validate inputs in a form (after clicking the submit button), you should disable the submit button and replace its label with a spinner. If the verification succeeds, the application should proceed to the next screen. If verification fails, the appropriate error messages should be displayed and the submit button label restored.\n\n<ImageGrid\n    images={[InlineSpinner]}\n    regularWidth\n    caption={[\n        'After the user clicks the submit button, the app waits for the server response, and displays an error message.',\n    ]}\n/>\n\n<DemoCard\n    repository={'Contextual Spinner'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Floading-waiting-states%2Fcontextual-spinners%2Fcontextual-spinners.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/loading-waiting-states/contextual-spinner/ContextualSpinner.tsx&initialpath=/contextual-spinner`}\n    reactNative\n/>\n\n## Progress Bars\n\n<ImageGrid\n    images={[ProgressBar]}\n    caption={'Use progress bar when the progress is measurable, such as when the user is uploading a known-sized file.'}\n/>\n\nProgress bars should be used sparingly in your application. They should only be used in situations where progress is discrete / measurable. For example, it could be used to indicate progress when uploading a file to a server.\n\n<DemoCard\n    repository={'Progress Bar'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Floading-waiting-states%2Fprogress-bars%2Fprogress-bars.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/loading-waiting-states/progress-bar/index.tsx&initialpath=/progress-bar`}\n    reactNative\n/>\n\n<DemoCard\n    repository={'Indeterminate Progress Bar'}\n    angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns/tree/master?file=src%2Fapp%2Fpages%2Floading-waiting-states%2Fprogress-bar-indeterminate%2Fprogress-bar-indeterminate.component.html`}\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/loading-waiting-states/progress-bar-indeterminate/index.tsx&initialpath=/progress-bar-indeterminate`}\n    reactNative\n/>\n\n<Divider />\n\n# Behaviors\n\n## Real-time Data (Polling / Pub-Sub)\n\nIf you are showing real-time data (either via polling or a push mechanism from the server), there is no need to show loading indicators. If you wish, you can display a small indicator when data is being refreshed or mention somewhere on the screen when the data was last refreshed so users can identify if the data is stale. You should avoid showing a loading indicator if your data is refreshed more than once per minute.\n\n<ImageGrid\n    regularWidth\n    images={[MiniSpinner]}\n    caption={'You can place a small loading icon in the header when data is updating.'}\n/>\n\n## Manual Refresh\n\nIf your users can manually refresh data on the screen, you may wish to show the placeholder elements (as with initial load), or simply refresh the data behind the scenes without indication (as with real-time). Ultimately, this should depend on how long it takes to refresh the data - if it takes more than one second to load the data, you should use an indicator.\n\n<Divider />\n\n# Design Specifications\n\nContext plays an important role in sizing your indicators. If you are using them in a small container, you may need to scale down from the recommended size.\n\n<React.Fragment>\n    <ImageGrid\n        regularWidth\n        images={[Specs]}\n        caption={[\n            '1. Overlay spinners should default to size 96.',\n            '2. Contextual button spinners should use size 20.',\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Developers\n\n## Placeholder Shapes / Skeleton\n\nThere are a number of libraries available to help you create placeholder shapes, such as:\n\n**Angular**:\n\n-   [@netbasal/ngx-content-loader](https://www.npmjs.com/package/@netbasal/ngx-content-loader)\n-   [placeholder-loading](https://www.npmjs.com/package/placeholder-loading)\n\n**React**:\n\n-   [placeholder-loading](https://www.npmjs.com/package/placeholder-loading)\n-   [react-content-loader](https://www.npmjs.com/package/react-content-loader)\n-   [@mui/material/Skeleton](https://mui.com/material-ui/api/skeleton/)\n\n**React Native**:\n\n-   [rn-placeholder](https://www.npmjs.com/package/rn-placeholder)\n\n## Progress Indicators\n\nAdditionally, you should use the following progress / spinner components:\n\n**Angular** - Angular Material:\n\n-   [Progress Spinner](https://material.angular.io/components/progress-spinner/overview)\n-   [Progress Bar](https://material.angular.io/components/progress-bar/overview)\n\n**React** - MUI:\n\n-   [Circular Progress](https://mui.com/material-ui/react-progress/#circular)\n-   [Linear Progress](https://mui.com/material-ui/react-progress/#linear)\n\n**React Native** - React Native Paper:\n\n-   [Activity Indicator](https://callstack.github.io/react-native-paper/docs/components/ActivityIndicator)\n-   [Progress Bar](https://callstack.github.io/react-native-paper/docs/components/ProgressBar)\n"},"/patterns/navigation":{"title":"Navigation","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport PermanentImg from '../../app/assets/design-patterns/navigation/navigation-permanent.png';\nimport PersistentImg from '../../app/assets/design-patterns/navigation/navigation-persistent.png';\nimport AnatomyImg from '../../app/assets/design-patterns/navigation/anatomy.png';\nimport Banner from '../../app/assets/design-patterns/navigation/navigation.svg';\nimport CollapsibleImg from '../../app/assets/design-patterns/navigation/collapsible.png';\nimport ContentCoverImg from '../../app/assets/design-patterns/navigation/content-cover.png';\nimport ContentResizeImg from '../../app/assets/design-patterns/navigation/content-resize.png';\nimport NavigationPermanentImg from '../../app/assets/design-patterns/navigation/navigation-permanent.png';\nimport NavigationPersistentImg from '../../app/assets/design-patterns/navigation/navigation-persistent.png';\nimport NavigationRailLabeledImg from '../../app/assets/design-patterns/navigation/navigation-rail-labeled.png';\nimport NavigationRailSpecsImg from '../../app/assets/design-patterns/navigation/navigation-rail-specs.png';\nimport NavigationRailImg from '../../app/assets/design-patterns/navigation/navigation-rail.png';\nimport NavigationRailLabelsImg from '../../app/assets/design-patterns/navigation/navigation-rail-labels.png';\nimport NavigationTemporaryImg from '../../app/assets/design-patterns/navigation/navigation-temporary.png';\nimport NestedItemStandardsImg from '../../app/assets/design-patterns/navigation/nested-item-standard.png';\nimport NavigationTabsImg from '../../app/assets/design-patterns/navigation/navigation-tabs.png';\nimport NavigationTabsSpecsImg from '../../app/assets/design-patterns/navigation/navigation-tabs-specs.png';\nimport BottomTabsSpecsImg from '../../app/assets/design-patterns/navigation/bottom-tabs-specs.png';\nimport NavigationBreakdownImg from '../../app/assets/design-patterns/navigation/navigation-breakdown.png';\nimport NestedItemImg from '../../app/assets/design-patterns/navigation/nested-item.png';\nimport PanelSpecsMobileImg from '../../app/assets/design-patterns/navigation/panel-specs-mobile.png';\nimport PanelSpecsDesktopImg from '../../app/assets/design-patterns/navigation/panel-specs-desktop.png';\nimport HoverImg from '../../app/assets/design-patterns/navigation/persistent-drawer-hover.gif';\nimport NavigationBottomImg from '../../app/assets/design-patterns/navigation/navigation-bottom.png';\nimport NavigationBottomWithDrawerImg from '../../app/assets/design-patterns/navigation/navigation-bottom-with-drawer.png';\nimport DividerGroupImage from '../../app/assets/design-patterns/navigation/drawer-divider.png';\nimport DividerDoImage from '../../app/assets/design-patterns/navigation/divider-do.png';\nimport DividerDontImage from '../../app/assets/design-patterns/navigation/divider-dont.png';\nimport SafeArea1Image from '../../app/assets/design-patterns/navigation/safe-area-1.png';\nimport SafeArea2Image from '../../app/assets/design-patterns/navigation/safe-area-2.png';\nimport CombinedDrawerImage from '../../app/assets/design-patterns/navigation/combined-drawer.png';\nimport PersistentDrawerPitfallImg from '../../app/assets/design-patterns/navigation/persistent-drawer-pitfall.gif';\nimport ActiveRegular from '../../app/assets/design-patterns/navigation/active-regular.png';\nimport ActiveRound from '../../app/assets/design-patterns/navigation/active-round.png';\nimport ActiveParent from '../../app/assets/design-patterns/navigation/active-parent.png';\nimport ActiveSolid from '../../app/assets/design-patterns/navigation/active-solid.png';\n\n{/* KEYWORDS: design pattern navigation drawer menu tab tabs navigate nav */}\n\n# Navigation\n\n<ImageGrid images={[Banner]} regularWidth />\n\nNavigation refers to how users access the different areas of your application and move from screen to screen. The most common forms of primary navigation are drawers and tabs.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Understanding Navigation'}\n        url={`https://m2.material.io/design/navigation/understanding-navigation.html#types-of-navigation`}\n        description={`Read about Material Design's navigation fundamentals.`}\n    />\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#navigation' },\n            { title: 'Drawer Navigation' },\n            { title: 'Permanent', depth: 1 },\n            { title: 'Rail', depth: 1 },\n            { title: 'Persistent', depth: 1 },\n            { title: 'Temporary', depth: 1 },\n            { title: 'Tab Navigation' },\n            { title: 'Behaviors' },\n            { title: 'Nested Navigation', depth: 1 },\n            { title: 'Content-Cover vs. Content-Resize', depth: 1 },\n            { title: 'Active State', depth: 1 },\n            { title: 'Dividers', depth: 1 },\n            { title: 'Safe Area', depth: 1 },\n            { title: 'Design Specifications' },\n            { title: 'Developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Drawer Navigation\n\nA navigation drawer is a panel that is attached to the side of your application. These typically contain a [List](/patterns/lists) of primary pages in your application for the user to access quickly.\n\n<ImageGrid\n    images={[NavigationBreakdownImg]}\n    caption={['1. Header', '2. Subheader', '3. Body', '4. Footer']}\n    regularWidth\n/>\n\nMost drawers have four main sections:\n\n-   **Header**: typically contains the name of the company, name of the product, or a logo\n-   **Subheader**: an optional section that can be used to support custom content, such as filtering or search\n-   **Body**: contains a list of primary pages that users can navigate to\n-   **Footer**: usually contains the company logo, version number, and trademark information\n\nThere are several different styles of drawer navigation, each with slightly different behavior.\n\n<MaterialDesignDescription\n    title={'Navigation Drawer '}\n    url={`https://m2.material.io/components/navigation-drawer/`}\n    style={{ marginRight: 0 }}\n/>\n\n## Permanent\n\nA permanent drawer is always visible and always open. The permanent drawer is typically full-width, as opposed to the rail variant (see below). Use this variation if you have:\n\n-   five or more top-level pages\n-   a nested navigation hierarchy\n-   enough space to justify it (typically desktop-only applications)\n\n<ImageGrid images={[NavigationPermanentImg]} caption={['A permanent drawer on desktop.']} regularWidth />\n\n## Rail\n\nA navigation rail is a permanently collapsed drawer. The rail shows less information than a standard drawer but has the advantage of a more compact, space-saving appearance. Use this variation if you have:\n\n-   fewer than seven top-level pages\n-   a flat navigation hierarchy\n-   limited space - recommended for HMI devices\n\nThe navigation rail can be regular (with text labels) or condensed (smaller area without labels).\n\n<ImageGrid images={[NavigationRailImg]} caption={['Condensed Rail on desktop.']} regularWidth />\n<ImageGrid images={[NavigationRailLabelsImg]} caption={['Standard rail with labels on desktop.']} regularWidth />\n\n## Persistent\n\nA persistent drawer is an always-visible drawer that can be opened and closed (expanded or collapsed). In its open state, it looks and behaves like a permanent drawer. In its closed state, it looks and behaves like a navigation rail. The drawer is typically opened and closed by clicking an icon in the header. It can also be opened momentarily on desktop applications by hovering with the mouse. Use this variation if you have:\n\n-   fewer than seven top-level pages\n-   primary pages with complex icons or icons with long labels that wouldn't fit in a navigation rail\n-   limited space but require a nested navigation hierarchy\n\n<React.Fragment>\n    <ImageGrid\n        images={[CollapsibleImg]}\n        caption={['1. Displays the normal collapsed state of the menu.', '2. Displays the open state of the menu.']}\n        regularWidth\n    />\n    <ImageGrid\n        images={[HoverImg]}\n        caption={\n            'When the user hovers on the Navigation Rail, the side navigation will expand temporarily, revealing the text details of each navigation item; when the user moves their cursor away, the whole side navigation panel collapses.'\n        }\n        regularWidth\n    />\n    <ImageGrid\n        images={[PersistentDrawerPitfallImg, CombinedDrawerImage]}\n        caption={[\n            `When using a persistent drawer with navigation group titles (where it says \"GROUP 1\" and \"GROUP 2\" in the image), the titles become blank spaces by default when the drawer collapses.`,\n            `If you prefer a look without these spaces, you can conditionally hide the title when the drawer collapses or use different drawer variants at different view ports. For example, you can use a permanent drawer on desktop screens (#1) and switch to a persistent drawer without header text or a navigation rail on tablets (#2).`,\n        ]}\n    />\n</React.Fragment>\n\n## Temporary\n\nA temporary drawer is invisible until it is opened — typically by pressing a button in the [App Bar](/patterns/appbar). This variation of the drawer appears on top of the main navigation, typically using a dark overlay to block interaction with the main content. Use this variation if you have:\n\n-   a mobile application\n-   extreme space limitations\n\n<React.Fragment>\n    <ImageGrid images={[NavigationTemporaryImg]} caption={'Opened temporary drawer with overlay.'} regularWidth />\n    <Divider />\n</React.Fragment>\n\n# Tab Navigation\n\nTab navigation uses a horizontal bar with buttons for each navigation location. These can appear at the top or bottom of your application.\n\n## Tabs on the Top\n\n<ImageGrid\n    images={[NavigationTabsImg]}\n    caption={['A rail menu (#1) combined with a tab navigation (#2) to show sub-pages within the settings page.']}\n    regularWidth\n/>\n<MaterialDesignDescription title={'Tabs'} url={`https://m2.material.io/components/tabs`} />\n\nYou can combine tabs and a drawer as a way to navigate between sub-pages (e.g., you may have several sub-pages on your main settings page). In this case, the tabs usually sit on a secondary [app bar](/patterns/appbar).\n\n## Tabs on the Bottom\n\n<ImageGrid\n    images={[NavigationBottomImg]}\n    caption={[\n        'Bottom tabs can be a good substitute for drawers when you have less than six primary navigation routes.',\n    ]}\n    regularWidth\n/>\n<MaterialDesignDescription title={'Bottom Navigation'} url={`https://m2.material.io/components/bottom-navigation`} />\n\nFor mobile and tablet applications, you may use bottom tabs to replace the classic drawer. Bottom tabs are a quick and easy way to navigate to the most frequently used primary navigation routes.\n\nBottom tabs can also be used in combination with a drawer. The tabs are more prominent and can be used to highlight some main routes and features, while the drawer handles the less important routes like settings, legal documents, FAQ pages.\n\n<React.Fragment>\n    <ImageGrid\n        images={[NavigationBottomWithDrawerImg]}\n        caption={[\n            '1. Menu button activates a temporary content-cover menu',\n            '2. Bottom tab navigation makes the primary pages more prominent.',\n        ]}\n        regularWidth\n    />\n    <Divider />\n</React.Fragment>\n\n# Behaviors\n\n## Nested Navigation\n\nWhen using drawer navigation, you can have multiple levels of the navigation hierarchy. These appear as expandable panels in the drawer. When using hierarchical navigation in the drawer, you should try to limit yourself to no more than two levels.\n\n<ImageGrid images={[NestedItemImg]} caption={'Open and closed nested navigation.'} regularWidth />\n\n## Content-Cover vs. Content-Resize\n\nWhen a drawer is opened, there are two ways to deal with the main application content.\n\nWith content-resize, the main application content resizes its area to accommodate the expanded drawer. This is the default behavior for most drawer variations.\n\nWith content-cover, the navigation panel appears on top of the main application content, partially obscuring it. This typically uses a dark overlay behind the drawer to direct the user's focus to the navigation panel and block interaction with the main content. This pattern is most common when using the temporary drawer variant on mobile and tablet applications.\n\n<React.Fragment>\n    <ImageGrid\n        images={[ContentCoverImg]}\n        caption={[\n            '1. Displays the normal collapsed state of the menu.',\n            '2. Displays the open state of the menu with a gray overlay.',\n        ]}\n        regularWidth\n    />\n    <ImageGrid\n        images={[ContentResizeImg]}\n        caption={[\n            '1. Displays the normal collapsed state of the menu.',\n            '2. Displays the open state of the menu with content pushed to the right.',\n        ]}\n        regularWidth\n    />\n</React.Fragment>\n\n## Active State\n\nThere are many different ways to indicate that a menu item is active / selected in a drawer.\n\n<ImageGrid\n    images={[ActiveRegular, ActiveRound, ActiveParent, ActiveSolid]}\n    captionsUnderImages={[\n        'DO: By default, an active item is indicated by a rectangular background shade.',\n        'Optionally, use a rounded background shade instead.',\n        'DO: When a child item is active, its parent item should have a bolder font weight.',\n        'Optionally, change the icon from \"outlined\" to \"filled\" when a menu item turns active.',\n    ]}\n/>\n\n## Dividers\n\nDivider lines can be used between navigation items in the drawer. They are most effective when used for:\n\n-   separating nested drawer items\n-   separating sections of the drawer contents\n\n<React.Fragment>\n    <ImageGrid\n        images={[DividerGroupImage]}\n        regularWidth\n        caption={['Dividers can be used to separate different sections of the drawer contents.']}\n    />\n    <ImageGrid\n        images={[DividerDoImage, DividerDontImage]}\n        captionsUnderImages={[\n            'DO: Standard drawer navigation does not include dividers.',\n            'AVOID: Avoid using divider lines between every navigation item. These can make the drawer appear busy.',\n        ]}\n    />\n</React.Fragment>\n\n## Safe Area\n\nWhen designing for mobile screens, in particular for a iPhone X model, ensure that your contents lay inside the safe area.\n\n<ImageGrid\n    images={[SafeArea1Image, SafeArea2Image]}\n    caption={['Contents must be inside the safe area.']}\n    captionsUnderImages={['DONT: ', 'DO: ']}\n/>\n<Divider />\n\n# Design Specifications\n\n## Mobile\n\n<ImageGrid\n    images={[\n        PanelSpecsMobileImg,\n        NestedItemStandardsImg,\n        NavigationRailSpecsImg,\n        NavigationRailLabeledImg,\n        NavigationTabsSpecsImg,\n        BottomTabsSpecsImg,\n    ]}\n    regularWidth\n/>\n\n## Desktop and Tablet\n\nIf certain dimensions are not specified, refer to the dimensions suggested in the mobile section above.\n\n<React.Fragment>\n    <ImageGrid images={[PanelSpecsDesktopImg]} regularWidth />\n    <MaterialDesignDescription\n        title={'Navigation Drawer'}\n        description={`For additional instructions, refer to Material Design's design specs`}\n        url={`https://m2.material.io/components/navigation-drawer#specs`}\n    />\n    <MaterialDesignDescription\n        title={'Navigation Rail'}\n        description={`For additional instructions, refer to Material Design's design specs`}\n        url={`https://m2.material.io/components/navigation-rail#specs`}\n    />\n    <MaterialDesignDescription\n        title={'Tabs'}\n        description={`For additional instructions, refer to Material Design's design specs`}\n        url={`https://m2.material.io/components/tabs#specs`}\n    />\n    <MaterialDesignDescription\n        title={'Bottom Navigation'}\n        description={`For additional instructions, refer to Material Design's design specs`}\n        url={`https://m2.material.io/components/bottom-navigation#specs`}\n    />\n</React.Fragment>\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular**:\n\n-   Angular Material\n    -   [Side Nav](https://material.angular.io/components/sidenav/overview)\n    -   [Tabs](https://material.angular.io/components/tabs/overview)\n-   @brightlayer-ui/angular-components\n    -   [Drawer](https://brightlayer-ui-components.github.io/angular/components/drawer/examples)\n\n**React**:\n\n-   MUI\n    -   [Drawer](https://mui.com/components/drawers/)\n    -   [Tabs](https://mui.com//material-ui/react-tabs/)\n-   @brightlayer-ui/react-components\n    -   [Drawer](https://brightlayer-ui-components.github.io/react/components/drawer/examples)\n\n**React Native**:\n\n-   @brightlayer-ui/react-native-components\n    -   [Drawer](https://brightlayer-ui-components.github.io/react-native/?path=/info/components-documentation--drawer)\n"},"/patterns/overlay":{"title":"Overlays","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport PxblueSmallAltIcon from '@brightlayer-ui/icons-mui/PxblueSmallAlt';\n\nimport Banner from '../../app/assets/design-patterns/overlays/overlay-banner.svg';\nimport SimpleDialog from '../../app/assets/design-patterns/overlays/simple-dialog.png';\nimport DialogText1 from '../../app/assets/design-patterns/overlays/dialog-box-1.svg';\nimport DialogText2 from '../../app/assets/design-patterns/overlays/dialog-box-2.svg';\nimport DialogText3 from '../../app/assets/design-patterns/overlays/dialog-box-3.svg';\nimport DialogText4 from '../../app/assets/design-patterns/overlays/dialog-box-4.svg';\nimport DialogText5 from '../../app/assets/design-patterns/overlays/dialog-box-5.svg';\nimport DialogText6 from '../../app/assets/design-patterns/overlays/dialog-box-6.svg';\nimport DialogTask from '../../app/assets/design-patterns/overlays/dialog-task.png';\nimport ModalBottomSheetMobile from '../../app/assets/design-patterns/overlays/modal-bottom-sheet-mobile.png';\nimport ModalBottomSheetDesktop from '../../app/assets/design-patterns/overlays/modal-bottom-sheet-desktop.png';\nimport Maps from '../../app/assets/design-patterns/overlays/bottomsheet-styles.png';\nimport SidePanel from '../../app/assets/design-patterns/overlays/desktop-user-details.png';\nimport TrendLegend from '../../app/assets/design-patterns/overlays/desktop-trend-legend.png';\n\nimport Specs1 from '../../app/assets/design-patterns/overlays/specs-dialog-1.png';\nimport Specs2 from '../../app/assets/design-patterns/overlays/specs-dialog-2.png';\nimport Specs3 from '../../app/assets/design-patterns/overlays/spec-bottomsheet-size.png';\nimport Specs4 from '../../app/assets/design-patterns/overlays/spec-bottomsheet-typography.png';\n\n{/* KEYWORDS: design pattern overlay modal sidebar popup dialog side sheet */}\n\n# Overlays\n\n<ImageGrid images={[Banner]} regularWidth />\n\nOverlays are content that appears on top of other content. They can be used to display information, or capture it.\n\n<React.Fragment>\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#overlays' },\n            { title: 'Common Use Cases' },\n            { title: 'Variations' },\n            { title: 'Modal Dialog', depth: 1 },\n            { title: 'Sidebar', depth: 1 },\n            { title: 'Bottom Sheet', depth: 1 },\n            { title: 'Design Specifications' },\n            { title: 'Developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Common Use Cases\n\nOverlays are useful in a variety of situations. They can be used to supplement the information found in your primary content or to capture input from a user. For example, they can be used to present a confirmation dialog, details about a selected item, or actions that can be taken on a page.\n\nThe most common overlays in Brightlayer UI applications are:\n\n-   Confirmation dialogs\n-   Information sidebars\n-   Navigation menus\n-   Add / Edit dialogs\n\n<Divider />\n\n# Variations\n\nOverlay elements come in a variety of shapes and sizes depending on their purpose and can be either blocking (i.e., the user must interact with the overlay before they can do anything else) or non-blocking.\n\n## Modal Dialog\n\n<React.Fragment>\n    <ImageGrid\n        regularWidth\n        images={[SimpleDialog]}\n        caption={'A typical use case for a modal dialog — session expiration warning.'}\n    />\n    <MaterialDesignDescription title={'Dialogs'} url={`https://m2.material.io/components/dialogs/`} />\n</React.Fragment>\n\nThe modal dialog appears in the center of the screen in front of the primary content. They present critical information to users or ask them to make a decision, such as confirming the deletion of an item.\n\nSimple modals should have a title, a descriptive message, and action buttons for users to respond to the prompt or dismiss the dialog. These modals should be no larger than is necessary to contain their contents.\n\n<ImageGrid\n    images={[DialogText1, DialogText2, DialogText3, DialogText4, DialogText5, DialogText6]}\n    captionsUnderImages={[\n        'DONT: Do not use \"filled\" button styles that would make users more likely to select destructive actions.',\n        'DONT: Do not leave important details in the body text / description. Put them in the dialog title instead.',\n        'DONT: Do not use vague or generic dialog titles. “Alert!” does not match with the “Yes” or “No” actions. You must make the actions logically relate to the question being asked.',\n        'AVOID: Avoid using wordy language like “are you sure you want to” or “execute the delete operation.”',\n        'DO: Keep your message concise and easy to read.',\n        'DO: If possible, offer people non-destructive options.',\n    ]}\n/>\n\nModals are also great for presenting single-screen tasks to user, such as changing a password.\n\n<ImageGrid\n    regularWidth\n    images={[DialogTask]}\n    caption={[\n        'A modal dialog can present a single-screen workflow, such as changing a password.',\n        '1. On desktop, this can be presented as a modal.',\n        '2. In mobile applications, modal dialogs should be used primarily for notifications and confirmations. Single-screen tasks or workflows are better presented as separate screens or full-screen bottom sheets.',\n    ]}\n/>\n<MaterialDesignDescription\n    title={'Forms'}\n    url={'/patterns/forms'}\n    description={`When using form content in an overlay, be sure to follow Brightlayer UI's guidelines for forms.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n\nModal dialogs are always blocking — they must be dismissed before the user can interact with the rest of the application content, typically by clicking a dismiss / close button or by clicking elsewhere on the screen.\n\n> If you are collecting a lot of information, it may be better to move this form to a separate page in your application rather than trying to place too much content into a modal.\n\n## Sidebar\n\n<React.Fragment>\n    <ImageGrid\n        regularWidth\n        images={[SidePanel]}\n        caption={'Sidebars can be used to show additional information about a selected item.'}\n    />\n    <MaterialDesignDescription title={'Sheets: Side'} url={`https://m2.material.io/components/sheets-side`} />\n</React.Fragment>\n\nSidebars (Side Sheets in the Material documentation) are used to present supplemental information to users. Most commonly, they display information about a selected item in the main interface (e.g., selecting an item in a list would open a sidebar on the right with additional details about the selected item). However, they can also be used as permanent UI elements, such as the legend for a chart or map.\n\n<ImageGrid regularWidth images={[TrendLegend]} caption={'A permanent sidebar can be used for chart / map legends.'} />\n\nThey can also present simple form data and inputs, such as radio buttons, checkbox, dropdown menus, etc. for editing a selected item. This type of sidebar should be dismissible, such that the user can easily close it with a close button or clicking elsewhere on the screen.\n\nSidebars should always appear on the opposite side of the screen as the main [navigation](/patterns/navigation).\n\n> In general, modals should be used when creating new data, and sidebars should be used for viewing and editing existing data.\n\n## Bottom Sheet\n\n<MaterialDesignDescription title={'Sheets: Bottom'} url={`https://m2.material.io/components/sheets-bottom/`} />\n\nBottom sheets are content surfaces that slide in from the bottom of the screen, primarily used in mobile applications. These typically contain a list of options or actions and are usually activated via an action button in the [app bar](/patterns/appbar).\n\nThere are three types of bottom sheet: **Standard**, **Modal**, and **Expandable**.\n\n<React.Fragment>\n    <ImageGrid\n        regularWidth\n        images={[Maps]}\n        caption={[\n            '1. Standard bottom sheet opens over the main content, but does not block interaction.',\n            '2. Modal bottom sheet (most common) blocks interaction with the main content until it is dismissed or an action is selected.',\n            '3. Expandable bottom sheet (mobile only) can be swiped / dragged to expand or collapse, revealing additional content or transitioning to a full screen view.',\n        ]}\n    />\n</React.Fragment>\n\n<React.Fragment>\n    <ImageGrid\n        images={[ModalBottomSheetMobile, ModalBottomSheetDesktop]}\n        captionsUnderImages={[\n            'On mobile, the modal bottom sheet takes up the full width of the screen.',\n            'On desktop, bottom sheets can usually be replaced by a contextual menu instead.',\n        ]}\n    />\n</React.Fragment>\n\n<React.Fragment>\n    <DemoCard\n        repository={'bottomsheet'}\n        angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns?file=src%2Fapp%2Fpages%2Foverlays%2Fbasic-bottom-sheet%2Fbasic-bottom-sheet.component.ts`}\n        react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/overlays/basic-bottom-sheet/index.tsx&initialpath=/basic-bottom-sheet`}\n        reactNative\n    />\n    <DemoCard\n        repository={'complex-bottomsheet'}\n        angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns?file=src%2Fapp%2Fpages%2Foverlays%2Fcomplex-bottom-sheet%2Fcomplex-bottom-sheet.component.ts`}\n        react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/overlays/complex-bottom-sheet/index.tsx&initialpath=/complex-bottom-sheet`}\n        reactNative\n    />\n    <MaterialDesignDescription\n        title={'Lists'}\n        url={'/patterns/lists'}\n        description={`When using lists in an overlay / bottom sheet, be sure to follow Brightlayer UI's guidelines for lists.`}\n        avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n    />\n    <Divider />\n</React.Fragment>\n\n# Design Specifications\n\n## Dialog\n\n<ImageGrid regularWidth images={[Specs1, Specs2]} />\n\n## Bottom Sheet\n\n<ImageGrid regularWidth images={[Specs3, Specs4]} />\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular**:\n\n-   Angular Material\n    -   [Dialog](https://material.angular.io/components/dialog/overview)\n    -   [Bottom Sheet](https://material.angular.io/components/bottom-sheet/overview)\n    -   [Sidenav](https://material.angular.io/components/sidenav/overview)\n\n**React**:\n\n-   MUI\n    -   [Drawer](https://mui.com/material-ui/react-drawer/)\n    -   [Dialog](https://mui.com/material-ui/react-dialog/)\n\n**React Native**:\n\n-   React Native Paper\n    -   [Dialog](https://callstack.github.io/react-native-paper/docs/components/Dialog/)\n    -   [Modal](https://callstack.github.io/react-native-paper/docs/components/Modal)\n-   [React Native Modal](https://github.com/react-native-community/react-native-modal)\n-   [React Native Bottom Sheet](https://gorhom.github.io/react-native-bottom-sheet/)\n"},"/patterns/tables":{"title":"Tables","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\n\nimport BannerImage from '../../app/assets/design-patterns/tables/tables.svg';\nimport StandardTable from '../../app/assets/design-patterns/tables/standard-table.png';\n\n{/* Behaviors */}\n\nimport TableCellText from '../../app/assets/design-patterns/tables/table-cell-text.png';\nimport TableCellNumber from '../../app/assets/design-patterns/tables/table-cell-number.png';\nimport TableCellTextField from '../../app/assets/design-patterns/tables/table-cell-text-field.png';\nimport TableCellSwitch from '../../app/assets/design-patterns/tables/table-cell-switch.png';\nimport TableCellStatus from '../../app/assets/design-patterns/tables/table-cell-status.png';\nimport TableCellIcon from '../../app/assets/design-patterns/tables/table-cell-icon.png';\nimport TableCellMultiSelect from '../../app/assets/design-patterns/tables/table-cell-multi-select.png';\nimport TableCellStripe from '../../app/assets/design-patterns/tables/table-cell-stripe.png';\nimport TableCellUnderlinedField from '../../app/assets/design-patterns/tables/table-cell-underlined-field.png';\nimport TableCellImage from '../../app/assets/design-patterns/tables/table-cell-image.png';\nimport ActionOnHover from '../../app/assets/design-patterns/tables/action-on-hover.png';\nimport ActionAtRowEnd from '../../app/assets/design-patterns/tables/action-at-row-end.png';\nimport BatchAction1 from '../../app/assets/design-patterns/tables/batch-action-1.png';\nimport BatchAction2 from '../../app/assets/design-patterns/tables/batch-action-2.png';\nimport StickyHeader from '../../app/assets/design-patterns/tables/sticky-header.gif';\nimport HorizontalScrollBar from '../../app/assets/design-patterns/tables/horizontal-scroll-bar.png';\nimport StickyCheckbox from '../../app/assets/design-patterns/tables/sticky-checkbox.gif';\nimport StickyRowAction from '../../app/assets/design-patterns/tables/sticky-row-action.gif';\nimport ClickArea1 from '../../app/assets/design-patterns/tables/click-area-1.png';\nimport ClickArea2 from '../../app/assets/design-patterns/tables/click-area-2.png';\nimport Filter1 from '../../app/assets/design-patterns/tables/filter-1.png';\nimport Filter2 from '../../app/assets/design-patterns/tables/filter-2.png';\nimport Filter3 from '../../app/assets/design-patterns/tables/filter-3.png';\nimport Filter4 from '../../app/assets/design-patterns/tables/filter-4.png';\nimport AdvancedTableFilter from '../../app/assets/design-patterns/tables/advanced-table-filter.gif';\nimport Drag1 from '../../app/assets/design-patterns/tables/drag-1.png';\nimport Drag2 from '../../app/assets/design-patterns/tables/drag-2.png';\nimport AdditionAnimation from '../../app/assets/design-patterns/tables/addition-animation.gif';\nimport SubstractionAnimation from '../../app/assets/design-patterns/tables/substraction-animation.gif';\nimport ExpandedRow from '../../app/assets/design-patterns/tables/expanded-row.gif';\nimport ExpandedRowTooComplicated from '../../app/assets/design-patterns/tables/expanded-row-too-complicated.png';\nimport ExpandedRowActions from '../../app/assets/design-patterns/tables/expanded-row-actions.png';\n\n{/* Tables vs. Lists */}\n\nimport ListVTableTable from '../../app/assets/design-patterns/tables/list-v-table-table.png';\nimport ListVTableList from '../../app/assets/design-patterns/tables/list-v-table-list.png';\nimport ArrangeTable from '../../app/assets/design-patterns/tables/arrange-table.svg';\nimport ArrangeList from '../../app/assets/design-patterns/tables/arrange-list.svg';\nimport DashboardTable from '../../app/assets/design-patterns/tables/dashboard-table.png';\nimport PageBodyTable from '../../app/assets/design-patterns/tables/page-body-table.png';\nimport ReadTable from '../../app/assets/design-patterns/tables/read-table.svg';\nimport ReadList from '../../app/assets/design-patterns/tables/read-list.svg';\nimport ColumnOrder1 from '../../app/assets/design-patterns/tables/column-order-1.png';\nimport ColumnOrder2 from '../../app/assets/design-patterns/tables/column-order-2.png';\nimport ImplicitValueTable from '../../app/assets/design-patterns/tables/implicit-value-table.png';\nimport ImplicitValueList1 from '../../app/assets/design-patterns/tables/implicit-value-list-1.png';\nimport ImplicitValueList2 from '../../app/assets/design-patterns/tables/implicit-value-list-2.png';\nimport TabularList from '../../app/assets/design-patterns/tables/tabular-list.png';\n\n{/* Responsive */}\n\nimport TableOnMobile from '../../app/assets/design-patterns/tables/table-on-mobile.svg';\nimport HomePagePreview from '../../app/assets/design-patterns/tables/home-page-preview.gif';\nimport TableStackedAsList from '../../app/assets/design-patterns/tables/table-stacked-as-list.gif';\nimport MobilePagination from '../../app/assets/design-patterns/tables/mobile-pagination.png';\nimport MobileInfScroll from '../../app/assets/design-patterns/tables/mobile-inf-scroll.png';\nimport LandscapeTable from '../../app/assets/design-patterns/tables/landscape-table.gif';\nimport InviteToLandscapeX from '../../app/assets/design-patterns/tables/invite-to-landscape-x.png';\nimport InviteToLandscapeCountdown from '../../app/assets/design-patterns/tables/invite-to-landscape-countdown.gif';\nimport UserInField from '../../app/assets/design-patterns/tables/user-in-field.jpg';\n\n{/* Specs */}\n\nimport SpecSize from '../../app/assets/design-patterns/tables/spec-size.png';\nimport SpecTypography from '../../app/assets/design-patterns/tables/spec-typography.png';\nimport SpecPagination from '../../app/assets/design-patterns/tables/spec-pagination.png';\n\n{/* KEYWORDS: design pattern table list tabular data sort */}\n\n# Tables\n\n> This page is still evolving and is subject to change in the future. We do not yet have coded examples for everything shown on this page. [Let us know](/community/contactus) what you think.\n\n<ImageGrid images={[BannerImage]} regularWidth />\n\nSimilar to [lists](/patterns/lists), tables are used to display structured data. Tables are especially powerful in desktop applications, where users can easily compare and analyze a large set of data and find what they are looking for with sorting and filtering options.\n\n<MaterialDesignDescription title={'Data Table'} url={`https://m2.material.io/components/data-tables`} />\n<TOC\n    anchors={[\n        { title: 'Introduction', hash: '#tables' },\n        { title: 'Appearance' },\n        { title: 'Behaviors' },\n        { title: 'Row Actions', depth: 1 },\n        { title: 'Batch Actions', depth: 1 },\n        { title: 'Sticky Header Row', depth: 1 },\n        { title: 'Expanded Row', depth: 1 },\n        { title: 'Horizontal Scrolling', depth: 1 },\n        { title: 'Searching and Filtering', depth: 1 },\n        { title: 'Transition Animation', depth: 1 },\n        { title: 'Tables vs. Lists' },\n        { title: 'Responsive' },\n        { title: 'Design Specifications' },\n        { title: 'Developers' },\n    ]}\n/>\n<Divider />\n\n# Appearance\n\n<ImageGrid images={[StandardTable]} caption={`A basic table.`} regularWidth />\n\nTable cells may be dynamic and interactive.\n\n<ImageGrid\n    images={[\n        TableCellText,\n        TableCellNumber,\n        TableCellTextField,\n        TableCellSwitch,\n        TableCellStatus,\n        TableCellIcon,\n        TableCellMultiSelect,\n        TableCellStripe,\n    ]}\n    captionsUnderImages={[\n        'Text content. The alternating background color is optional.',\n        'Numerical value. Note that both the header and the text cells are right-aligned.',\n        'Text fields. Note that text fields are right-aligned as they are expecting numerical values. These rows are also taller than standard table rows.',\n        'Switches and checkboxes.',\n        'Icons and tags.',\n        'Icon buttons at the end of the table row for touch screens.',\n        `Checkboxes to select rows.`,\n        `Status stripes for row items with special statuses.`,\n    ]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\nYou should seek to make your tables both easy to navigate and effective to use.\n\n<ImageGrid\n    images={[TableCellUnderlinedField, TableCellImage]}\n    captionsUnderImages={[\n        'CAUTION: Be careful when using underlined text fields in a table, as their understrokes compete with the line strokes between each table row.',\n        `AVOID: Images can make table rows excessively tall. Consider using a list instead.`,\n    ]}\n/>\n\n# Behaviors\n\n## Row Actions\n\nSimilar to lists, tables can also have row-level actions. Common actions include edit, delete, and view details. They are usually placed at the end of a table row.\n\n<ImageGrid\n    images={[ActionAtRowEnd, ActionOnHover]}\n    captionsUnderImages={[\n        `Row actions can be placed at the end of the row.`,\n        `DO: On desktop, you can choose to have row actions visible only when the mouse is hovering on the row. This will save space and make your tables cleaner and easier to read.`,\n    ]}\n/>\n\n<ImageGrid\n    images={[Drag1, Drag2]}\n    caption={[\n        `Drag-and-drop actions are usually placed at the beginning of a row. If you have row numbers, you may choose to display the drag handle on hover.`,\n    ]}\n/>\n\n## Batch Actions\n\nIf your application allows users to perform batch actions on their data set, such as deleting 15 items at once, you can add a checkbox column on the left side of the table for handling selection.\n\n<ImageGrid\n    images={[BatchAction1, BatchAction2]}\n    captionsUnderImages={[\n        `Buttons are disabled when no rows are checked.`,\n        `Buttons become enabled when rows are checked. Optionally, use theme color to highlight the selected row, and label the button with the number of items selected to account for pagination.`,\n    ]}\n/>\n{/* prettier-ignore */}\n{/*\n\nNote: I think this is a good suggestion, but might be too high of a requirement for our adopters\n\nYou may change the clickable area when users are cognitively loaded and busy deciding which row to check. When they enter this \"batch action mode\", increase the row selection area so that it is easier to select.\n\n<ImageGrid\n    images={[ClickArea1, ClickArea2]}\n    captionsUnderImages={[\n        `When nothing is selected, the selection target area is limited to the region around the checkbox.`,\n        `When a row is selected, the application enters this \"batch action mode\", and users can select other rows by clicking anywhere on those rows.`,\n    ]}\n/>\n*/}\n\n## Sticky Header Row\n\nWhen a table gets long, your users should not need to scroll back to the top to view the table header.\n\n<ImageGrid\n    images={[StickyHeader]}\n    caption={[`Use sticky headers to help your users navigate through the table.`]}\n    regularWidth\n/>\n\n## Expanded Row\n\nOccasionally, table rows may expand to allow users to take a quick peek into additional row details.\n\n<ImageGrid\n    images={[ExpandedRow]}\n    caption={[`Users can quickly glance into a small amount of additional row data.`]}\n    regularWidth\n/>\n\n<ImageGrid\n    images={[ExpandedRowTooComplicated, ExpandedRowActions]}\n    captionsUnderImages={[\n        `DONT: Do not include complicated contents in an expanded row, as this will break the efficiency of a table. In this case, you should design a dedicated page for the content.`,\n        `DONT: Do not surprise users by hiding high priority actions in the expanded row space.`,\n    ]}\n/>\n\n## Horizontal Scrolling\n\nWe strongly encourage you to design your application to only show as much data as is necessary.\n\nWhen your table overflows horizontally, you should allow your users to scroll horizontally to view more about the table. However, this interaction is less ergonomically convenient when users are not using a touch screen or a trackpad. See the [Responsive](#responsive) section below.\n\nThe application may display a scroll bar to suggest that there are more contents to the right.\n\n<ImageGrid\n    images={[HorizontalScrollBar]}\n    caption={[\n        `CAUTION: Do not use so many columns that there is significant overflow in your tables. If a horizontal scroll is necessary, place a horizontal scroll bar between rows and the footer / pagination area.`,\n    ]}\n    regularWidth\n/>\n\n<ImageGrid\n    images={[StickyCheckbox, StickyRowAction]}\n    captionsUnderImages={[\n        `The checkbox column should be sticky to the left as the user scrolls to the right.`,\n        `The action column, if designed to be always visible, should be sticky to the right. Do not include too many actions or they will consume a significant portion of your available space.`,\n    ]}\n/>\n\n## Searching and Filtering\n\nThere are many different ways to perform searching and filtering with table data. Below are a few examples:\n\n<ImageGrid\n    images={[Filter1, Filter2, Filter3, Filter4]}\n    captionsUnderImages={[\n        `A simple search field embedded in a table.`,\n        `A search field outside a table.`,\n        `Filter criteria listed as chips.`,\n        `A \"saved filter\" dropdown.`,\n    ]}\n/>\n\n<ImageGrid\n    images={[AdvancedTableFilter]}\n    caption={[\n        `You may combine multiple interactions (searching and filtering) and input methods (keyboard navigations, keyboard typing, mouse clicking) together for an \"advanced search\".`,\n    ]}\n    regularWidth\n/>\n\n## Transition Animation\n\nTable rows often look very similar and can be difficult for users to differentiate. You should make use of animations and transitions to help users understand where certain actions are taking place.\n\n<ImageGrid\n    images={[AdditionAnimation, SubstractionAnimation]}\n    captionsUnderImages={[\n        `DO: Transition animation for adding a row to the table. Consider using a background color to temporarily highlight the newly-added row.`,\n        `DO: Transition animation for removing a row from the table.`,\n    ]}\n/>\n\n<Divider />\n\n# Tables vs. Lists\n\n<ImageGrid\n    images={[ListVTableTable, ListVTableList]}\n    caption={['The same set of data may be presented in tables (#1) or lists (#2), depends on the use case.']}\n/>\n\nIn most cases, we encourage you to organize your data into lists instead of tables. However, the distinction between the two is not black and white. Below are a few factors you should consider when deciding how to present your data.\n\n## Arrangement\n\nTables place more emphasis on columns, allowing users to easily find a row by any of its associated data points. Lists, on the other hand, can be less structured and tend to treat each item as a cohesive whole rather than a collection of individual data values.\n\n<ImageGrid\n    images={[ArrangeTable, ArrangeList]}\n    captionsUnderImages={[\n        'Tables usually take up more horizontal space and are often the main focus of the page they are on.',\n        'Lists are more horizontally compact and are frequently used for dashboards. Typography changes can give the text more visual hierarchy.',\n    ]}\n/>\n\nBecause of this, tables tend to take up much more horizontal space. Therefore, they are almost always the primary content on the page where they reside. You should not use tables in dashboards, where many widgets are competing for the space; you should also avoid using tables on mobile applications, where the viewport size is limited.\n\n<ImageGrid\n    images={[DashboardTable, PageBodyTable]}\n    captionsUnderImages={[\n        'AVOID: Avoid using tables in dashboards. Use lists instead.',\n        'DO: Tables are usually the only main content on a page.',\n    ]}\n/>\n\nA \"tabular list\" or a structured list that attempts to combine tables and lists together might result in a design that does not pick up the advantages of either pattern.\n\n<ImageGrid\n    images={[TabularList]}\n    captionsUnderImages={[\n        'CAUTION: Be careful when combining tables and lists together, as this diminishes the value of both.',\n    ]}\n    gridContainerProps={{ style: { justifyContent: 'flex-start' } }}\n/>\n\n## Eye Movement\n\nTables facilitate users who want to work across multiple different properties of an item. Users often navigate down a column, find the desired value, jump to another column, navigating further down, before they exit their path. This is called a [lawn mower pattern](https://www.nngroup.com/articles/lawn-mower-pattern/). On the other hand, lists often have a primary property — these can be icons, avatars, or primary list text — that the user would rely on for navigation, a scanning behavior known as the [layer cake pattern](https://www.nngroup.com/articles/layer-cake-pattern-scanning/).\n\n<ImageGrid\n    images={[ReadTable, ReadList]}\n    caption={[\n        `If you conduct eye tracking as a users attempts to perform some action, you would notice users scan differently depending on the data structure.`,\n        '1: In a table, users can start from any column / property, and navigate horizontally or vertically to the targeted item (lawn mower pattern).',\n        '2: In a list, users rely heavily on a primary property to navigate (layer cake pattern).',\n    ]}\n/>\n\nIf you expect your users to compare across multiple parameters before deciding which row to interact with, you should use a table. If they primarily read your data row-by-row, you should try structuring your data as a list.\n\n<ImageGrid\n    images={[ColumnOrder1, ColumnOrder2]}\n    caption={[\n        `Users are more likely to find a user by their name or their role, not by their email address or phone number. Therefore, you should arrange the name and the role columns to the left, followed by phone number and email (#1). Email addresses and phone numbers should not show up before the role column (#2).`,\n    ]}\n    captionsUnderImages={['', 'DONT:']}\n/>\n\n## Data Labels\n\nIn tables, each data point is labeled only once in the table header. In lists, however, the values are either clear enough on their own without explanations, or they have to be included in each list item.\n\n<ImageGrid\n    images={[ImplicitValueTable]}\n    captionsUnderImages={[`The values are explained by the table header row.`]}\n    gridContainerProps={{ style: { justifyContent: 'flex-start' } }}\n/>\n<ImageGrid\n    images={[ImplicitValueList1, ImplicitValueList2]}\n    captionsUnderImages={[\n        `DONT: It is not clear what those values in the subtitle mean.`,\n        `CAUTION: Be careful when calling out property names in lists, as they weaken the scanability.`,\n    ]}\n/>\n\n## Consumer-Facing Applications\n\nAvoid using tables in consumer-facing applications. Lists mentally match real-world individual objects, while tables can be more abstract. Use tables only if your users really need to examine technical details.\n\n<Divider />\n\n# Responsive\n\nIn general, **we do not encourage tables on mobile platforms**, as table-related interactions tend to be complicated for small viewports, and mobile phones also often lack the computational power to process massive data sets.\n\n<ImageGrid\n    images={[TableOnMobile]}\n    regularWidth\n    caption={`Users can only see a very small portion of the table on mobile devices.`}\n/>\n\n## Understanding Users' Goals\n\n<ImageGrid images={[UserInField]} regularWidth caption={`While on foot, it is very hard to examine small details.`} />\n\nBefore you design a table structure for a mobile application, you should conduct user research and have a clear understanding of users' intentions. When they land on this page, do they need to do complicated cross-comparisons between multiple rows and columns? Is a full table necessary?\n\nFor applications where users will be on foot and out in the field while they interact with the app, keep the interactions minimal so users can pay sufficient attention to their surroundings.\n\n## Breaking Down Tables into Lists\n\nIf a user only needs a few parameters to identify the correct data entry and make decisions, a list with a few selected data points would suffice.\n\n<ImageGrid\n    images={[HomePagePreview, TableStackedAsList]}\n    captionsUnderImages={[\n        `On a crowded page, show a preview of the table content, with the option to view the full table in a dedicated page.`,\n        `Stack each property into a list item, with the ability to click into a list item to view the full item details.`,\n    ]}\n/>\n\n## Infinite Scroll and Pagination\n\nIf tables become necessary in your mobile application, infinite scroll and pagination are especially helpful to reduce the load of both the server and the client-side render.\n\n<ImageGrid\n    images={[MobileInfScroll, MobilePagination]}\n    captionsUnderImages={[`Infinite scroll`, `Pagination`]}\n    gridContainerProps={{ style: { justifyContent: 'flex-start' } }}\n/>\n\n> Be careful using pagination with multi-selection, as it is unclear whether the selection gets preserved when the page number changes.\n\n## Native Mobile Gestures\n\nIn native mobile applications, you may also consider embedding action gestures common for touch screens, such as long-press and swipe.\n\n<MaterialDesignDescription title={'Gestures'} url={`https://m2.material.io/design/interaction/gestures.html`} />\n\nHowever, these gestures should never be the only way to perform an action. For example, if your application is able to delete a table row, users may be able to either (1) left-swipe to bring up a contextual menu with a delete option, or (2) click into the target row, which opens a new page that contains a delete button.\n\n## Landscape Mode\n\nIf a full table view is desired on mobile devices, consider offering a landscape view so that more columns are visible at once.\n\n<ImageGrid images={[LandscapeTable]} caption={`Use the landscape mode for viewing the full table.`} regularWidth />\n\nHowever, many applications are meant to be used primarily in portrait mode. In this case, you need to call out the option.\n\n<ImageGrid\n    images={[InviteToLandscapeX, InviteToLandscapeCountdown]}\n    caption={`For example, you can use a chip button to \"invite\" users to the landscape view.`}\n/>\n\n<Divider />\n\n# Design Specifications\n\n<ImageGrid\n    images={[SpecSize, SpecTypography, SpecPagination]}\n    captionsUnderImages={[`Dimensions`, `Colors and typography`, `Pagination`]}\n    regularWidth\n/>\n\n<MaterialDesignDescription\n    title={'Data Tables'}\n    description={`For additional instructions, refer to Material Design's design specs.`}\n    url={`https://m2.material.io/components/data-tables#specs`}\n/>\n\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular**:\n\n-   Angular Material\n    -   [Table](https://material.angular.io/components/table/overview)\n\n**React**:\n\n-   MUI\n    -   [Table](https://mui.com/components/tables/)\n    -   [Data Grid](https://mui.com/components/data-grid/)\n\n**React Native**:\n\n-   React Native Paper\n    -   [Data Table](https://callstack.github.io/react-native-paper/docs/components/DataTable/)\n"},"/patterns/steppers":{"title":"Steppers","text":"import React from 'react';\nimport { DemoCard, Divider, ImageGrid, MaterialDesignDescription, TOC } from '../../app/components';\nimport Dynamic from '../../app/assets/design-patterns/steppers/dynamic-stepper.gif';\nimport StepperBanner from '../../app/assets/design-patterns/steppers/steppers-banner.svg';\nimport LinearStepper from '../../app/assets/design-patterns/steppers/linear-stepper.png';\nimport Pagers from '../../app/assets/design-patterns/steppers/pagers.png';\n\nimport Specs1 from '../../app/assets/design-patterns/steppers/specs-1.png';\nimport Specs2 from '../../app/assets/design-patterns/steppers/specs-2.png';\nimport Specs3 from '../../app/assets/design-patterns/steppers/specs-desktop-1.png';\n\n{/* KEYWORDS: design pattern stepper procedure wizard */}\n\n# Steppers\n\n<ImageGrid images={[StepperBanner]} regularWidth />\n\nSteppers are used to communicate progress through a linear, multi-step workflow or process. They tell users how many steps there are in the process and which step they are on.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Steppers'}\n        url={`https://m2.material.io/archive/guidelines/components/steppers.html`}\n    />\n    <DemoCard\n        repository={'dynamic-stepper'}\n        angular={`https://stackblitz.com/github/etn-ccis/blui-angular-design-patterns?file=src%2Fapp%2Fpages%2Fdynamic-stepper%2Fdynamic-stepper.component.ts`}\n        react={`https://codesandbox.io/s/github/etn-ccis/blui-react-design-patterns/tree/master?file=/src/pages/dynamic-stepper/index.tsx&initialpath=/dynamic-stepper`}\n    />\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#steppers' },\n            { title: 'Common Use Cases', hash: '#common-use-cases' },\n            { title: 'Variations', hash: '#variations' },\n            { title: 'Design Specifications', hash: '#design-specifications' },\n            { title: 'Developers', hash: '#developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Common Use Cases\n\nYou can refer to the Material Design Stepper guidelines for general usage instructions.\n\nSteppers can be used in a variety of ways in your application, including:\n\n-   Wizards\n-   Multi-step workflows (e.g., [Authentication](/patterns/user-auth))\n-   User-defined procedures\n-   Breaking up long [Forms](/patterns/forms)\n\n<Divider />\n\n# Variations\n\n## Basic Stepper\n\n<ImageGrid images={[LinearStepper]} regularWidth />\n\nA basic stepper simply shows the steps that are available and allows the user to navigate between them. There are many possible configurations for a basic stepper, including:\n\n-   Horizontal / Vertical\n-   Linear / Non-linear\n-   Editable / Non-editable\n\n## Dynamic Stepper\n\n<ImageGrid images={[Dynamic]} regularWidth />\n\nA dynamic stepper is an extension of the basic stepper that allows users to configure their own steps. Typically, an \"Add Step\" button is included that will insert a new step into the stepper. This is most useful when your application allows users to define their own procedures, such as a sequence of steps for an emergency shutdown.\n\n## Pager\n\n<ImageGrid\n    regularWidth\n    images={[Pagers]}\n    caption={[\n        `Pagers used for multi-step workflows in a full-screen bottom sheet on mobile (1) and a desktop overlay (2).`,\n    ]}\n/>\n\nA pager is a simplified version of a stepper that is used solely to indicate how many steps are in a workflow. This variation of the stepper is non-interactive and does not include any labels for any of the steps / pages. It always appears at the bottom of the screen / sheet (mobile) or dialog / card (desktop).\n\n<Divider />\n\n# Design Specifications\n\n## Pager (Mobile)\n\n<ImageGrid images={[Specs1, Specs2]} regularWidth />\n\n## Pager (Desktop)\n\nIf certain dimensions are not specified, refer to the dimensions suggested in the mobile section above.\n\n<ImageGrid images={[Specs3]} regularWidth />\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular** :\n\n-   Angular Material\n    -   [Stepper](https://material.angular.io/components/stepper/overview)\n-   @brightlayer-ui/angular-components\n    -   [Mobile Stepper](https://brightlayer-ui-components.github.io/angular/components/mobile-stepper/examples)\n\n**React**\n\n-   MUI\n    -   [Stepper](https://mui.com/material-ui/react-stepper/)\n\n**React Native**\n\n-   @brightlayer-ui/react-native-components\n    -   [Mobile Stepper](https://brightlayer-ui-components.github.io/react-native/?path=/info/components-documentation--mobile-stepper)\n"},"/patterns/user-auth":{"title":"User Authentication","text":"import React from 'react';\nimport { DemoCard, ImageGrid, Divider, MaterialDesignDescription, TOC } from '../../app/components';\nimport PxblueSmallAltIcon from '@brightlayer-ui/icons-mui/PxblueSmallAlt';\n\n{/* Intro */}\n\nimport LoginBanner from '../../app/assets/design-patterns/user-authentication/login.svg';\n\n{/* Variations */}\n\nimport EnterEmailAdress from '../../app/assets/design-patterns/user-authentication/enter-email-address.png';\nimport AcceptEULA from '../../app/assets/design-patterns/user-authentication/accept-eula.png';\nimport VerifyEmail from '../../app/assets/design-patterns/user-authentication/verify-email.png';\nimport CreatePassword from '../../app/assets/design-patterns/user-authentication/create-password.png';\nimport AccountDetails from '../../app/assets/design-patterns/user-authentication/account-details.png';\nimport WelcomeOnboard from '../../app/assets/design-patterns/user-authentication/welcome-onboard.png';\nimport RegistrationDesktop from '../../app/assets/design-patterns/user-authentication/registration-desktop.png';\n\nimport EnterOrganizationCode from '../../app/assets/design-patterns/user-authentication/enter-organization-code.png';\nimport EnterOrganizationConfirm from '../../app/assets/design-patterns/user-authentication/enter-organization-confirm.png';\nimport EnterOrganizationWelcome from '../../app/assets/design-patterns/user-authentication/enter-organization-welcome.png';\nimport JoinAnOrganizationDesktop from '../../app/assets/design-patterns/user-authentication/join-an-organization-desktop.png';\n\nimport Login from '../../app/assets/design-patterns/user-authentication/login.png';\nimport LoginDesktop from '../../app/assets/design-patterns/user-authentication/login-desktop.png';\n\nimport ForgotPasswordEnterEmail from '../../app/assets/design-patterns/user-authentication/forgot-password-email.png';\nimport ForgotPasswordConfirmSent from '../../app/assets/design-patterns/user-authentication/forgot-password-confirm.png';\nimport ForgotPasswordNewPassword from '../../app/assets/design-patterns/user-authentication/forgot-password-password.png';\nimport ForgotPasswordWelcome from '../../app/assets/design-patterns/user-authentication/forgot-password-welcome.png';\nimport ChangePassword from '../../app/assets/design-patterns/user-authentication/change-password.png';\nimport ChangePasswordWelcome from '../../app/assets/design-patterns/user-authentication/change-password-confirm.png';\nimport ResetPasswordDesktop from '../../app/assets/design-patterns/user-authentication/reset-password-desktop.png';\nimport ChangePasswordDesktop from '../../app/assets/design-patterns/user-authentication/change-password-desktop.png';\n\n{/* Behaviors */}\n\nimport EmailCommunicationInvitation from '../../app/assets/design-patterns/user-authentication/email-communication-invitation.png';\nimport EmailCommunicationVerification from '../../app/assets/design-patterns/user-authentication/email-communication-verification.png';\nimport ExpiredCode from '../../app/assets/design-patterns/user-authentication/expired.png';\nimport ErrorStates1 from '../../app/assets/design-patterns/user-authentication/error-states-1.png';\nimport ErrorStates2 from '../../app/assets/design-patterns/user-authentication/error-states-2.png';\nimport ErrorStates3 from '../../app/assets/design-patterns/user-authentication/error-states-3.png';\n\n{/* KEYWORDS: design pattern login registration register password forget forgot account authentication auth join */}\n\n# User Authentication & Registration\n\n<ImageGrid images={[LoginBanner]} regularWidth />\n\nMost applications require some form of user authentication to keep unauthorized users out, and a way to add authorized users to the application.\n\n<DemoCard\n    repository={'login'}\n    angular\n    react={`https://codesandbox.io/s/github/etn-ccis/blui-react-workflows/tree/master/login-workflow/example`}\n    ionic\n    reactNative\n/>\n<Divider />\n\n<React.Fragment>\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#user-authentication--registration' },\n            { title: 'Variations' },\n            { title: 'Registration', depth: 1 },\n            { title: 'Joining an Organization', depth: 1 },\n            { title: 'Login', depth: 1 },\n            { title: 'Forgot / Change Password', depth: 1 },\n            { title: 'Behaviors', hash: '#behaviors' },\n            { title: 'Developers', hash: '#developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Variations\n\nUser authentication contains four primary workflows:\n\n-   Registration\n-   Joining an organization\n-   Login\n-   Forgot / Reset password\n\nAll of these workflows should follow the rules specified by our [forms and validation](/patterns/forms) pattern, and multi-step workflows should be connected using our [steppers](/patterns/steppers) pattern.\n\n<MaterialDesignDescription\n    title={'Forms and Validation'}\n    url={'/patterns/forms'}\n    description={`Follow Brightlayer UI's guideline for form controls.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n<MaterialDesignDescription\n    title={'Steppers'}\n    url={'/patterns/steppers'}\n    description={`Follow Brightlayer UI's guideline for navigating between pages.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n\nYour authentication and registration workflows should work equally well on different screen sizes. On mobile, these should be presented as full-screen layouts, whereas on desktop, they should be presented in a card centered on the screen as an [overlay](/patterns/overlay).\n\n## Registration\n\nRegistration is the process of user account creation. Typically, users can either register themselves (self-registration) or you can invite them to join your application (invitation-based).\n\n**Self-Registration**\n\nIf you do not need to restrict who can register for your application, you can allow users to self-register. The self-registration workflow includes the following steps:\n\n-   Enter email address\n-   Accept EULA\n-   Receive an email for verification\n-   Verify email\n-   Create password\n-   Add account details\n-   Success: account created\n\n**Registration via Invitation**\n\nIf you need to restrict who is able to use your application, you may choose to go with a invitation-based registration. In this situation, a system admin sends an email to authorized users inviting them to register. The invitation-based registration workflow includes the following steps:\n\n-   Receive an email for invitation\n-   Accept EULA\n-   Create password\n-   Add account details\n-   Success: account created\n\n### Screens\n\nThe majority of the registration screens are the same between invitation-based and self-registration. The primary difference is in how the registration workflow is initiated, and whether the email needs to be verified. Use the following screens for the registration workflow where appropriate.\n\n<ImageGrid\n    images={[EnterEmailAdress, AcceptEULA, VerifyEmail, CreatePassword, AccountDetails, WelcomeOnboard]}\n    caption={[\n        'Screens in the registration workflow.',\n        '1: Enter email address',\n        '2: Accept EULA',\n        '3: Verify email',\n        '4: Create password',\n        '5: Add account details',\n        '6: Success: account created',\n    ]}\n/>\n\n> The purpose of a success screen is to assure the user that something has been achieved. These screens can be an opportunity to perform more product branding — you are encouraged to use animations and [graphics](/style/illustrations) on these screens.\n\n<ImageGrid\n    images={[RegistrationDesktop]}\n    caption={'A registration screen example on desktop.'}\n    regularWidth\n    style={{ marginTop: '2em' }}\n/>\n\n## Joining an Organization\n\nSome applications may require users to join specific groups or organizations after creating an account. Generally, there are three ways for a user to join an organization:\n\n**Request Access**\n\nThis occurs when a user has an account but need to access an invitation-only organization. This workflow involves the following steps:\n\n-   Enter organization identifier\n-   Success: request sent\n-   Receive an email invitation\n-   Success: organization joined\n\n**Join with Invitation**\n\nJoining via invitation occurs when a system admin extends an invitation for a user to join a group. If the user does not yet have an account, they will first proceed through the invitation-based registration workflow followed by the screens for joining the organization. This workflow includes the following steps:\n\n-   Receive an email invitation\n-   Success: organization joined\n\n### Screens\n\nThe majority of the joining-an-organization screens are the same regardless of the underlying mechanism. Use the following screens for the joining-an-organization workflow where appropriate.\n\n<ImageGrid\n    images={[EnterOrganizationCode, EnterOrganizationConfirm, EnterOrganizationWelcome]}\n    caption={[\n        'Screens in the joining-an-organization workflow.',\n        '1: Enter organization identifier',\n        '2: Success: request sent',\n        '3: Success: organization joined',\n    ]}\n/>\n<ImageGrid\n    images={[JoinAnOrganizationDesktop]}\n    caption={'A join-an-organization screen example on desktop.'}\n    regularWidth\n/>\n\n## Login\n\n{/* prettier-ignore */}\n{/*\nAn NFC login might either be documented here, or wait until we start adding in device registery / discovery pattern\n*/}\n\nLogging in can usually be accomplished in one of two ways: basic login or login via a third-party.\n\n**Basic Login**\n\nA simple login presents fields for the users to enter their credentials and a button to submit them for verification.\n\nThe login screen should always present information on how to create an account and what to do if a user has forgotten their credentials — these buttons should trigger the Registration and Forgot Password (see below) workflows .\n\n<ImageGrid\n    images={[Login]}\n    caption={[\n        'A standard login screen.',\n        '1: Product identifications, such as product name or logo.',\n        '2: You may also add a subtle background image with gradient to enhance the visual design and express the product brand.',\n        '3: \"Remember me\" and \"password visibility\" are two features that improve user experience, but introduce potential security concerns.',\n        '4: Login screens often include extra functions, such as \"forgot password\", \"sign up\", and \"contact your organization admin\".',\n        '5: You may add certification badges and logos from partnerships here.',\n    ]}\n    gridImageProps={{ sm: 8 }}\n/>\n<ImageGrid images={[LoginDesktop]} caption={'A login screen example on desktop.'} regularWidth />\n\n**Login via Third Party**\n\nSome applications, especially consumer-facing ones, can be authorized via third-party accounts / credentials. Different platforms may have different requirements for this. Here are some commonly used platforms and their instructions:\n\n-   [Login with Amazon](https://developer.amazon.com/docs/login-with-amazon/brand.html)\n-   [Google Sign-in](https://developers.google.com/identity/sign-in/web/sign-in)\n-   [Sign in with Apple](https://developer.apple.com/design/human-interface-guidelines/sign-in-with-apple/overview/introduction/)\n-   [Facebook Login](http://developers.facebook.com/docs/facebook-login/)\n-   [Sign in with Microsoft](https://developer.microsoft.com/en-us/identity/add-sign-in-with-microsoft)\n\n## Forgot / Change Password\n\n**Forgot password**\n\nThe login screen for an application should also present users with a way to reset their password if they have forgotten it. This is typically displayed as a hyperlink below the credential fields. Clicking the link will present users with a field to enter their e-mail address. They will then receive an email with a hyperlink to reset their password. This workflow involves the following steps:\n\n-   Enter email address\n-   Success: reset instructions sent\n-   Receive an email for resetting the password\n-   Create a new password\n-   Success: password updated\n\n<ImageGrid\n    images={[ForgotPasswordEnterEmail, ForgotPasswordConfirmSent, ForgotPasswordNewPassword, ForgotPasswordWelcome]}\n    caption={[\n        '1: Enter email address',\n        '2: Success: reset instructions sent',\n        '3: Create a new assword',\n        '4: Success: password reset',\n    ]}\n/>\n<ImageGrid images={[ResetPasswordDesktop]} caption={'A reset-password screen example on desktop.'} regularWidth />\n\n**Change Password**\n\nWhen the users are logged in, they have the option to change their password by going through the change password workflow, typically triggered from within the user settings. This workflow includes the following steps:\n\n-   Change password\n-   Success: password updated\n\n> After a successful password change, users should be logged out and forced to log in with the new credentials.\n\n<React.Fragment>\n    <ImageGrid\n        images={[ChangePassword, ChangePasswordWelcome]}\n        caption={['1: Change password', '2: Success: password changed']}\n    />\n    <ImageGrid images={[ChangePasswordDesktop]} caption={'A change-password screen example on desktop.'} regularWidth />\n    <Divider />\n</React.Fragment>\n\n# Behaviors\n\n## Email Communications\n\n{/* This might deserve its own pattern. We already have something in the backlog to design for an email template. */}\n\nEmail communications are frequently used throughout the user authentication workflow to verify the user's identity. Users receive emails for invitations, address verification, confirmation codes, etc.\n\nEmails are also sent to confirm security-related changes to a user's account, such as changing a password, updating a profile, etc. You should never allow users to unsubscribe from security-related email notifications.\n\n<ImageGrid\n    images={[EmailCommunicationInvitation, EmailCommunicationVerification]}\n    caption={['Two examples of email communications', '1: Invitation to join', '2: Verifying email address']}\n/>\n\n## Terminated Workflows & Expired Sessions\n\nDuring the registration, if a user leaves the application before creating a password for their account, the whole session is treated as expired, and upon returning, they must start the registration process over again.\n\nIf an invitation link or verification code has expired, the users should be able to request for another invitation link or verification code.\n\n<ImageGrid\n    images={[ExpiredCode]}\n    caption={'Users should have a way to re-initiate an expired email verification.'}\n    regularWidth\n/>\n\n## Security Concerns\n\n### Error Messages\n\nWhen a user encounters an error — such as a password mismatch or the server is temporarily down — they should be notified with an appropriate error message. However, be very careful when presenting error messages to the users. You should only show what is necessary to recover from the problem, such as \"incorrect email or password\" or \"server unavailable\" — do not expose information that could compromise the security of your application.\n\n> Do **NOT** provide messages like \"User does not exist,\" \"Incorrect Password,\" etc.\n\n<ImageGrid\n    images={[ErrorStates1, ErrorStates2, ErrorStates3]}\n    caption={\n        'For security, you should not present more information than is necessary. For invalid credentials, you should highlight both fields and say \"Invalid Credentials.\"'\n    }\n    captionsUnderImages={['DONT: ', 'DONT: ', 'DO: ']}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\n### Exposing Credentials\n\nUnlike a phone application, a shared HMI application is more vulnerable to outside threats via showing credentials. These projects should **NOT** implement password visibility toggles or \"remember me\" functionality.\n\n### Two-Factor Authentication\n\nThe examples on this page used email as the login credentials. However, if your project requires additional security, consider using two-factor authentication. Two-factor authentication involves sending an additional confirmation code (typically via email or SMS) to verify a user's identity after they enter their password.\n\n<Divider />\n\n# Developers\n\nWe recommend using the following packages to construct these workflows. Additionally, you should familiarize yourself with the components used for the [Forms](/patterns/forms#developers) and [Overlays](/patterns/overlay#developers) patterns.\n\n**Angular:**\n\n-   [@brightlayer-ui/angular-auth-workflow](https://www.npmjs.com/package/@brightlayer-ui/angular-auth-workflow)\n\n**React:**\n\n-   [@brightlayer-ui/react-auth-workflow](https://www.npmjs.com/package/@brightlayer-ui/react-auth-workflow)\n\n**React Native:**\n\n-   [@brightlayer-ui/react-native-auth-workflow](https://www.npmjs.com/package/@brightlayer-ui/react-native-auth-workflow)\n"},"/patterns/visualizations":{"title":"Visualizations","text":"import React from 'react';\nimport { DemoCard, ImageGrid, MaterialDesignDescription, Divider, TOC } from '../../app/components';\nimport PxblueSmallAltIcon from '@brightlayer-ui/icons-mui/PxblueSmallAlt';\n\nimport VisualizationBanner from '../../app/assets/design-patterns/visualizations/visualizations-banner.svg';\nimport LineChart from '../../app/assets/design-patterns/visualizations/line-chart.png';\nimport PieChart from '../../app/assets/design-patterns/visualizations/pie-chart.png';\nimport ClockwisePie from '../../app/assets/design-patterns/visualizations/cw-ccw.png';\nimport MapsImg from '../../app/assets/design-patterns/visualizations/map.png';\nimport UsePrimaryColorDo from '../../app/assets/design-patterns/visualizations/use-primary-color-do.png';\nimport UsePrimaryColorDont from '../../app/assets/design-patterns/visualizations/use-primary-color-dont.png';\n\n{/* KEYWORDS: design pattern visualization */}\n\n# Visualizations\n\n<ImageGrid regularWidth images={[VisualizationBanner]} />\n\nData is the foundation of most Brightlayer UI applications, but many users are not interested in looking at the raw data. Visualizations allow you to present this data in a (visual) way that is easier to understand and allows users to draw conclusions and take actions based on the data. The most common visualizations in Brightlayer UI applications are charts / graphs and maps.\n\n<React.Fragment>\n    <TOC\n        anchors={[\n            { title: 'Introduction', hash: '#visualizations' },\n            { title: 'Charts / Graphs', hash: '#charts--graphs' },\n            { title: 'Maps', hash: '#maps' },\n            { title: 'Mobile Charting', hash: '#mobile-charting' },\n            { title: 'Developers', hash: '#developers' },\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Charts / Graphs\n\n<ImageGrid\n    images={[LineChart, PieChart]}\n    caption={[\n        '1: Line charts represent time-series data changing over a period of time.',\n        '2: Pie / ring charts show a single value as a proportion of an expected or ideal total.',\n    ]}\n/>\n\nCharts and graphs come in [many different forms](https://m2.material.io/design/communication/data-visualization.html#types). Depending on the expected interaction, these can be large elements on the UI — such as full-screen line chart with numerous series — or small supporting elements like a pie chart embedded in a card.\n\n<MaterialDesignDescription\n    title={'Data Visualization'}\n    url={`https://m2.material.io/design/communication/data-visualization.html`}\n/>\n\nTo avoid interfering with other UI elements, charts should be built using the Brightlayer UI [branding](/style/color#branding-colors) color palette.\n\n<React.Fragment>\n    <ImageGrid\n        images={[UsePrimaryColorDo, UsePrimaryColorDont]}\n        captionsUnderImages={[\n            'DO: Use branding colors for charts.',\n            'DONT: Never use the UI color palette for charts.',\n        ]}\n    />\n    <ImageGrid\n        images={[ClockwisePie]}\n        regularWidth\n        caption={'A pie chart should always be clockwise, as it reflects the clock rotating direction.'}\n    />\n    <MaterialDesignDescription\n        title={'Internationalization'}\n        url={'/patterns/internationalization'}\n        description={`Follow Brightlayer UI's guideline for mirroring UI contents.`}\n        avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n    />\n    <Divider />\n</React.Fragment>\n\n# Maps\n\n<ImageGrid\n    regularWidth\n    images={[MapsImg]}\n    caption={[\n        'A simple geographic map using the dark theme.',\n        'The embedded map is a screenshot from OpenStreetMap, licensed under CC-BY-SA 2.0.',\n    ]}\n/>\n\nMaps are used to represent spatial or geographical data. Typically they are used to plot sets of locations or facilities that a user is responsible for.\n\nMaps are usually full-screen elements and are interactive via scrolling, panning, zooming, etc.\n\n<Divider />\n\n# Mobile Charting\n\nThere are not as many charting libraries available for React Native applications as there are for web apps. Additionally, the feature-set of mobile charting libraries may not be as rich as their web counterparts. Brightlayer UI recommends [Victory Native](https://formidable.com/open-source/victory/docs/native/) as a viable library to consider when implementing graphs within a mobile app due to its relative popularity and clear documentation.\n\n<Divider />\n\n# Developers\n\nThere are many libraries and services for data visualizations. Brightlayer UI currently recommends themes / utilities for the following libraries:\n\n**React**:\n\n-   [Brightlayer Charts](https://brightlayer-charts.azurewebsites.net/) ([Storybook](https://brightlayer-charts-storybook.azurewebsites.net/))\n\n**React Native**:\n\n-   Charts & Graphs\n\n    -   [Victory Native](https://formidable.com/open-source/victory/docs/native/)\n"},"/style":{"title":"Style Guide"},"/style/logo":{"title":"App Logos","text":"import { MaterialDesignDescription, ImageGrid, TOC } from '../../app/components';\nimport ExampleOfIcon from '../../app/assets/styles/icon-guidelines/example-of-icon.png';\nimport ExampleOfLogo from '../../app/assets/styles/icon-guidelines/example-of-logo.png';\nimport ExampleOfPictogram from '../../app/assets/styles/icon-guidelines/example-of-pictogram.png';\nimport ExistingEatonAppLogos from '../../app/assets/styles/logos/existing-eaton-app-logos.png';\nimport Anatomy from '../../app/assets/styles/logos/anatomy.png';\nimport BottomBadge1 from '../../app/assets/styles/logos/bottom-badge-1.png';\nimport BottomBadge2 from '../../app/assets/styles/logos/bottom-badge-2.png';\nimport BottomBadge3 from '../../app/assets/styles/logos/bottom-badge-3.png';\nimport BottomBadge4 from '../../app/assets/styles/logos/bottom-badge-4.png';\nimport BottomBadge5 from '../../app/assets/styles/logos/bottom-badge-5.png';\nimport Background1 from '../../app/assets/styles/logos/background-1.png';\nimport Background2 from '../../app/assets/styles/logos/background-2.png';\nimport Background3 from '../../app/assets/styles/logos/background-3.png';\nimport BackgroundGradient1 from '../../app/assets/styles/logos/background-gradient-1.png';\nimport BackgroundGradient2 from '../../app/assets/styles/logos/background-gradient-2.png';\nimport BackgroundGradient3 from '../../app/assets/styles/logos/background-gradient-3.png';\nimport Glyph1 from '../../app/assets/styles/logos/glyph-1.png';\nimport Glyph2 from '../../app/assets/styles/logos/glyph-2.png';\nimport Glyph3 from '../../app/assets/styles/logos/glyph-3.png';\nimport PolishGlyph1 from '../../app/assets/styles/logos/polish-glyph-1.png';\nimport PolishGlyph2 from '../../app/assets/styles/logos/polish-glyph-2.png';\nimport GlyphKeyline from '../../app/assets/styles/logos/glyph-keyline.svg';\nimport PixelHinting1 from '../../app/assets/styles/logos/pixel-hinting-1.png';\nimport PixelHinting2 from '../../app/assets/styles/logos/pixel-hinting-2.png';\nimport PixelHinting3 from '../../app/assets/styles/logos/pixel-hinting-3.png';\nimport LogosOnDifferentPlatforms from '../../app/assets/styles/logos/logos-on-different-platforms.png';\nimport Favicon from '../../app/assets/styles/logos/favicon.png';\nimport Spec from '../../app/assets/styles/logos/spec.svg';\nimport SpecCircle from '../../app/assets/styles/logos/spec-circle.svg';\nimport SpecColor from '../../app/assets/styles/logos/spec-color.svg';\n\n{/* KEYWORDS: icon logo product badge */}\n\n# App Logos\n\nApp logos are the primary way users identify an app or a product. Not only do they appear on app launcher screens, but app logos are also present in app markets like the Apple App Store and Google Play, the company's product pages, browser tabs, browser home pages, emails, and within the app itself. They serve a critical function in a product's identity.\n\nEaton applications should follow these guidelines to create their app logo. The simplest way to do this is by using one of the provided app logo templates from Brightlayer UI (linked below) while keeping in mind requirements from different application platforms. You should ensure that your final design is simple, recognizable, and scalable.\n\n<TOC\n    anchors={[\n        { title: 'App Logos, Icons, and Pictograms' },\n        { title: 'Examples' },\n        { title: 'Anatomy' },\n        { title: 'Design Steps' },\n        { title: 'Tools', depth: 1 },\n        { title: 'Download the App Logo Template', depth: 1 },\n        { title: 'Background', depth: 1 },\n        { title: 'Glyph', depth: 1 },\n        { title: 'Bottom Badge', depth: 1 },\n        { title: 'Export', depth: 1 },\n        { title: 'Logo Requirements by Platforms' },\n        { title: 'Design Specifications' },\n    ]}\n/>\n\n# App Logos, Icons, and Pictograms\n\n{/* This section is adapted directly from icon guidelines. If you change something here, you may need to change it in the other file. */}\n\n<ImageGrid\n    images={[ExampleOfLogo, ExampleOfIcon, ExampleOfPictogram]}\n    captionsUnderImages={[`The logo of an app`, `An icon in a button`, `A pictogram on a webpage`]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\nThis guide deals specifically with the design of app logos, which should not be confused with other glyphs, such as icons and pictograms. App logos, sometimes referred to as \"app icons\", are symbols of products and apps, usually protected under trademark laws. [Icons](/style/icon-guidelines) symbolize common actions, objects, or ideas used to aid users. Pictograms are typically used on websites for decorative purposes only.\n\n> Note: if you need to use logos from other companies — such as a payment processor — make sure that you are compliant with their branding guidelines.\n\n# Examples\n\nBelow are some existing app logos used at Eaton.\n\n<ImageGrid\n    images={[ExistingEatonAppLogos]}\n    caption={`Some logo examples from existing Eaton apps. Copyright © 2022 Eaton, All Rights Reserved.`}\n    regularWidth\n/>\n\n# Anatomy\n\nA standard Eaton app logo consists of three parts:\n\n<ImageGrid images={[Anatomy]} caption={[`1: Background`, `2: Glyph`, `3: Bottom badge`]} />\n\n# Design Steps\n\n## Tools\n\nWe recommend using vector graphics design tools such as Adobe Illustrator or Figma to design your product logo. Raster graphic tools such as Adobe Photoshop might occasionally be useful for final touches, but they are not designed for vector graphics. They should not be used to design your logo's foundation because raster graphics are not scalable.\n\nDifferent app platforms have different requirements for image sizes — you will need to generate your logo at different resolutions to meet these requirements. There are online tools, such as [App Icon Generator](https://www.appicon.co/), to help automate this process.\n\nSome platforms may have specialized tools to preview the app logo. Android, for example, encourages developers to create adaptive icons using [Android Studio's Image Asset Studio](https://developer.android.com/studio/write/image-asset-studio#create-adaptive). Amazon Alexa has a web tool, [Alexa Icon Builder](https://developer.amazon.com/en-US/blogs/alexa/alexa-skills-kit/2018/08/create-eye-catching-icons-for-your-alexa-skills-in-minutes1), to allow users to generate Alexa Skill logos quickly.\n\n## Download the App Logo Template\n\n-   Adobe Illustrator\n    -   [iOS](https://github.com/etn-ccis/blui-doc-it/blob/master/src/app/assets/styles/logos/templates/iOS-IllustratorTemplate.ai?raw=true)\n    -   [Android Adaptive Icon](https://github.com/etn-ccis/blui-doc-it/blob/master/src/app/assets/styles/logos/templates/Android-Adaptive-Icon-IllustratorTemplate.ai?raw=true)\n-   [PDF (for printing)](https://github.com/etn-ccis/blui-doc-it/raw/master/src/app/assets/styles/logos/templates/App%20Logos%20Printable.pdf)\n-   [SVG](https://github.com/etn-ccis/blui-doc-it/tree/master/src/app/assets/styles/logos/templates/SVG)\n-   Our [Figma Component Sticker Sheet](https://www.figma.com/community/file/1024360297793425107) also includes a component called \"App Logo Template\"\n\n## Background\n\nMost Eaton app logos use [the primary blue](/style/color?category=ui&name=blue&weight=500) as the base background color. Some also select the background color from one of the [branding colors](/style/color#branding-colors) to stay consistent with colors in their product marketing.\n\n<ImageGrid\n    images={[Background1]}\n    captionsUnderImages={[`Use the primary blue or one of the branding colors as a foundation for the background.`]}\n    regularWidth\n/>\n\n<ImageGrid\n    images={[Background2, Background3]}\n    captionsUnderImages={[\n        `DONT: Do not use a photo in the logo.`,\n        `DONT: Do not use a screenshot or app UI in the logo.`,\n    ]}\n/>\n\n<ImageGrid\n    images={[BackgroundGradient1, BackgroundGradient2, BackgroundGradient3]}\n    captionsUnderImages={[\n        `DO: Most Eaton apps choose to add a subtle diagonal linear gradient to their app logo background.`,\n        `Apps may also consider using a centered radial gradient, especially when the glyph has a round shape.`,\n        `A monochromatic background is acceptable.`,\n    ]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\n## Glyph\n\nA glyph is a simple shape representing an object, action, or idea. Your glyph must be simple, recognizable, and scalable to ensure that your app can be easily identified on multiple devices with different resolutions.\n\nWe recommend you select your base glyph from our [icon library](/style/icon-library).\n\n<ImageGrid\n    images={[Glyph1, Glyph2]}\n    captionsUnderImages={[\n        `AVOID: Avoid the use of mnemonic logos or logotypes when possible. They are often not meaningful for first-time users, and can be hard to see in small logo sizes.`,\n        `DO: Use a graphical way to represent an application or product.`,\n    ]}\n/>\n\nDo not use the Eaton logo as a glyph — your app should not be presented as the \"Eaton\" app. It is not unusual for a customer to have multiple Eaton products and applications installed on their devices — if every one of those apps used the Eaton logo it would be very difficult for a user to differentiate them.\n\n<ImageGrid images={[Glyph3]} captionsUnderImages={[`DONT: Do not use the Eaton logo as glyphs.`]} />\n\nYou should also verify that your product logo is distinguished enough from other existing Eaton product logos. [App Store](https://apps.apple.com/us/developer/eaton-corporation/id439590491) and [Google Play](https://play.google.com/store/apps/developer?id=Eaton) are good places to start, but keep in mind that not all logos in these two places are following our app logo guidelines.\n\nGlyphs are usually aligned to the keyline (visible in the template) to avoid bleeding beyond the safe zone.\n\n<ImageGrid images={[GlyphKeyline]} captionsUnderImages={[`Align glyphs to the icon template keyline.`]} regularWidth />\n\nOnce you select the base glyph, you can be creative and add variations to the glyph to make it look more designed / stylized.\n\n<ImageGrid\n    images={[PolishGlyph1, PolishGlyph2]}\n    captionsUnderImages={[\n        `Smart Energy Manager modified the glyph shape to add a bolt glyph inside.`,\n        `Predict Pulse modified the glyph size, opacity, and image gradient.`,\n    ]}\n/>\n\n## Bottom Badge\n\nThe bottom badges are not meant to be modified. You are expected to leave the bottom badge as it is in the logo templates.\n\n<ImageGrid\n    images={[BottomBadge1, BottomBadge2, BottomBadge3, BottomBadge4, BottomBadge5]}\n    captionsUnderImages={[\n        `DO: Use the default badge as it is. Note that different platforms might have different requirements (see below).`,\n        `DONT: Don't modify the badge color.`,\n        `DONT: Don't modify the badge logo color.`,\n        `DONT: Don't modify the badge size or the logo size.`,\n        `DONT: Don't modify the badge effects or add shadows.`,\n    ]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\n## Export\n\nWhen exporting for different platforms, ensure that your logo design follows the platform-specific requirements [as listed below](#logo-requirements-by-platforms).\n\nWhen exporting for specific resolutions it is sometimes helpful to tweak vector shapes so that they fall on exact pixels, a process also known as \"pixel hinting\". This helps maintain a “crisp” look and avoids the blurriness that may occur when edges are in between pixels.\n\n<ImageGrid\n    images={[PixelHinting1, PixelHinting2, PixelHinting3]}\n    captionsUnderImages={[\n        `The original app logo design.`,\n        `When this design is shrinked to a small size, the details become illegible.`,\n        `Pixel-hinting helps sharpening the app logo at low resolutions.`,\n    ]}\n    caption={`Pixel hinting is helpful for app logos at low resolutions.`}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\nDo not export your final app logo with rounded corners or drop shadows. You are encouraged to preview the logo design with these effects enabled, but your final exported assets should be square-shaped. The additional effects are automatically applied by the application platform.\n\n# Logo Requirements by Platforms\n\n<ImageGrid\n    images={[LogosOnDifferentPlatforms]}\n    caption={[\n        `App logos look different on different platforms.`,\n        `1: The original design.`,\n        `2: iOS & iPadOS's rendering.`,\n        `3: Favicon for web apps, previewed at a high resolution.`,\n        `4: Amazon Alexa Skills' rendering.`,\n        `5 – 8: Android's adaptive icon allows phone manufacturers to render app logos in different shapes.`,\n    ]}\n    regularWidth\n/>\n\nDifferent platforms have different product logo requirements — they often have different shapes, resolutions, safe areas, and parallax layers. Click on the links below to learn more about logo guidelines on each platform.\n\n-   [Apple (iOS, iPadOS, macOS, tvOS, watchOS)](https://developer.apple.com/design/human-interface-guidelines/foundations/app-icons/)\n-   Android\n    -   [Adaptive Icons](https://developer.android.com/develop/ui/views/launch/icon_design_adaptive), for generic Android app logos\n        -   [Image Asset Studio](https://developer.android.com/studio/write/image-asset-studio.html) in Android Studio\n        -   Adaptive Icon [Design Guide](https://medium.com/google-design/designing-adaptive-icons-515af294c783)\n    -   [Google Play](https://developer.android.com/distribute/google-play/resources/icon-design-specifications), for the app's download page on Google Play\n-   [Windows](https://learn.microsoft.com/en-us/windows/apps/design/style/iconography/app-icon-design)\n\n## Favicons\n\nFavicons are product logos for web apps. They can appear at different sizes in browser tabs, task bars, bookmarks, and on phone screens (like native mobile apps). We highly recommend redesigning the app logo specifically for the favicon to ensure that it shows well at all resolutions.\n\nAccording to [Mailchimp](https://mailchimp.com/resources/favicon-size/), the optimal favicon dimensions are as follows, in pixels:\n\n-   Browser tab favicons - 16×16\n-   Taskbar shortcut icons - 32×32\n-   Desktop shortcut icons - 96×96\n-   Apple touch icons - 180×180\n\nDevelopers should [include multiple favicons](https://blog.hubspot.com/website/what-is-a-favicon) for these different resolutions in the HTML head to accommodate these various use cases.\n\nFavicons used in browser tabs and taskbar shortcuts resemble the original product logo design, but with the badge removed. It always has the background color to ensure that the glyph can be seen clearly.\n\n<ImageGrid\n    images={[Favicon]}\n    caption={[\n        `Favicon needs to be recognizable at a size as small as 16×16 pixels.`,\n        `1: The original product logo, with the bottom badge removed to allow more room for the glyph.`,\n        `2: The same logo, rendered at 16×16, a favicon size used in browser tabs.`,\n        `3: Optionally, you can consider doing \"pixel-hinting\" — manually editing the favicon to ensure that it renders well at low resolution.`,\n        `4: The favicon in a browser tab.`,\n    ]}\n    regularWidth\n/>\n\nDesktop shortcuts and Apple touch icons should resemble the design of standard app logos.\n\n# Design Specifications\n\nThe provided templates have implemented these specifications for you already, but they are presented here for your reference if you need to make any customizations:\n\n<ImageGrid\n    images={[Spec, SpecCircle, SpecColor]}\n    captionsUnderImages={[\n        `A regular app logo.`,\n        `For platforms using round app logo shapes, such as Android's adaptive icon and Amazon Alexa Skills, the Eaton logo in the badge is shrunk to remain visible.`,\n        `The glyph should not be brighter than white[50] (pure white) at 90% to avoid looking too glaring.`,\n    ]}\n/>\n"},"/style/color":{"title":"Color Palette","text":"import React from 'react';\nimport {\n    ColorPalette,\n    HeadlineWithToggle,\n    MaterialDesignDescription,\n    ColorBottomSheet,\n    Divider,\n} from '../../app/components';\nimport { Typography } from '@mui/material';\n\n{/* KEYWORDS: design style color palette branding */}\n\n<HeadlineWithToggle />\n\nBrightlayer UI offers a variety of different colors for use in your applications. Our color palettes utilize a weighted approach to give designers and developers a versatile set of colors for solving common color-related issues (e.g., [accessibility](/design/accessibility)).\n\n<MaterialDesignDescription\n    title={'The Color System'}\n    url={'https://m2.material.io/design/color/'}\n    description={`Material's color principles. You should adhere to Brightlayer UI's color theme unless you are creating your own components.`}\n/>\n\nOur color sets are divided into sections as outlined below. User Interface and Status colors are available in a single package ([@brightlayer-ui/colors](https://www.npmjs.com/package/@brightlayer-ui/colors)). Branding (Charts and Graphs) colors are available as an additional package ([@brightlayer-ui/colors-branding](https://www.npmjs.com/package/@brightlayer-ui/colors-branding)).\n\n<Divider />\n\n# User Interface Colors\n\nUser Interface colors are designed to be the main colors used in the application. Use them in elements such as app bars, toolbars, page backgrounds, buttons, text, etc. These colors may also be used in branding or marketing of products and services.\n\n### Blue\n\n<ColorPalette name={'blue'} category={'ui'} />\n\n### White\n\n<ColorPalette name={'white'} category={'ui'} />\n\n### Gray\n\n<ColorPalette name={'gray'} category={'ui'} />\n\n### Black\n\nAvoid the use of pure black (**#000000**) in a UI, except in instances where you have a Dark Mode display on an OLED screen.\n\n<ColorPalette name={'black'} category={'ui'} />\n\n### Dark Black\n\nThese colors are only for [dark themes](/style/themes#dark-theme--blue-dark-theme).\n\n<ColorPalette name={'darkBlack'} category={'ui'} />\n<Divider />\n\n# Status Colors\n\nStatus colors have a special meaning in the context of Brightlayer UI applications. They are used to communicate information such as Alarms, Warnings, Successes, Running or Energized status, etc. These colors should **_never_** be used purely as marketing colors and **_never_** used without a clear purpose. Status colors should be used to reinforce a status or state throughout an interface. For example, an alarm row in a list may use a red colored bell icon, paired with red text and a red border stripe. When navigating to details for that alarm, the app bar may be colored red. This will solidify the association that red = alarm = bell and make it easier for a user to find alarms at a glance in an application.\n\n### Red\n\nRed is used to denote Alarms and Errors. Avoid using it for any other purpose.\n\n<ColorPalette name={'red'} category={'ui'} />\n\n### Orange\n\nOrange is used to denote warnings, loss of communication, and other types of alerts. Avoid using it for any states that do not require attention.\n\n<ColorPalette name={'orange'} category={'ui'} />\n\n### Gold\n\nGold can be used to give additional variety to your alerts in combination with Red and Orange.\n\n<ColorPalette name={'gold'} category={'ui'} />\n\n### Yellow\n\nYellow can be used to indicate tripped status for electrical devices, or low-level alerts.\n\n<ColorPalette name={'yellow'} category={'ui'} />\n\n### Green\n\nGreen can be used to indicate \"safety\", \"good\", \"success\", or other positive states.\n\n<ColorPalette name={'green'} category={'ui'} />\n\n### Light Blue\n\nLight Blue should not be confused with the UI Blue. This can be used to indicate a variety of statuses, including Maintenance Mode, device disabled, etc.\n\n<ColorPalette name={'lightBlue'} category={'ui'} />\n\n### Purple\n\nPurple is used to denote a device is disarmed. Avoid using it for any states that do not require attention.\n\n<ColorPalette name={'purple'} category={'ui'} />\n<Divider />\n\n# Branding Colors\n\nThis expanded version of the color palette contains colors to be used for marketing, product identity, [data visualization](/patterns/visualizations) (non-status), etc. Brightlayer UI uses these colors as the palette for charting and graphing.\n\n### Blue\n\n<ColorPalette name={'blue'} category={'branding'} />\n\n### Teal\n\n<ColorPalette name={'teal'} category={'branding'} />\n\n### Citron\n\n<ColorPalette name={'citron'} category={'branding'} />\n\n### Pine\n\n<ColorPalette name={'pine'} category={'branding'} />\n\n### Emerald\n\n<ColorPalette name={'emerald'} category={'branding'} />\n\n### Wine\n\n<ColorPalette name={'wine'} category={'branding'} />\n\n### Crimson\n\n<ColorPalette name={'crimson'} category={'branding'} />\n\n### Sunset\n\n<ColorPalette name={'sunset'} category={'branding'} />\n\n### Rust\n\n<ColorPalette name={'rust'} category={'branding'} />\n\n### Navy\n\n<ColorPalette name={'navy'} category={'branding'} />\n\n### Sky\n\n<ColorPalette name={'sky'} category={'branding'} />\n\n### Sage\n\n<ColorPalette name={'sage'} category={'branding'} />\n\n### Toad\n\n<ColorPalette name={'toad'} category={'branding'} />\n\n### Butter\n\n<ColorPalette name={'butter'} category={'branding'} />\n\n### Goldenrod\n\n<ColorPalette name={'goldenrod'} category={'branding'} />\n\n### Trophy\n\n<ColorPalette name={'trophy'} category={'branding'} />\n\n<ColorBottomSheet />\n"},"/style/icon-guidelines":{"title":"Icon Guidelines","text":"import React from 'react';\nimport {\n    MaterialDesignDescription,\n    ImageGrid,\n    Divider,\n    TOC,\n    ProgressIconCard,\n    regularWidth,\n    UniversalIconBrowser,\n} from '../../app/components';\nimport PxblueSmallAltIcon from '@brightlayer-ui/icons-mui/PxblueSmallAlt';\nimport FilePdf from '@brightlayer-ui/icons-mui/FilePdf';\nimport LinkIcon from '@mui/icons-material/Link';\n\n{/* Images */}\n\nimport ExampleOfIcon from '../../app/assets/styles/icon-guidelines/example-of-icon.png';\nimport ExampleOfLogo from '../../app/assets/styles/icon-guidelines/example-of-logo.png';\nimport ExampleOfPictogram from '../../app/assets/styles/icon-guidelines/example-of-pictogram.png';\nimport IconButtonOnTable from '../../app/assets/styles/icon-guidelines/icon-button-on-table.png';\nimport IconButtonOnTable2 from '../../app/assets/styles/icon-guidelines/icon-button-on-table-2.png';\nimport AmbiguousIconToggleGroup from '../../app/assets/styles/icon-guidelines/ambiguous-icon-toggle-group.png';\nimport AmbiguousIconToggleGroup2 from '../../app/assets/styles/icon-guidelines/ambiguous-icon-toggle-group-2.png';\nimport IconButtonMicroInteraction from '../../app/assets/styles/icon-guidelines/icon-button-micro-interaction.svg';\nimport IconButtonRegular from '../../app/assets/styles/icon-guidelines/icon-button-regular.svg';\nimport IconButtonDense from '../../app/assets/styles/icon-guidelines/icon-button-dense.svg';\nimport IconButtonAppBar from '../../app/assets/styles/icon-guidelines/icon-button-app-bar.png';\nimport IconButtonList from '../../app/assets/styles/icon-guidelines/icon-button-list.png';\nimport IconButtonTextField from '../../app/assets/styles/icon-guidelines/icon-button-text-field.png';\nimport IconButtonQuestionMark from '../../app/assets/styles/icon-guidelines/icon-button-question-mark.png';\nimport InactiveIconSuccess from '../../app/assets/styles/icon-guidelines/inactive-icon-success.png';\nimport InactiveIconUserPref from '../../app/assets/styles/icon-guidelines/inactive-icon-user-pref.png';\nimport InactiveIconVolume from '../../app/assets/styles/icon-guidelines/inactive-icon-volume.png';\nimport InactiveIconHeroes from '../../app/assets/styles/icon-guidelines/inactive-icon-heroes.png';\nimport InactiveIconInsideButtons from '../../app/assets/styles/icon-guidelines/inactive-icon-inside-buttons.png';\nimport InactiveIconMeaningless from '../../app/assets/styles/icon-guidelines/inactive-icon-meaningless.png';\nimport ConfusedHamburger from '../../app/assets/styles/icon-guidelines/confused-hamburger.png';\nimport ConfusedSettings from '../../app/assets/styles/icon-guidelines/confused-settings.png';\nimport DeviceIcon1 from '../../app/assets/styles/icon-guidelines/device-icon-1.png';\nimport DeviceIcon2 from '../../app/assets/styles/icon-guidelines/device-icon-2.png';\nimport WarningTwoColorLight from '../../app/assets/styles/icon-guidelines/warning-two-color-light.svg';\nimport WarningTwoColorDark from '../../app/assets/styles/icon-guidelines/warning-two-color-dark.svg';\nimport FilledIcon from '../../app/assets/styles/icon-guidelines/filled-icon.png';\nimport OutlinedIcon from '../../app/assets/styles/icon-guidelines/outlined-icon.png';\nimport IconVariation from '../../app/assets/styles/icon-guidelines/icon-variation.png';\nimport IconVariation2 from '../../app/assets/styles/icon-guidelines/icon-variation-2.png';\nimport IconNavItem1 from '../../app/assets/styles/icon-guidelines/icon-variation-nav-item-1.png';\nimport IconNavItem2 from '../../app/assets/styles/icon-guidelines/icon-variation-nav-item-2.png';\nimport ProgressIcon1 from '../../app/assets/styles/icon-guidelines/progress-icon-1.png';\nimport ProgressIcon2 from '../../app/assets/styles/icon-guidelines/progress-icon-2.png';\nimport DesignTemplate from '../../app/assets/styles/icon-guidelines/design-template.svg';\nimport DesignTemplateOutline from '../../app/assets/styles/icon-guidelines/design-template-outline.svg';\nimport DesignTemplateFinished from '../../app/assets/styles/icon-guidelines/design-template-finished.svg';\n\n{/* KEYWORDS: icon icons guideline logo */}\n\n# Icon Guidelines\n\nIcons can be a great visual aid to enhance the usability of your application. If designed carefully, icons are fast to recognize, save up screen space and require no translations. However, if icons are not properly used, they can be misleading as well.\n\n<MaterialDesignDescription\n    title={'Brightlayer UI Icon Library'}\n    url={`/style/icon-library`}\n    description={`All available icons from Brightlayer UI and Material Design`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n\n<TOC\n    anchors={[\n        { title: 'Introduction', hash: '#icons' },\n        { title: 'Icons, Pictograms, and Logos' },\n        { title: 'Icon Usage' },\n        { title: 'Text Labels and Icons', depth: 1 },\n        { title: 'Icon Buttons', depth: 1 },\n        { title: 'Decorative Icons Inside a Component', depth: 1 },\n        { title: 'Common Universal Icons', depth: 1 },\n        { title: 'Common Device Icons', depth: 1 },\n        { title: 'Icon Variations' },\n        { title: 'Multi-Colored Icons', depth: 1 },\n        { title: 'Filled and Outlined Icons', depth: 1 },\n        { title: 'Progress Icons', depth: 1 },\n        { title: 'Internationalization', depth: 1 },\n        { title: 'Design Your Own Icons' },\n    ]}\n/>\n\n<Divider />\n\n# Icons, Pictograms, and Logos\n\n{/* This section is also used in logo guidelines. If you change something here, you may need to change it in the other file. */}\n\n<ImageGrid\n    images={[ExampleOfIcon, ExampleOfPictogram, ExampleOfLogo]}\n    captionsUnderImages={[`An icon in a button`, `A pictogram on a webpage`, `The logo of an app`]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\nThis guide talks specifically about the design of icons, which should not be confused with other glyphs, such as pictograms and logos. Icons symbolize common actions, objects, or ideas used to aid users. Pictograms are typically used on websites for decorative purposes only. [Logos](/style/logo) are symbols of products and organizations, usually protected under trademark laws.\n\n> Note: if you need to use logos from other companies — such as a payment processor — make sure that you are compliant with their branding guidelines.\n\n<Divider />\n\n# Icon Usage\n\n## Text Labels and Icons\n\nWhere possible, you should avoid using icons in isolation. In many situations, text labels convey the message more accurately, while icons may require a lot of guesswork. Introducing new icons / meanings is like forcing your users to learn a new language. If your application is a mission-critical system, users might even be reluctant to press a button if they do not understand its meaning.\n\n<MaterialDesignDescription\n    title={'Icon Usability'}\n    url={`https://www.nngroup.com/articles/icon-usability/`}\n    description={`Best usability practices for icons`}\n    avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n/>\n\n<ImageGrid\n    images={[IconButtonOnTable, IconButtonOnTable2, AmbiguousIconToggleGroup, AmbiguousIconToggleGroup2]}\n    captionsUnderImages={[\n        `DONT: Do not use icon buttons when there is plenty of room.`,\n        `DO: Use button labels to call out the action.`,\n        `DONT: Do not use icons when their meanings are ambiguous.`,\n        `DO: Use text to avoid ambiguity.`,\n    ]}\n/>\n\n## Icon Buttons\n\nIcon buttons are standalone icons that are clickable. On desktop applications, you should always use a tooltip on hover (unless it is a universal icon — see [below](#common-universal-icons)). On mobile, icon buttons are generally discouraged unless they are one of the universal icons.\n\n<ImageGrid\n    images={[IconButtonMicroInteraction]}\n    regularWidth\n    captionsUnderImages={[\n        `DO: On desktop, icon buttons should trigger a tooltip on hover, unless they are \"universal icons\".`,\n    ]}\n/>\n\nIcon buttons are primarily used where space is limited, such app bars and lists / tables.\n\n<ImageGrid\n    images={[IconButtonAppBar, IconButtonList, IconButtonTextField, IconButtonQuestionMark]}\n    captionsUnderImages={[\n        `App bar with icon buttons.`,\n        `List item showing icon buttons on hover with overflowing list actions.`,\n        `Text field using a visibility toggle icon.`,\n        `A question mark icon leading to a tooltip with explanations to the context.`,\n    ]}\n/>\n\nIcon buttons are usually displayed at **24x24dp** to ensure that they are easily recognized, while their touch areas are sized at least **40x40dp** to ensure that they are accessible.\n\n<ImageGrid\n    images={[IconButtonRegular, IconButtonDense]}\n    caption={[\n        `In icon buttons, icons are sized at 24x24dp.`,\n        `Spacing between two icon buttons is 24dp (regular) or 16dp (dense, where space is limited).`,\n        `Distance between an icon and its parent container's edge is 16dp.`,\n        `The minimum touch area size of an icon button is 40x40dp, as noted by the red dashed lines. Note that this is also the \"ripple size\".`,\n    ]}\n/>\n\n## Decorative Icons Inside a Component\n\nInactive icons are frequently used in components, either as a decorative visual aid to help guide users' attention or to clarify a situation.\n\n<ImageGrid\n    images={[\n        InactiveIconSuccess,\n        InactiveIconUserPref,\n        InactiveIconVolume,\n        InactiveIconInsideButtons,\n        InactiveIconHeroes,\n    ]}\n    captionsUnderImages={[\n        `Use decorative icons to make your interface more friendly.`,\n        `Icons increase the scanability and help non-native speakers understand the user interface better.`,\n        `Icons explicitly pointing out what's \"implied\" by the directionality.`,\n        `Buttons with \"prefixed\" icons.`,\n        `Hero components showing different parameters, where icons attract visual interests from users.`,\n    ]}\n/>\n\nNote that not everything needs an icon to decorate it. If an icon does not help users quickly recognize something at a glance, it will only distract them.\n\n<ImageGrid\n    images={[InactiveIconMeaningless]}\n    captionsUnderImages={[`AVOID: Avoid using meaningless icons to distract users.`]}\n/>\n\n## Common Universal Icons\n\nA few icons are so widely used these days that they are considered “universal” icons — they carry the same meaning no matter which application they are used in.\n\n<UniversalIconBrowser />\n\nYou should never use a universal icon in a distorted way that mismatches its original meaning.\n\n<ImageGrid\n    images={[ConfusedHamburger, ConfusedSettings]}\n    captionsUnderImages={[\n        `DONT: Do not use the \"hamburger\" menu icon for anything else other than controlling drawer to open / close.`,\n        `DONT: \"Cog\" icon and \"wrench\" icon can both mean \"configuration\", but the connotation of \"wrench\" focuses more on the \"service\" or \"repair\" of physical equipment. A \"cog\" settings icon should be used here instead.`,\n    ]}\n/>\n\n## Common Device Icons\n\nBrightlayer UI offers a wide variety of icons for industrial equipment-related icons. Some of them are designed based on their function, while others are designed based on how the device itself looks. We also offer symbols commonly used in one-line diagrams ([@brightlayer-ui/symbols](https://www.npmjs.com/package/@brightlayer-ui/symbols) and [@brightlayer-ui/symbols-mui](https://www.npmjs.com/package/@brightlayer-ui/symbols-mui)).\n\nIcons are meant to be simple — it is unwise to try to use icons to convey very specific or very technical concepts. For example, it's a losing battle to try to define an icon for every single parameter in every single device — users will not be able to remember / distinguish what all of these icons mean. It's better to use a more general icon that can refer to categories of devices or parameters. You may read more about this in the {/* <!-- markdown-link-check-disable --> */}\"[No 'Single-Purpose Icons'](#no-\"single-purpose-icons\")\"{/* <!-- markdown-link-check-enable --> */} section below.\n\n<ImageGrid\n    images={[DeviceIcon1, DeviceIcon2]}\n    captionsUnderImages={[\n        `AVOID: Avoid assigning a separate icon for each device model. You are expecting users to distinguish between a highly similar set of icons and remember it for their next use.`,\n        `Use icons and symbols to represent device categories when they follow industry standards.`,\n    ]}\n/>\n\n<Divider />\n\n# Icon Variations\n\n## Multi-Colored Icons\n\n[WCAG 2.2 AA level requires](https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html) that non-textual contents of a webpage, including icons, must achieve a minimum color contrast ratio of 3:1. However, yellow icons are used for warnings and often have a contrast ratio of less than 2:1. In this situation, using two colors can make these icons more legible.\n\n<ImageGrid\n    images={[WarningTwoColorLight, WarningTwoColorDark]}\n    captionsUnderImages={[\n        `A \"Warning\" icon, using yellow for the background and dark brown for the foreground.`,\n        `This accessibility issue is less concerning in a dark theme.`,\n    ]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\n## Filled and Outlined Icons\n\nMaterial Design offers icons in both filled and outlined styles. Brightlayer UI applications typically use the filled style, as it provides better legibility at a small scale. If you choose to use outlined styles instead, however, you must ensure your icon style stays consistent through the application.\n\n<ImageGrid\n    images={[FilledIcon, OutlinedIcon]}\n    captionsUnderImages={[\n        `DO: A list with only filled-styled icons. This is the default style for Brightlayer UI applications.`,\n        `A list with only outlined-styled icons.`,\n    ]}\n/>\n\nYou also have the option to use filled and outlined icons to indicate state. In this case, a filled icon indicates that the item is active, while an outlined icon indicates that the item is inactive.\n\n<ImageGrid\n    images={[IconVariation, IconVariation2]}\n    captionsUnderImages={[\n        `When a status count is positive, consider using a colored and filled icon style.`,\n        `As a status count drops to zero, its icon grays out and changes from the filled style to the outlined style.`,\n    ]}\n/>\n\n<ImageGrid\n    images={[IconNavItem1, IconNavItem2]}\n    caption={`You may also choose to use outlined icons for inactive navigation items, and filled icons for the current active one.`}\n/>\n\n## Progress Icons\n\nProgress icons are used as a mini data visualization to display percentages over a whole. It can be the remaining device's health, battery life percentage, etc.\n\n<ImageGrid\n    images={[ProgressIcon1, ProgressIcon2]}\n    caption={`Applications with dashboards often use progress icons as a way to visualize data in a non-intrusive way.`}\n/>\n\nBrightlayer currently offers the following progress icons to its designers and developers:\n\n<ProgressIconCard />\n\n## Internationalization\n\nIn right-to-left languages, icons with directionality must be mirrored. Read more about it on our [internationalization pattern page](</patterns/internationalization#bidirectionality--right-to-left-(rtl)-support>).\n\n<Divider />\n\n# Design Your Own Icons\n\nBrightlayer UI welcomes new suggestions to our existing icon repositories. However, before you start designing, there are a few things you should keep in mind.\n\n## No \"Single-Purpose Icons\"\n\nIf you find yourself struggling for more than 30 seconds to design an icon concept, it's probably too complicated and your users won't understand it anyway.\n\nIcons designed for a very specific purpose, such as “transfer admin rights” instead of “transfer”, tend to be so complicated that the icon no longer serves as an easy-to-recognize symbol, because it is impractical to pack so much information in a confined 24x24 space.\n\nSimilarly, avoid inventing an icon for a very specific device model, unless this device stands out and is iconic in the industry (example: Dyson fans). If an average user cannot easily tell devices apart from each other in real life from a glance, a 24x24 dp icon usually contains fewer details and more abstractions, and will not bring a positive user experience.\n\n## Existing Icon Repositories\n\nBefore going down the path of defining new icons, make sure to check existing icon resources. In addition to Material Design's [official icon set](https://fonts.google.com/icons?icon.set=Material+Icons) and Brightlayer UI's [icon set](/style/icon-library), you may also check out [materialdesignicons.com](https://materialdesignicons.com/), a community-driven icon repository that follows Material Design's icon guidelines.\n\nYou are welcome to take design inspirations from other sources like {/* <!-- markdown-link-check-disable --> */}[Font Awesome](https://fontawesome.com/){/* <!-- markdown-link-check-enable --> */} or follow regulation documents such as those from ANSI and ISO. You are also encouraged to refer to your competitors and see if they have any established conventions. However, you should follow the style guide, as explained below.\n\n> Note: just because an icon exist in an icon repository does not mean you have to use it. Before taking design inspirations, make sure that you first evaluate if an icon is appropriate in your app design.\n\n## Follow the Style Guide\n\n<MaterialDesignDescription\n    title={'System icons'}\n    url={'https://m2.material.io/design/iconography/system-icons.html#'}\n    description={`Material Design's guidelines on creating your own icons.`}\n/>\n\nYou **must** follow the existing Material Design style guide when creating your own icons. You may take inspiration from other sources, but you must update the style so that they fit with existing Brightlayer UI icons.\n\n<ImageGrid\n    images={[DesignTemplate, DesignTemplateOutline, DesignTemplateFinished]}\n    captionsUnderImages={[`A blank icon design template, also available through our Figma component sticker sheet.`]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n\n<MaterialDesignDescription\n    title={'Brightlayer UI Figma Component Sticker Sheet'}\n    url={`https://www.figma.com/community/file/1024360297793425107`}\n    description={`The component sticker sheet includes Material Design icons, Brightlayer UI icons, and the icon template above.`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n<MaterialDesignDescription\n    title={'Printable icon sketch template'}\n    url={`https://github.com/etn-ccis/blui-icons/raw/master/design/MDILetter.pdf`}\n    description={`Download templates, print them, and design on a paper.`}\n    avatar={<FilePdf style={{ width: 48, height: 48 }} />}\n/>\n\n## Test the Icon\n\nYou must test your new icons through usability testing, either by asking participants questions (“what do you think this icon represents”) or by observing them completing a task using the icon. We also encourage you to test the icon next to other visually-similar icons.\n\nFor icons that are meant to be used inside buttons — usually icons representing an action, you are required to test them at 16x16dp to ensure that they are still recognizable at a smaller scale.\n\n<MaterialDesignDescription\n    title={'Icon Testing'}\n    url={`https://www.nngroup.com/articles/icon-testing/`}\n    description={`Guides on how to test your new and existing icons`}\n    avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n/>\n\n## Inner-source into Brightlayer UI\n\nWe welcome icon suggestions. If you would like to request your icon design to be added to our icon repository or request us to design an icon for you, please [contact us](/community/contactus). The UX team will review your request and provide a recommendation within 48 hours on whether to introduce a new icon or use an existing icon instead.\n\nIf you are requesting us to add your icon design, please follow [the guideline for exporting SVG icons](https://github.com/etn-ccis/blui-icons/blob/master/design/README.md). You shall also provide us (1) the icon author we can publicly attribute to, (2) a brief description of what the intended use is, and (3) if possible a picture of where it will live in the context of your application.\n\nIf you are requesting us to design an icon for you instead, please provide us a brief description of what the intended use is along with your request. Please note that going this route may take extra time, so try to get requests in as early as possible.\n"},"/style/icon-library":{"title":"Icon Library","text":"import React from 'react';\nimport { IconBrowser, MaterialDesignDescription } from '../../app/components';\nimport PxblueSmallAltIcon from '@brightlayer-ui/icons-mui/PxblueSmallAlt';\n\n{/* KEYWORDS: design style icons progress */}\n\n# Icon Library\n\nBrightlayer UI is built on top of the Google Material design system, which allows us to take advantage\nof their extensive icon library and icon grid. These icons are available automatically when you use one\nof our supported Material component frameworks. Brightlayer UI also includes a number of supplemental icons\nspecific to Brightlayer UI products.\n\nThese icons are available in a variety of formats - select an icon below to view its usage instructions.\n\n<MaterialDesignDescription\n    title={'Brightlayer UI Icon Guideline'}\n    url={`/style/icon-guidelines`}\n    description={`Learn about when and how to use icons effectively`}\n    avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n/>\n\n<IconBrowser />\n"},"/style/illustrations":{"title":"Illustrations","text":"import React from 'react';\nimport { MaterialDesignDescription, ImageGrid } from '../../app/components';\nimport { PictureAsPdf as PDFIcon } from '@mui/icons-material';\nimport LightThemeImage from '../../app/assets/styles/illustrations/illustration-light-theme.svg';\nimport DarkThemeImage from '../../app/assets/styles/illustrations/illustration-dark-theme.svg';\nimport BackgroundShapeImage from '../../app/assets/styles/illustrations/illustration-background.png';\nimport AnimationImage from '../../app/assets/styles/illustrations/animation.gif';\n\n{/* KEYWORDS: design illustration graph onboarding */}\n\n# Illustrations\n\nIllustrations are design elements that should be used mostly for onboarding screens and [empty states](/patterns/empty-states). Do not use illustrations where you are supposed to use icons.\n\nYou should adhere to these guidelines when creating your own illustrations. Alternatively, you may also use existing illustrations / artwork from repositories such as [Icons8](https://icons8.com), [Adobe Stock](https://stock.adobe.com/vectors), or [Humaaans Figma plugin](https://www.figma.com/community/plugin/739503328703046360). We recommend finalizing your illustrations with {/* <!-- markdown-link-check-disable --> */}[Adobe Illustrator](https://www.adobe.com/products/illustrator.html){/* <!-- markdown-link-check-enable --> */}, as it provides more export options than other tools.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Onboarding'}\n        url={'https://m2.material.io/design/communication/onboarding.html'}\n        description={`Material Design's guidelines on onboarding screens.`}\n    />\n    <MaterialDesignDescription\n        title={'Google Fiber Brand Illustration Guidelines'}\n        url={`https://fiber-brand.appspot.com/illustration`}\n        description={`You are encouraged to follow their illustration guidelines.`}\n        avatar={<PDFIcon style={{ width: 40, height: 40 }} />}\n    />\n</React.Fragment>\n\n## Designing the Illustration\n\n### Perspective\n\nYour illustration should be either facing the subject matter parallel to the ground (not viewing it from above or below) or in parallel projection.\n\n### Ratio\n\nThe aspect ratio of your illustrations should be between 1:1 and 2:3 to avoid filling the full screen on mobile devices (leave room for buttons, steppers, etc.). If you are designing exclusively for desktop applications (i.e., the illustration will never show up on mobile), you can go wider, but no more than 16:9.\n\n### Drawing Style\n\nKeep your style consistent within the application. This style should also extend to any marketing sites for the product for consistency. Do not be too abstract or artistic — your main goal is to inform your users of the features in your product, not to decorate it.\n\n### Text\n\nAvoid the use of text wherever possible. It can be hard to see on mobile and will be ineffective if your application needs to support multiple languages. If you have to use text, use Open Sans as the font and ensure that words are legible on your smallest targeted device.\n\n### Color\n\nUse the [Brightlayer UI color palette](/style/color) for your [local colors](<https://en.wikipedia.org/wiki/Local_color_(visual_art)>). You should use some shade of blue in the foreground of your images (these can be colors from the Blue, Light Blue, or Branding Blue palettes).\n\nAvoid using colors that may blend into the application background (add a background color to to your images to help them stand out). Avoid using the 500 colors from the color palette, as they may blend in among other UI elements (buttons, etc.).\n\nAvoid using too many strokes, especially light strokes on dark backgrounds or vice-versa. Your illustrations may be reused as infographics, and line strokes could interfere with labels.\n\nTest your illustrations on both light (white 50) and dark (black 900) application backgrounds. If your application will support multiple themes, we recommended having a version of your illustrations for each.\n\nSimulate your illustrations under different colorblind conditions. Ensure your color schemes are still intact.\n\nTo maximize accessibility, use online tools (such as a [color blindness simulator](https://pilestone.com/pages/color-blindness-simulator-1)) to simulate viewing your illustrations under different colorblind conditions. Ensure that your illustrations are still visible and effective.\n\n<ImageGrid\n    images={[LightThemeImage, DarkThemeImage]}\n    caption={'Two versions of the same design for light theme (left) and dark theme (right).'}\n/>\n<ImageGrid\n    images={[BackgroundShapeImage]}\n    caption={'Illustration backgrounds can be either a fixed shape (left) or full-bleed (right).'}\n    regularWidth\n/>\n\n### Animation\n\n<ImageGrid images={[AnimationImage]} caption={'An animated empty state illustration.'} />\n\nAnimations can draw attention to important parts of the graphic that are not easily conveyed with a static image. When combined with instructional text, they can provide a very interactive onboarding experience. You can use tools such as [Lottie](https://lottiefiles.com/) to implement and export your animation.\n\n## Export\n\nWhen finished with your artwork, remember to outline stroke. If you are using text in your illustrations (see above), do not convert to outline or stroke any of those elements — leave them as text for future translation, if necessary.\n\nName and group your root SVG layers semantically for animating. Do not minify the SVG code, as this will eliminate the naming.\n\nExport your illustrations as SVG with at least 2 decimal precision and presentation attributes enabled. After exporting, check that your graphics look correct (for higher detail graphics, you may need a higher decimal precision to keep paths smooth).\n"},"/style/typography":{"title":"Typography","text":"import React from 'react';\nimport { ImageGrid, MaterialDesignDescription, TypographyTable, TOC } from '../../app/components';\nimport { Divider, Typography } from '@mui/material';\nimport PxblueSmallAltIcon from '@brightlayer-ui/icons-mui/PxblueSmallAlt';\n\n{/* Images */}\n\nimport SimplifiedChineseImg from '../../app/assets/styles/typography/noto-sans-cjk-sc.png';\nimport AppBar from '../../app/assets/styles/typography/subtitle-variations.png';\nimport ScoreCard from '../../app/assets/styles/typography/scorecard-variations.png';\nimport CompeteAttention1 from '../../app/assets/styles/typography/compete-attention-1.png';\nimport CompeteAttention2 from '../../app/assets/styles/typography/compete-attention-2.png';\nimport TextHierarchy1 from '../../app/assets/styles/typography/text-hierarchy-1.png';\nimport TextHierarchy2 from '../../app/assets/styles/typography/text-hierarchy-2.png';\nimport TextHierarchy3 from '../../app/assets/styles/typography/text-hierarchy-3.png';\nimport TextHierarchy4 from '../../app/assets/styles/typography/text-hierarchy-4.png';\nimport StatusColor1 from '../../app/assets/styles/typography/status-color-1.png';\nimport StatusColor2 from '../../app/assets/styles/typography/status-color-2.png';\n\n{/* KEYWORDS: design style typography text */}\n\n# Typography Guidelines\n\nBrightlayer UI builds off of the Material Design system, so in general, you may refer to the typography guidelines presented at Material Design. Below, we cover some of the areas where Brightlayer UI differs from Material Design.\n\n<MaterialDesignDescription\n    title={'The Type System'}\n    url={'https://m2.material.io/design/typography/the-type-system.html'}\n    description={`Material Design's typography guidelines.`}\n/>\n\nUnlike Material Design, the primary font for Brightlayer UI is [Open Sans](https://fonts.google.com/specimen/Open+Sans?selection.family=Open+Sans) (licensed under [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)). This version contains the complete 897 character set, which includes the standard ISO Latin 1, Latin CE, Greek and Cyrillic character sets. Open Sans was optimized for print, web, and mobile interfaces, and has excellent legibility characteristics in its letter forms.\n\n<TOC\n    anchors={[\n        { title: 'Introduction', hash: '#typography-guidelines' },\n        { title: 'Type Scale', hash: '#type-scale' },\n        { title: 'Principles', hash: '#principles' },\n        { title: 'Customization', hash: '#customization' },\n        { title: 'Internationalization', hash: '#internationalization' },\n    ]}\n/>\n<Divider />\n\n# Type Scale\n\nBrightlayer UI provides a type scale that includes a range of styles to support the needs of your application. All styles and fonts are available in the design library. See the [Angular](https://material.angular.io/guide/typography) and [React](https://mui.com/material-ui/react-typography/) Material theming documentation for more details for how each framework handles typography.\n\n<TypographyTable />\n\n# Principles\n\nYou should use font variations to establish an information hierarchy in your display that guides users' attention from the most important details to the least important. Creating this information hierarchy involves using multiple font properties, including size, weight, and / or color.\n\n<ImageGrid\n    images={[TextHierarchy1, TextHierarchy2, TextHierarchy3, TextHierarchy4]}\n    caption={[\n        'You can manipulate different typography properties to establish hierarchy.',\n        '1: Font size',\n        '2: Font weight',\n        '3: Font color',\n        '4: Combination',\n    ]}\n/>\n\nAs you are crafting your designs, you need to understand which content is the most important from your users' perspective and make that the easiest to find on the page.\n\n<ImageGrid\n    images={[CompeteAttention1, CompeteAttention2]}\n    captionsUnderImages={[\n        `DONT: Do not rely solely on font weight changes to indicate an active state. Avoid having auxiliary information (e.g., the circled numbers on the right) compete for users' attention.`,\n        `DO: Use clues like background color and radio buttons to clearly communicate the state.`,\n    ]}\n/>\n\nWhen changing font colors, make sure to take into consideration the [accessibility](/design/accessibility) of your chosen colors.\n\n<ImageGrid\n    images={[StatusColor1, StatusColor2]}\n    captionsUnderImages={[\n        'CAUTION: Be careful when using status colors for a large body of text, as they have reduced legibility compared to standard text colors.',\n        ' Shorter text, such as a list item tag, may be colored to reflect a certain status.',\n    ]}\n/>\n\n<Divider />\n\n# Customization\n\nThe standard styles above should cover most of the typography needs in your application. However, it is unrealistic to presume that these styles will cover _every_ potential use case. Slight customization of these styles — such as changing a font weight for a particular component — is acceptable and expected. In most cases, these can be treated as one-off styling tweaks, rather than an entirely new style. If you find that you are using customized styles in multiple places, [contact us](/community/contactus) so we can consider standardizing these styles or provide alternative recommendations.\n\nMost Brightlayer UI components have been designed to work well with the standard styles. Most often, you'll only need to worry about custom typography styles when you are developing your own product-specific components. Keep in mind that even if you are adjusting font styles, you should still continue to use the Open Sans font family.\n\n## Common Customizations\n\nThere are a few specific elements in Brightlayer UI applications that are often customized — to the point that they can be considered alternative standard styles.\n\n### App Bar Subtitle\n\nThe most commonly customized style in Brightlayer UI applications is the subtitle in the [App Bar](/patterns/appbar) component. This typically makes use of the Body1 style, but a variety of different styles are acceptable. One favorite is to use 18dp / Light.\n\n<React.Fragment>\n    <ImageGrid\n        images={[AppBar]}\n        regularWidth\n        caption={[\n            '1: App Bar with the standard typography styles.',\n            '2: App Bar with commonly used custom subtitle style.',\n        ]}\n    />\n</React.Fragment>\n\n### Scorecard Header\n\nThe standard Scorecard component makes use of custom styles by default: the three lines of text are H6, Body1, and 14dp / Light. You should avoid changing the style for the first line, but the second and third lines can be customized as appropriate.\n\n<React.Fragment>\n    <ImageGrid\n        images={[ScoreCard]}\n        regularWidth\n        caption={[\n            '1: Scorecard with the standard typography styles.',\n            '2: Scorecard with custom text styles on the second and third lines. These styles can be adjusted based on the displayed information.',\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Internationalization\n\n<ImageGrid\n    images={[SimplifiedChineseImg]}\n    regularWidth\n    caption={['Use \"Noto Sans CJK SC\" font for Simplified Chinese.']}\n/>\n\nFor non-western languages, we recommend using [Noto Sans](https://www.google.com/get/noto/). You should select the appropriate font variation based on the language(s) you are designing for.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Internationalization'}\n        url={'/patterns/internationalization'}\n        description={`Follow Brightlayer UI's guideline to design your UI for different languages.`}\n        avatar={<PxblueSmallAltIcon style={{ width: 48, height: 48 }} />}\n    />\n    <MaterialDesignDescription\n        title={'Language Support'}\n        url={'https://m2.material.io/design/typography/language-support.html'}\n        description={`Material Design's guideline on typography considerations for global audiences.`}\n    />\n</React.Fragment>\n"},"/style/themes":{"title":"Themes","text":"import React from 'react';\nimport { ImageGrid, DemoCard, MaterialDesignDescription, Divider, ThemeExplorer, TOC } from '../../app/components';\n\nimport LightThemeColors from '../../app/assets/styles/themes/light-theme-colors.png';\nimport DarkThemeColors from '../../app/assets/styles/themes/dark-theme-colors.png';\nimport LightThemeExample from '../../app/assets/styles/themes/light-theme-example.png';\nimport DarkThemeExample from '../../app/assets/styles/themes/dark-theme-example.png';\nimport OutlinedAndFlat1 from '../../app/assets/styles/themes/outlined-and-flat-1.png';\nimport OutlinedAndFlat2 from '../../app/assets/styles/themes/outlined-and-flat-2.png';\nimport OutlinedAndFlat3 from '../../app/assets/styles/themes/outlined-and-flat-3.png';\nimport DarkThemeElevation1 from '../../app/assets/styles/themes/dark-theme-elevation-1.png';\nimport DarkThemeElevation2 from '../../app/assets/styles/themes/dark-theme-elevation-2.png';\nimport DarkThemeElevation3 from '../../app/assets/styles/themes/dark-theme-elevation-3.png';\n\n{/* KEYWORDS: design style theme light dark mode */}\n\n# Themes\n\nOne of the key benefits of Brightlayer UI is the consistent look & feel between different applications. This is achieved primarily through the use of Brightlayer UI themes. Brightlayer UI offers two themes: a light theme (blue) and a dark theme (blueDark).\n\n<MaterialDesignDescription\n    title={'Material Theming Overview'}\n    description={`Material Design's brief introduction to theming.`}\n    url={'https://m2.material.io/design/material-theming/overview.html#'}\n/>\n<MaterialDesignDescription\n    title={'Dark Theme'}\n    url={'https://m2.material.io/design/color/dark-theme.html'}\n    description={`Material Design's dark theme guide.`}\n    style={{ marginRight: 0 }}\n/>\n\nBoth themes inherit from Material Design's baseline theme and expand upon it with Brightlayer UI specific styles. The major differences between Brightlayer UI themes and the baseline Material theme are the color palettes and [typographies](/style/typography).\n\n<TOC\n    anchors={[\n        { title: 'Introduction', hash: '#themes' },\n        { title: 'Blue Theme / Light Theme' },\n        { title: 'Dark Theme / Blue Dark Theme' },\n        { title: 'Developers' },\n    ]}\n/>\n\n## Explore Our Themes\n\nHave a look at the component theme explorer below and learn how Brightlayer UI themes work at a high level. Here we showcase some of the most representative components from Material Design and Brightlayer UI, and how our themes affect them.\n\n<ThemeExplorer />\n\nYou are also encouraged to explore our more detailed theme examples where you can modify the code and see the effects in real-time.\n\n<React.Fragment>\n    <DemoCard\n        repository={'showcase-demo'}\n        angular={`https://stackblitz.com/github/etn-ccis/blui-angular-showcase-demo/tree/master`}\n        react={`https://codesandbox.io/s/github/etn-ccis/blui-react-showcase-demo/tree/master`}\n    />\n    <Divider />\n</React.Fragment>\n\n# Blue Theme / Light Theme\n\n<ImageGrid images={[LightThemeExample]} regularWidth caption={'An example of an application using the light theme.'} />\n\nThe blue theme is the default theme for all Brightlayer UI applications. With a clean color vibrance and high text legibility, it is well-suited for everyday use on a computer monitor, on-site facility inspection on a tablet, or on a mobile phone screen.\n\nThe light theme uses our iconic [Blue 500](/style/color) color (`#007bc1`) throughout the application, notably in toolbars, buttons, and icons. In some places, Light Blue 500 is applied as a secondary color on interactive UI elements such as form controls. The light theme's base background color is White 200, although the surface elements are often shaded in White 50 (pure white).\n\n<ImageGrid images={[LightThemeColors]} regularWidth />\n<Divider />\n\n# Dark Theme / Blue Dark Theme\n\n<ImageGrid images={[DarkThemeExample]} regularWidth caption={'An example of an application using the dark theme.'} />\n\nThe dark theme is intended primarily for applications used in low-light conditions. As the name indicates, it utilizes mostly dark colors (grays and blacks). Other colors are typically reserved for interactive components and status displays.\n\n<ImageGrid images={[DarkThemeColors]} regularWidth />\n\nTo accommodate for [accessibility requirements](/design/accessibility), Brightlayer UI uses the 200 shade of colors when text is used on a dark background, such as in an outlined button and a text field label. For \"contained\" elements, such as in an elevated / contained button, the same style is used as in the light theme (500 shades).\n\n<ImageGrid\n    images={[OutlinedAndFlat1, OutlinedAndFlat2, OutlinedAndFlat3]}\n    captionsUnderImages={[\n        `You may use the 200 shade of text colors on a dark background.`,\n        `You may use White 50 on 500 shades.`,\n        `DONT: The 200 shades should never be used as a background color, as they can cause glare in a dark environment.`,\n    ]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n<ImageGrid\n    images={[DarkThemeElevation1, DarkThemeElevation2, DarkThemeElevation3]}\n    captionsUnderImages={[\n        'DO: Express elevation with A different surface color. (Optionally, you may apply a drop shadow to further define the edge.)',\n        'DO: Express elevation with an outlined component style.',\n        'DONT: You should never rely SOLELY on the drop shadow, no matter how dark it is.',\n    ]}\n    gridImageProps={{ sm: 6, md: 4 }}\n/>\n<Divider />\n\n# Developers\n\n## Angular\n\nAngular themes are available from our @brightlayer-ui/angular-themes package, which is a collection of SCSS stylesheets that are imported into your application and applied via classes (`blui-blue` or `blui-dark`) to both Brightlayer UI components and Angular Material components.\n\n-   @brightlayer-ui/angular-themes: [NPM](https://www.npmjs.com/package/@brightlayer-ui/angular-themes), [GitHub](https://github.com/etn-ccis/blui-angular-themes/tree/master)\n-   [Theming Guide](https://material.angular.io/guide/theming) on Angular Material\n\n## React\n\nReact themes are available from our @brightlayer-ui/react-themes package, which contains JSON objects that are consumed by the theme mechanism for MUI components (`<ThemeProvider />`), including some specific styling rules defined in [JSS](https://mui.com/system/styles/advanced/#jss-plugins).\n\n-   @brightlayer-ui/react-themes: [NPM](https://www.npmjs.com/package/@brightlayer-ui/react-themes), [GitHub](https://github.com/etn-ccis/blui-react-themes/tree/master)\n-   [Theming Guide](https://mui.com/customization/theming/) on MUI\n\n## React Native\n\nReact Native themes are available from our @brightlayer-ui/react-themes package, which utilize React Native Paper's theming mechanism. This package contains two separate dark themes which must be applied to different components to achieve the correct appearance (see the package readme for details).\n\n-   @brightlayer-ui/react-native-themes: [NPM](https://www.npmjs.com/package/@brightlayer-ui/react-native-themes), [GitHub](https://github.com/etn-ccis/blui-react-native-themes/tree/master)\n-   [Theming Guide](https://callstack.github.io/react-native-paper/docs/guides/theming) on React Native Paper\n\n## Color Palette\n\nAll of the [Brightlayer UI colors](/style/color) are available individually ([@brightlayer-ui/colors](https://www.npmjs.com/package/@brightlayer-ui/colors)) for use in your application. However, in most cases, you should use values from the themes to alter styles for better future-proofing.\n"},"/community":{"title":"Community"},"/community/license":{"title":"Licensing","text":"import React from 'react';\n\n{/* KEYWORDS: license open source bsd */}\n\n# Open Source License\n\nBrightlayer UI is open source and licensed under the BSD-3-Clause license agreement. The text of this license can be found in any of our resource repositories on GitHub and NPM. You should include this license information in a comment block in any of your projects that make use of Brightlayer UI assets (i.e., themes, colors, icons).\n\n## Why Open Source?\n\nMost modern software applications are not built in a vacuum - typically they make use of a variety of open source libraries. Brightlayer UI applications are no exception. So to make the process of using Brightlayer UI more consistent with other libraries and simplify the delivery mechanism, we have made our resources available in the same way.\n\nPublishing these resources publicly will also allow us to continuously deliver updates and improvements seamlessly to development teams.\n\nTo learn more about adding these resources into your projects, refer to the updated Framework Guides.\nIf you are interested in contributing to Brightlayer UI, please check out our [Innersource](/community/innersourcing) overview.\n\n## Full License Text\n\n```\nBSD 3-Clause License\n\nCopyright (c) 2020 - present, Eaton\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and / or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n"},"/community/blui-projects":{"title":"Apps Using Brightlayer UI","text":"import { BLUIProjectCatalog } from '../../app/components';\n\n{/* <!-- KEYWORDS: case study examples projects products --> */}\n\n# Apps Using Brightlayer UI\n\nBrightlayer UI is part of Eaton's {/* <!-- markdown-link-check-disable --> */}[Brightlayer digital strategy](https://www.eaton.com/us/en-us/digital/brightlayer.html){/* <!-- markdown-link-check-enable --> */}. Many Eaton digital apps are built using Brightlayer UI's design principles and software packages. Listed below are a few selected examples.\n\n<BLUIProjectCatalog />\n"},"/community/innersourcing":{"title":"Innersourcing","text":"import React from 'react';\nimport { Divider, ImageGrid, NewFeatureFormButton, ContributorsList } from '../../app/components';\nimport { currentMaintainers, contributors } from '../../__configuration__/contributors';\nimport FourStepsImg from '../../app/assets/brightlayer-ui-conformity.svg';\n\n{/* KEYWORDS: sharing innersourcing contribute */}\n\n# Innersource into Brightlayer UI\n\nOne of the primary goals of Brightlayer UI is to eliminate the need for teams to duplicate effort. If you have built something using Brightlayer UI that you think would benefit other development teams, we would love to hear from you. Please click the button below and fill out the form to submit your new ideas.\n\n<NewFeatureFormButton title={'Submit Your Idea'} />\n\nAlternatively, you may [send us an email](/community/contactus).\n\n## Submitting Code Directly\n\nDevelopers can also choose to add a feature by creating a pull request on our [GitHub](https://github.com/etn-ccis?q=blui). Please check out our [Contribution Guidelines](https://github.com/etn-ccis/blui-doc-it/blob/master/src/docs/community/contributing-guideline.md) before you get started.\n\nWe build our code examples using GitHub and use several online tools, such as [Code Sandbox](https://codesandbox.io) and [StackBlitz](https://stackblitz.com/) for sharing them. These tools allow you to import GitHub repositories and make the code runnable and editable in an online IDE. If you have not used these tools before, they're a great way to play with code and make sharing code snippets much easier. We recommend that you try them out when submitting code samples to speed up the process.\n\n## How We Innersource New Features\n\n<ImageGrid\n    images={[FourStepsImg]}\n    caption={'We take four steps to go through a newly proposed idea: evaluate, iterate, implement, and release.'}\n    regularWidth\n/>\n\nAfter we hear from you about an innersourcing opportunity, our first step is to evaluate the proposed idea. How common is this practice? How many Eaton applications use it? How many will use it in the future? Is this a low-hanging fruit or does it require significant effort? Once we reach a conclusion, we will get in touch with you about next steps.\n\nIf we move forward with the innersourcing effort, the next step is to perform a detailed audit (both design and development where appropriate) to evaluate conformity with Brightlayer UI. We will evaluate your usage of colors, components, and layouts to ensure that the proposed idea aligns with our existing patterns and we will also evaluate the overall re-usability of what you have created. During this process, we may contact you from time to time to ask questions or discuss parts of your submission.\n\nIn most cases, submissions will require some amount of iteration or updates before they will be brought into the Brightlayer UI design system. These updates can be performed by you or the Brightlayer UI team depending on availability and timeframe. We will work with you to establish a plan for releasing the new materials and add it to one of our scheduled quarterly releases (see our [roadmap](/roadmap) for details). Depending on the nature of the materials, they will be added to our Figma library (designs), NPM packages, and/or design pattern code examples. Occasionally, code may be available for testing in the form of alpha or beta packages prior to its official release.\n\n<Divider />\n\n# Our Code\n\nAll of the code samples and documentation from this site can be found on [GitHub](https://github.com/etn-ccis?q=blui). You can also check out the [Resources](/resources) page for links to the live demos for our examples.\n"},"/community/bugs":{"title":"Report Bugs","text":"import React from 'react';\n\n{/* KEYWORDS: bugs */}\n\n# Encountering and Reporting Bugs\n\nOne of the primary reasons for using Google's [Material Design](https://m2.material.io/) system is to take advantage of the large community of development resources attached to the project. This improves the response time for issues and cuts down on the number of bugs in the platforms. But nobody is perfect - if you run into an issue, please let us know.\n\n## If You Encounter a Bug w/ Brightlayer UI\n\nIf you run into a bug with:\n\n-   Brightlayer UI themes, components, or other NPM packages\n-   Brightlayer UI code samples or\n-   the Brightlayer UI documentation on this site\n\nyou can help us make the experience better for yourself and others by reporting a bug. Simply [Contact us](/community/contactus) with the following information:\n\n-   Summary: a brief, but clear description of the issue.\n-   Description: more detailed information about the issue including steps to reproduce.\n-   Environment: information about your machine (Operating System, Browser Version).\n\nYou can also report issues on the appropriate page on [GitHub](https://github.com/etn-ccis?q=blui).\n\n## If You Encounter a Bug in Your Framework\n\nThe JavaScript libraries and their associated Material Design libraries are part of the open source community. If you find an issue with either of these, you can submit your tickets directly to those projects using the links below (or better yet, fork the repository and contribute!):\n\n### Angular\n\n-   [Angular](https://github.com/angular/angular/issues)\n-   [Angular Material](https://github.com/angular/material2/issues)\n\n### React\n\n-   [React](https://github.com/facebook/react/issues)\n-   [MUI](https://github.com/mui/material-ui/issues)\n\n### React Native\n\n-   [React Native](https://github.com/facebook/react-native/issues)\n"},"/community/features":{"title":"Request Features","text":"import React from 'react';\nimport { Divider, NewFeatureFormButton } from '../../app/components';\n\n{/* KEYWORDS: request feature */}\n\n# New Features in Brightlayer UI\n\nIf you'd like to see something added to Brightlayer UI, such as new patterns, components, icons, code examples, theme updates, etc., please click below and fill out the form.\n\n<NewFeatureFormButton />\n\nAlternatively, you may [send us an email](/community/contactus). If you'd like to add a feature yourself, please read our section on [innersourcing](/community/innersourcing). Developers can also log an issue on [GitHub](https://github.com/etn-ccis?q=blui).\n\n<Divider />\n\n# New Features in a Framework\n\nThe JavaScript libraries and their associated Material Design libraries are part of the open source community. If you want to see new features added, you can submit your requests directly to those projects using the links below (or better yet, fork the repository and contribute!):\n\n-   [Angular](https://github.com/angular/angular/issues)\n    -   [Angular Material](https://github.com/angular/material2/issues)\n-   [React](https://github.com/facebook/react/issues)\n    -   [MUI](https://github.com/mui-org/material-ui/issues)\n-   [React Native](https://github.com/facebook/react-native/issues)\n"},"/community/faq":{"title":"FAQ","text":"import React from 'react';\nimport { Divider, FAQExpander } from '../../app/components';\n\n{/* KEYWORDS: faq question answers  */}\n\n# Frequently Asked Questions\n\nWe strive to provide as much information as possible about Brightlayer UI in our documentation as possible. However, we can't always cover everything. Below are some common questions that people have asked about the platform. Please check to see if your question has been answered below before contacting us directly.\n\n## General\n\n<div>\n<FAQExpander question={`Can you provide our team with an overview of Brightlayer UI?`}>\n\nYes. If you would like to meet with our team to go over the basics (whats and whys) of Brightlayer UI and go through everything that we have to offer, please get in touch with us to set up a time.\n\n</FAQExpander>\n\n<FAQExpander question={`What is your release schedule?`}>\n\nBrightlayer UI operates on a continuous delivery model — we release new resources as soon as they are available. Our work is planned on a quarterly basis and towards the end of each quarter we hold a release announcement event where we go over all of the updates to the platform that were made during that quarter and answer questions from the community. If you would like to attend these announcements, please contact us and we will add you to our mailing list. You can track our progress for the current quarter on our [Roadmap](/roadmap) page, which is updated every two weeks.\n\n</FAQExpander>\n</div>\n\n## Developers\n\n<div>\n<FAQExpander question={`How do I start a project?`}>\n\nIf you are starting a new project, we highly recommend using the [Brightlayer UI CLI](/development/cli) to start your project. This will automatically integrate all of the necessary Brightlayer UI resources as well as give you several templates to choose from for starting your project. If you need to integrate Brightlayer UI into an existing project, we have comprehensive Getting Started guides for [Web](/development/frameworks-web/intro) and [Mobile](/development/frameworks-mobile/intro) projects that walk you through the steps necessary to add Brightlayer UI to your project, including adding themes, components libraries, etc.\n\n</FAQExpander>\n\n<FAQExpander question={`Do you support VueJS, WPF, Flutter, or other frameworks?`}>\n\nAt this time, Brightlayer UI only supports Angular or React for web projects or React Native for mobile applications. While we would love to be able to support all of the other great frameworks that are out there, the Brightlayer UI team does not currently have the resources to effectively support them all. One of the primary goals of Brightlayer UI is to maximize re-usability and code-sharing between projects / teams — supporting every possible framework goes against this principle. We've tried to support enough frameworks to give teams flexibility in their choice while also ensuring that we can continue to provide meaningful content on an ongoing basis.\n\n</FAQExpander>\n\n<FAQExpander question={`Can the Brightlayer UI team build my application?`}>\n\nThe Brightlayer UI team is not currently staffed for doing project development for product teams. We are available to support your development team with integrating and using the Brightlayer UI resources in your project, but you will need to build your own development team to create your application.\n\n</FAQExpander>\n\n<FAQExpander question={`Do you have icons for _____?`}>\n\nWith Brightlayer UI, you have access to all of the Material Design icons as well as additional icons that have been designed specifically for Brightlayer UI applications. These can all be browsed on our [Iconography](/style/icon-library) page. Clicking on an icon will show information about the icon including usage instructions in our supported frameworks as well as buttons to download icons individually. If you need an icon that is not currently available, contact us and we will work with you on a solution.\n\n</FAQExpander>\n\n<FAQExpander question={`How do I build my own theme?`}>\n\nMost applications should stick to using the default Brightlayer UI themes. However, in some cases you may need to develop your own theme, such as for products that are sold under a different brand or are white-labeled for other companies. In this case, you should refer to the theming instructions for your selected framework ([Angular](https://v7.material.angular.io/guide/theming), [React](https://mui.com/customization/theming/), [React Native](https://callstack.github.io/react-native-paper/docs/guides/theming)). You may wish to start with the default Brightlayer UI themes and extend only the pieces that need to change for your project.\n\n</FAQExpander>\n\n<FAQExpander question={`What if I need to build a desktop app?`}>\n\nIf you need to build a standalone desktop application, we recommend using a tool like [Electron](https://www.electronjs.org/). This will allow you to build the application using one of Brightlayer UI's supported web technologies while still being able to package the application for installation onto a desktop.\n\n</FAQExpander>\n\n<FAQExpander question={`How can I contribute?`}>\n\nIf you are interested in contributing to Brightlayer UI, that's awesome! We welcome pull requests for features and bug fixes. We're also more than happy to have you report bugs and reach out to us with comments, suggestions, or other ideas. Please read our [Innersourcing](/community/innersourcing) guide for more details.\n\n</FAQExpander>\n</div>\n\n\n## Designers\n\n<div>\n<FAQExpander question={`Do you have any design assets for Brightlayer UI?`}>\n\nYes! We have standardized on Figma as our preferred tool for designing Brightlayer UI applications. We have a [Component Sticker Sheet](https://www.figma.com/community/file/1024360297793425107) as well as a [Design Pattern Sticker Sheet](https://www.figma.com/community/file/1023327014725714313) that give you access to a wide array of design elements that you can use to kick start your projects.\n\n</FAQExpander>\n\n<FAQExpander question={`Do you have assets for Adobe Illustrator or Sketch?`}>\n\nAt this time, we have standardized on Figma as our design tool of choice for Brightlayer UI applications and will not be maintaining resources for other tools. This is to ensure that teams are able to be working from the same set of resources to help maintain consistency and re-usability across products. If you would like to learn more about Figma or getting access for you team, please get in touch with us.\n\n</FAQExpander>\n\n<FAQExpander question={`Do you have design patterns for _____?`}>\n\nWe will be continuously updating the [Design Patterns](/patterns) section with new patterns and code samples as they are available. We will prioritize patterns and examples based on interest expressed from development teams. If there is something you want to see, please contact us.\n\nIf you have built something that you would like to share, check out our information on [innersourcing](/community/innersourcing) and [Contact Us](/community/contactus) with a demo.\n\n</FAQExpander>\n\n<FAQExpander question={`What do other Brightlayer UI projects look like?`}>\n\nIf you are interested in seeing some examples of past and present projects that have been designed using Brightlayer UI, please get in touch with us. We would be more than happy to point you to some reference materials from other projects.\n\n</FAQExpander>\n\n<FAQExpander question={`How much creative freedom do I have as a designer?`}>\n\nBrightlayer UI is not meant to limit your creativity or make you feel like you are designing in a box. We want Brightlayer UI products to feel like they are part of the same family, but we do not want them to all feel like the same application. There are some aspects of applications that need to be the same across products to drive this consistency, but other areas are fair game for you to develop your own style. You can learn more by reading our page on [Product Identity](/design/project-identity).\n\n</FAQExpander>\n\n<FAQExpander question={`What if my development team says _____ is not possible?`}>\n\nIf you are designing your project using the Brightlayer UI assets we provide, these should be achievable without much issue on the development side. If you have specific concerns, please feel free to contact our development team and we can help your developers find a solution that will work.\n\n</FAQExpander>\n\n<FAQExpander question={`How can I contribute?`} style={{marginBottom: 64}}>\n\nIf you are interested in contributing to Brightlayer UI, that's awesome! We would love to see what you have designed. If you have components or patterns that you think would be valuable to share with the rest of the Brightlayer UI community, please get in touch with us for a discussion. You can also find more information on our [Innersourcing](/community/innersourcing#how-we-innersource-new-features) page.\n\n</FAQExpander>\n</div>\n\nDon't see what you're looking for? [Contact Us](/community/contactus).\n"},"/community/our-team":{"title":"Our Team","text":"import React from 'react';\nimport { Divider, MaintainersCards } from '../../app/components';\n\n{/* KEYWORDS: about history team member recruit job career */}\n\n# The Brightlayer UI Team\n\n<MaintainersCards />\n<Divider />\n\n# A Brief History of Brightlayer UI\n\n-   The seeds of Brightlayer UI were sown in **2011** as a single project, Power Xpert Insight.\n-   In **2013**, work on the Power Xpert Insight Gateway exposed a need for a shared design system between similar products.\n-   The first iteration of Brightlayer UI, named Power Xpert Blue (PX Blue), was a component library built in Polymer in **2015**.\n-   In the summer of **2017**, difficulties with the Polymer component library led the team to conduct a full-scale design thinking project to fundamentally rethink how to build an effective design system. The team conducted extensive interviews with designers and developers to understand what they wanted out of our platform.\n-   At the end of **2017**, the team evaluated existing open-source design systems and selected Material Design to serve as the foundation of the new design system.\n-   In February of **2018**, PX Blue 2.0 launches with support for Angular and React.\n-   In September **2018**, PX Blue goes open source and makes all of the resources and materials available to the world. We also added support for developing mobile applications in addition to web.\n-   In **2019**, PX Blue ramped up development of custom component libraries to supplement the components available from Material Design.\n-   In **2020**, the team released an updated CLI for automatically starting new projects with PX Blue integration and began working on new multi-screen re-usable workflows. The team also won [two awards](https://www.designinnovationglobal.com/design-thinking/articles/di-global-awards-winners): Brand transformation and Enterprise Design Transformation.\n-   In **2021**, Power Xpert Blue was renamed to Brightlayer User Interface (Brightlayer UI) to better align with the larger Eaton digital strategy.\n"},"/community/contactus":{"title":"Contact Us","text":"import React from 'react';\n\n{/* KEYWORDS: contact email feedback questions support help */}\n\n# Contact the Brightlayer UI Team\n\nBrightlayer UI is constantly evolving and adding new technical documentation, live code examples, components, and more. As the system grows, we welcome your feedback and suggestions on how we can make the system more useful for you and your team. Please do not hesitate to contact us regarding any issues you experience or potential opportunities for improvement.\n\n## How to Contact Us\n\nIf you have any questions or feedback about Brightlayer UI or how to use it, you can email the team directly at [brightlayer-ui@eaton.com](mailto:brightlayer-ui@eaton.com). We typically respond to all inquiries within one business day.\n\nWe look forward to hearing from you!\n"},"/resources/developer":{"title":"Developer Resources"},"/resources/designer":{"title":"Designer Resources","text":"import React from 'react';\nimport { LinkGrid, ListOfExternalLinks } from '../../app/components';\nimport { figmaCommunityFileLinks, figmaPluginLinks } from '../../__configuration__/design';\n\n{/* KEYWORDS: design resources */}\n\n# Designer Resources\n\nWe provide the following easy-to-use Figma community resources. They are also listed publicly under the Figma community profile name [@eaton_comunity](https://figma.com/@eaton_community).\n\n# Community Files\n\nThe Brightlayer UI community files can be duplicated into your own draft space, and you can play around with our components and patterns however you like or use them to build up your own project designs.\n\n<LinkGrid links={figmaCommunityFileLinks} style={{ marginTop: 16 }} />\n\n# Plugin\n\nHelpful utility tools that speed up your design.\n\n<LinkGrid links={figmaPluginLinks} style={{ marginTop: 16 }} />\n\n# Other Design Systems\n\nListed below are some other design systems and resource groups offered by Eaton. Some may require you to log in with Eaton credentials.\n\n<ListOfExternalLinks />\n"},"/roadmap":{"title":"Roadmap"},"/release-notes":{"title":"Release Notes"},"/attributions":{"title":"Attributions"}}